// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: zitadel/admin.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../google/protobuf/duration.js";
import { Timestamp } from "../google/protobuf/timestamp.js";
import { AggregateType, Event, EventType } from "./event.js";
import { AzureADTenant, IDP, iDPFieldNameFromJSON, iDPFieldNameToJSON, IDPIDQuery, IDPLoginPolicyLink, IDPNameQuery, iDPStylingTypeFromJSON, iDPStylingTypeToJSON, IDPUserLink, LDAPAttributes, oIDCMappingFieldFromJSON, oIDCMappingFieldToJSON, Options, Provider, sAMLBindingFromJSON, sAMLBindingToJSON, sAMLNameIDFormatFromJSON, sAMLNameIDFormatToJSON, } from "./idp.js";
import { Domain, domainFieldNameFromJSON, domainFieldNameToJSON, DomainSearchQuery, InstanceDetail, TrustedDomain, TrustedDomainSearchQuery, } from "./instance.js";
import { AddCustomLabelPolicyRequest, AddCustomLockoutPolicyRequest, AddCustomLoginPolicyRequest, AddCustomPasswordComplexityPolicyRequest, AddCustomPrivacyPolicyRequest, AddOrgMemberRequest, AddOrgRequest, AddProjectGrantMemberRequest, AddProjectMemberRequest, AddProjectRoleRequest, AddUserGrantRequest, SetCustomDomainClaimedMessageTextRequest, SetCustomInitMessageTextRequest, SetCustomInviteUserMessageTextRequest, SetCustomLoginTextsRequest as SetCustomLoginTextsRequest2, SetCustomPasswordlessRegistrationMessageTextRequest, SetCustomPasswordResetMessageTextRequest, SetCustomVerifyEmailMessageTextRequest, SetCustomVerifyEmailOTPMessageTextRequest, SetCustomVerifyPhoneMessageTextRequest, SetCustomVerifySMSOTPMessageTextRequest, SetTriggerActionsRequest, SetUserMetadataRequest, } from "./management.js";
import { Member, SearchQuery } from "./member.js";
import { Milestone, milestoneFieldNameFromJSON, milestoneFieldNameToJSON, MilestoneQuery, } from "./milestone/v1/milestone.js";
import { ListDetails, ListQuery, ObjectDetails } from "./object.js";
import { Domain as Domain3, Org, orgFieldNameFromJSON, orgFieldNameToJSON, OrgQuery } from "./org.js";
import { DomainPolicy, LabelPolicy, LockoutPolicy, LoginPolicy, multiFactorTypeFromJSON, multiFactorTypeToJSON, NotificationPolicy, OrgIAMPolicy, PasswordAgePolicy, PasswordComplexityPolicy, passwordlessTypeFromJSON, passwordlessTypeToJSON, PrivacyPolicy, secondFactorTypeFromJSON, secondFactorTypeToJSON, themeModeFromJSON, themeModeToJSON, } from "./policy.js";
import { DebugNotificationProvider, EmailProvider, OIDCSettings, SecretGenerator, SecretGeneratorQuery, secretGeneratorTypeFromJSON, secretGeneratorTypeToJSON, SecurityPolicy, SMSProvider, SMTPConfig, } from "./settings.js";
import { EmailVerificationDoneScreenText, EmailVerificationScreenText, ExternalRegistrationUserOverviewScreenText, ExternalUserNotFoundScreenText, FooterText, InitializeUserDoneScreenText, InitializeUserScreenText, InitMFADoneScreenText, InitMFAOTPScreenText, InitMFAPromptScreenText, InitMFAU2FScreenText, InitPasswordDoneScreenText, InitPasswordScreenText, LinkingUserDoneScreenText, LinkingUserPromptScreenText, LoginCustomText, LoginScreenText, LogoutDoneScreenText, MessageCustomText, MFAProvidersText, PasswordChangeDoneScreenText, PasswordChangeScreenText, PasswordlessPromptScreenText, PasswordlessRegistrationDoneScreenText, PasswordlessRegistrationScreenText, PasswordlessScreenText, PasswordResetDoneScreenText, PasswordScreenText, RegistrationOptionScreenText, RegistrationOrgScreenText, RegistrationUserScreenText, SelectAccountScreenText, SuccessLoginScreenText, UsernameChangeDoneScreenText, UsernameChangeScreenText, VerifyMFAOTPScreenText, VerifyMFAU2FScreenText, } from "./text.js";
import { genderFromJSON, genderToJSON } from "./user.js";
import { DataAction, DataAPIApplication, DataAppKey, DataHumanUser, DataJWTIDP, DataMachineKey, DataMachineUser, DataOIDCApplication, DataOIDCIDP, DataProject, DataProjectGrant, ImportDataOrg as ImportDataOrg1, } from "./v1.js";
export const protobufPackage = "zitadel.admin.v1";
function createBaseHealthzRequest() {
    return {};
}
export const HealthzRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthzRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return HealthzRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseHealthzRequest();
        return message;
    },
};
function createBaseHealthzResponse() {
    return {};
}
export const HealthzResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthzResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return HealthzResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseHealthzResponse();
        return message;
    },
};
function createBaseGetSupportedLanguagesRequest() {
    return {};
}
export const GetSupportedLanguagesRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSupportedLanguagesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetSupportedLanguagesRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetSupportedLanguagesRequest();
        return message;
    },
};
function createBaseGetSupportedLanguagesResponse() {
    return { languages: [] };
}
export const GetSupportedLanguagesResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.languages) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSupportedLanguagesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.languages.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            languages: globalThis.Array.isArray(object?.languages)
                ? object.languages.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.languages?.length) {
            obj.languages = message.languages;
        }
        return obj;
    },
    create(base) {
        return GetSupportedLanguagesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSupportedLanguagesResponse();
        message.languages = object.languages?.map((e) => e) || [];
        return message;
    },
};
function createBaseGetAllowedLanguagesRequest() {
    return {};
}
export const GetAllowedLanguagesRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllowedLanguagesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetAllowedLanguagesRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetAllowedLanguagesRequest();
        return message;
    },
};
function createBaseGetAllowedLanguagesResponse() {
    return { languages: [] };
}
export const GetAllowedLanguagesResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.languages) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllowedLanguagesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.languages.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            languages: globalThis.Array.isArray(object?.languages)
                ? object.languages.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.languages?.length) {
            obj.languages = message.languages;
        }
        return obj;
    },
    create(base) {
        return GetAllowedLanguagesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAllowedLanguagesResponse();
        message.languages = object.languages?.map((e) => e) || [];
        return message;
    },
};
function createBaseSetDefaultLanguageRequest() {
    return { language: "" };
}
export const SetDefaultLanguageRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultLanguageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return SetDefaultLanguageRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultLanguageRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseSetDefaultLanguageResponse() {
    return { details: undefined };
}
export const SetDefaultLanguageResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultLanguageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetDefaultLanguageResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultLanguageResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultLanguageRequest() {
    return {};
}
export const GetDefaultLanguageRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultLanguageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetDefaultLanguageRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetDefaultLanguageRequest();
        return message;
    },
};
function createBaseGetDefaultLanguageResponse() {
    return { language: "" };
}
export const GetDefaultLanguageResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultLanguageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetDefaultLanguageResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultLanguageResponse();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseSetDefaultOrgRequest() {
    return { orgId: "" };
}
export const SetDefaultOrgRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultOrgRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return SetDefaultOrgRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultOrgRequest();
        message.orgId = object.orgId ?? "";
        return message;
    },
};
function createBaseSetDefaultOrgResponse() {
    return { details: undefined };
}
export const SetDefaultOrgResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultOrgResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetDefaultOrgResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultOrgResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultOrgRequest() {
    return {};
}
export const GetDefaultOrgRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultOrgRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetDefaultOrgRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetDefaultOrgRequest();
        return message;
    },
};
function createBaseGetDefaultOrgResponse() {
    return { org: undefined };
}
export const GetDefaultOrgResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.org !== undefined) {
            Org.encode(message.org, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultOrgResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.org = Org.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { org: isSet(object.org) ? Org.fromJSON(object.org) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.org !== undefined) {
            obj.org = Org.toJSON(message.org);
        }
        return obj;
    },
    create(base) {
        return GetDefaultOrgResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultOrgResponse();
        message.org = (object.org !== undefined && object.org !== null) ? Org.fromPartial(object.org) : undefined;
        return message;
    },
};
function createBaseGetMyInstanceRequest() {
    return {};
}
export const GetMyInstanceRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyInstanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetMyInstanceRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetMyInstanceRequest();
        return message;
    },
};
function createBaseGetMyInstanceResponse() {
    return { instance: undefined };
}
export const GetMyInstanceResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.instance !== undefined) {
            InstanceDetail.encode(message.instance, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyInstanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = InstanceDetail.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { instance: isSet(object.instance) ? InstanceDetail.fromJSON(object.instance) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = InstanceDetail.toJSON(message.instance);
        }
        return obj;
    },
    create(base) {
        return GetMyInstanceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMyInstanceResponse();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? InstanceDetail.fromPartial(object.instance)
            : undefined;
        return message;
    },
};
function createBaseListInstanceDomainsRequest() {
    return { query: undefined, sortingColumn: 0, queries: [] };
}
export const ListInstanceDomainsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.queries) {
            DomainSearchQuery.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListInstanceDomainsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.queries.push(DomainSearchQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? domainFieldNameFromJSON(object.sortingColumn) : 0,
            queries: globalThis.Array.isArray(object?.queries)
                ? object.queries.map((e) => DomainSearchQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = domainFieldNameToJSON(message.sortingColumn);
        }
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => DomainSearchQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListInstanceDomainsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListInstanceDomainsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        message.sortingColumn = object.sortingColumn ?? 0;
        message.queries = object.queries?.map((e) => DomainSearchQuery.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListInstanceDomainsResponse() {
    return { details: undefined, sortingColumn: 0, result: [] };
}
export const ListInstanceDomainsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.result) {
            Domain.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListInstanceDomainsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.result.push(Domain.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? domainFieldNameFromJSON(object.sortingColumn) : 0,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => Domain.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = domainFieldNameToJSON(message.sortingColumn);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => Domain.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListInstanceDomainsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListInstanceDomainsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.sortingColumn = object.sortingColumn ?? 0;
        message.result = object.result?.map((e) => Domain.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListInstanceTrustedDomainsRequest() {
    return { query: undefined, sortingColumn: 0, queries: [] };
}
export const ListInstanceTrustedDomainsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.queries) {
            TrustedDomainSearchQuery.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListInstanceTrustedDomainsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.queries.push(TrustedDomainSearchQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? domainFieldNameFromJSON(object.sortingColumn) : 0,
            queries: globalThis.Array.isArray(object?.queries)
                ? object.queries.map((e) => TrustedDomainSearchQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = domainFieldNameToJSON(message.sortingColumn);
        }
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => TrustedDomainSearchQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListInstanceTrustedDomainsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListInstanceTrustedDomainsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        message.sortingColumn = object.sortingColumn ?? 0;
        message.queries = object.queries?.map((e) => TrustedDomainSearchQuery.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListInstanceTrustedDomainsResponse() {
    return { details: undefined, sortingColumn: 0, result: [] };
}
export const ListInstanceTrustedDomainsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.result) {
            TrustedDomain.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListInstanceTrustedDomainsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.result.push(TrustedDomain.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? domainFieldNameFromJSON(object.sortingColumn) : 0,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => TrustedDomain.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = domainFieldNameToJSON(message.sortingColumn);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => TrustedDomain.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListInstanceTrustedDomainsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListInstanceTrustedDomainsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.sortingColumn = object.sortingColumn ?? 0;
        message.result = object.result?.map((e) => TrustedDomain.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAddInstanceTrustedDomainRequest() {
    return { domain: "" };
}
export const AddInstanceTrustedDomainRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.domain !== "") {
            writer.uint32(10).string(message.domain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddInstanceTrustedDomainRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { domain: isSet(object.domain) ? globalThis.String(object.domain) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        return obj;
    },
    create(base) {
        return AddInstanceTrustedDomainRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddInstanceTrustedDomainRequest();
        message.domain = object.domain ?? "";
        return message;
    },
};
function createBaseAddInstanceTrustedDomainResponse() {
    return { details: undefined };
}
export const AddInstanceTrustedDomainResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddInstanceTrustedDomainResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddInstanceTrustedDomainResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddInstanceTrustedDomainResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveInstanceTrustedDomainRequest() {
    return { domain: "" };
}
export const RemoveInstanceTrustedDomainRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.domain !== "") {
            writer.uint32(10).string(message.domain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveInstanceTrustedDomainRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { domain: isSet(object.domain) ? globalThis.String(object.domain) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        return obj;
    },
    create(base) {
        return RemoveInstanceTrustedDomainRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveInstanceTrustedDomainRequest();
        message.domain = object.domain ?? "";
        return message;
    },
};
function createBaseRemoveInstanceTrustedDomainResponse() {
    return { details: undefined };
}
export const RemoveInstanceTrustedDomainResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveInstanceTrustedDomainResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveInstanceTrustedDomainResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveInstanceTrustedDomainResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListSecretGeneratorsRequest() {
    return { query: undefined, queries: [] };
}
export const ListSecretGeneratorsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        for (const v of message.queries) {
            SecretGeneratorQuery.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSecretGeneratorsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.queries.push(SecretGeneratorQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
            queries: globalThis.Array.isArray(object?.queries)
                ? object.queries.map((e) => SecretGeneratorQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => SecretGeneratorQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListSecretGeneratorsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListSecretGeneratorsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        message.queries = object.queries?.map((e) => SecretGeneratorQuery.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListSecretGeneratorsResponse() {
    return { details: undefined, result: [] };
}
export const ListSecretGeneratorsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            SecretGenerator.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSecretGeneratorsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.result.push(SecretGenerator.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result)
                ? object.result.map((e) => SecretGenerator.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => SecretGenerator.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListSecretGeneratorsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListSecretGeneratorsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => SecretGenerator.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetSecretGeneratorRequest() {
    return { generatorType: 0 };
}
export const GetSecretGeneratorRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.generatorType !== 0) {
            writer.uint32(8).int32(message.generatorType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSecretGeneratorRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.generatorType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { generatorType: isSet(object.generatorType) ? secretGeneratorTypeFromJSON(object.generatorType) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.generatorType !== 0) {
            obj.generatorType = secretGeneratorTypeToJSON(message.generatorType);
        }
        return obj;
    },
    create(base) {
        return GetSecretGeneratorRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSecretGeneratorRequest();
        message.generatorType = object.generatorType ?? 0;
        return message;
    },
};
function createBaseGetSecretGeneratorResponse() {
    return { secretGenerator: undefined };
}
export const GetSecretGeneratorResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.secretGenerator !== undefined) {
            SecretGenerator.encode(message.secretGenerator, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSecretGeneratorResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.secretGenerator = SecretGenerator.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            secretGenerator: isSet(object.secretGenerator) ? SecretGenerator.fromJSON(object.secretGenerator) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.secretGenerator !== undefined) {
            obj.secretGenerator = SecretGenerator.toJSON(message.secretGenerator);
        }
        return obj;
    },
    create(base) {
        return GetSecretGeneratorResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSecretGeneratorResponse();
        message.secretGenerator = (object.secretGenerator !== undefined && object.secretGenerator !== null)
            ? SecretGenerator.fromPartial(object.secretGenerator)
            : undefined;
        return message;
    },
};
function createBaseUpdateSecretGeneratorRequest() {
    return {
        generatorType: 0,
        length: 0,
        expiry: undefined,
        includeLowerLetters: false,
        includeUpperLetters: false,
        includeDigits: false,
        includeSymbols: false,
    };
}
export const UpdateSecretGeneratorRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.generatorType !== 0) {
            writer.uint32(8).int32(message.generatorType);
        }
        if (message.length !== 0) {
            writer.uint32(16).uint32(message.length);
        }
        if (message.expiry !== undefined) {
            Duration.encode(message.expiry, writer.uint32(26).fork()).join();
        }
        if (message.includeLowerLetters !== false) {
            writer.uint32(32).bool(message.includeLowerLetters);
        }
        if (message.includeUpperLetters !== false) {
            writer.uint32(40).bool(message.includeUpperLetters);
        }
        if (message.includeDigits !== false) {
            writer.uint32(48).bool(message.includeDigits);
        }
        if (message.includeSymbols !== false) {
            writer.uint32(56).bool(message.includeSymbols);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSecretGeneratorRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.generatorType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.length = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.expiry = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.includeLowerLetters = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.includeUpperLetters = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.includeDigits = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.includeSymbols = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            generatorType: isSet(object.generatorType) ? secretGeneratorTypeFromJSON(object.generatorType) : 0,
            length: isSet(object.length) ? globalThis.Number(object.length) : 0,
            expiry: isSet(object.expiry) ? Duration.fromJSON(object.expiry) : undefined,
            includeLowerLetters: isSet(object.includeLowerLetters) ? globalThis.Boolean(object.includeLowerLetters) : false,
            includeUpperLetters: isSet(object.includeUpperLetters) ? globalThis.Boolean(object.includeUpperLetters) : false,
            includeDigits: isSet(object.includeDigits) ? globalThis.Boolean(object.includeDigits) : false,
            includeSymbols: isSet(object.includeSymbols) ? globalThis.Boolean(object.includeSymbols) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.generatorType !== 0) {
            obj.generatorType = secretGeneratorTypeToJSON(message.generatorType);
        }
        if (message.length !== 0) {
            obj.length = Math.round(message.length);
        }
        if (message.expiry !== undefined) {
            obj.expiry = Duration.toJSON(message.expiry);
        }
        if (message.includeLowerLetters !== false) {
            obj.includeLowerLetters = message.includeLowerLetters;
        }
        if (message.includeUpperLetters !== false) {
            obj.includeUpperLetters = message.includeUpperLetters;
        }
        if (message.includeDigits !== false) {
            obj.includeDigits = message.includeDigits;
        }
        if (message.includeSymbols !== false) {
            obj.includeSymbols = message.includeSymbols;
        }
        return obj;
    },
    create(base) {
        return UpdateSecretGeneratorRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSecretGeneratorRequest();
        message.generatorType = object.generatorType ?? 0;
        message.length = object.length ?? 0;
        message.expiry = (object.expiry !== undefined && object.expiry !== null)
            ? Duration.fromPartial(object.expiry)
            : undefined;
        message.includeLowerLetters = object.includeLowerLetters ?? false;
        message.includeUpperLetters = object.includeUpperLetters ?? false;
        message.includeDigits = object.includeDigits ?? false;
        message.includeSymbols = object.includeSymbols ?? false;
        return message;
    },
};
function createBaseUpdateSecretGeneratorResponse() {
    return { details: undefined };
}
export const UpdateSecretGeneratorResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSecretGeneratorResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateSecretGeneratorResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSecretGeneratorResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetSMTPConfigRequest() {
    return {};
}
export const GetSMTPConfigRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetSMTPConfigRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetSMTPConfigRequest();
        return message;
    },
};
function createBaseGetSMTPConfigResponse() {
    return { smtpConfig: undefined };
}
export const GetSMTPConfigResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.smtpConfig !== undefined) {
            SMTPConfig.encode(message.smtpConfig, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.smtpConfig = SMTPConfig.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { smtpConfig: isSet(object.smtpConfig) ? SMTPConfig.fromJSON(object.smtpConfig) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.smtpConfig !== undefined) {
            obj.smtpConfig = SMTPConfig.toJSON(message.smtpConfig);
        }
        return obj;
    },
    create(base) {
        return GetSMTPConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSMTPConfigResponse();
        message.smtpConfig = (object.smtpConfig !== undefined && object.smtpConfig !== null)
            ? SMTPConfig.fromPartial(object.smtpConfig)
            : undefined;
        return message;
    },
};
function createBaseGetSMTPConfigByIdRequest() {
    return { id: "" };
}
export const GetSMTPConfigByIdRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSMTPConfigByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return GetSMTPConfigByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSMTPConfigByIdRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseGetSMTPConfigByIdResponse() {
    return { smtpConfig: undefined };
}
export const GetSMTPConfigByIdResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.smtpConfig !== undefined) {
            SMTPConfig.encode(message.smtpConfig, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSMTPConfigByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.smtpConfig = SMTPConfig.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { smtpConfig: isSet(object.smtpConfig) ? SMTPConfig.fromJSON(object.smtpConfig) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.smtpConfig !== undefined) {
            obj.smtpConfig = SMTPConfig.toJSON(message.smtpConfig);
        }
        return obj;
    },
    create(base) {
        return GetSMTPConfigByIdResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSMTPConfigByIdResponse();
        message.smtpConfig = (object.smtpConfig !== undefined && object.smtpConfig !== null)
            ? SMTPConfig.fromPartial(object.smtpConfig)
            : undefined;
        return message;
    },
};
function createBaseListSMTPConfigsRequest() {
    return { query: undefined };
}
export const ListSMTPConfigsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSMTPConfigsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return ListSMTPConfigsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListSMTPConfigsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        return message;
    },
};
function createBaseListSMTPConfigsResponse() {
    return { details: undefined, result: [] };
}
export const ListSMTPConfigsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            SMTPConfig.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSMTPConfigsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(SMTPConfig.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => SMTPConfig.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => SMTPConfig.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListSMTPConfigsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListSMTPConfigsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => SMTPConfig.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAddSMTPConfigRequest() {
    return {
        senderAddress: "",
        senderName: "",
        tls: false,
        host: "",
        user: "",
        password: "",
        replyToAddress: "",
        description: "",
    };
}
export const AddSMTPConfigRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.senderName !== "") {
            writer.uint32(18).string(message.senderName);
        }
        if (message.tls !== false) {
            writer.uint32(24).bool(message.tls);
        }
        if (message.host !== "") {
            writer.uint32(34).string(message.host);
        }
        if (message.user !== "") {
            writer.uint32(42).string(message.user);
        }
        if (message.password !== "") {
            writer.uint32(50).string(message.password);
        }
        if (message.replyToAddress !== "") {
            writer.uint32(58).string(message.replyToAddress);
        }
        if (message.description !== "") {
            writer.uint32(66).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.senderAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.senderName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.tls = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.user = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.replyToAddress = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
            senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
            tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
            host: isSet(object.host) ? globalThis.String(object.host) : "",
            user: isSet(object.user) ? globalThis.String(object.user) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            replyToAddress: isSet(object.replyToAddress) ? globalThis.String(object.replyToAddress) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.senderAddress !== "") {
            obj.senderAddress = message.senderAddress;
        }
        if (message.senderName !== "") {
            obj.senderName = message.senderName;
        }
        if (message.tls !== false) {
            obj.tls = message.tls;
        }
        if (message.host !== "") {
            obj.host = message.host;
        }
        if (message.user !== "") {
            obj.user = message.user;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.replyToAddress !== "") {
            obj.replyToAddress = message.replyToAddress;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return AddSMTPConfigRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddSMTPConfigRequest();
        message.senderAddress = object.senderAddress ?? "";
        message.senderName = object.senderName ?? "";
        message.tls = object.tls ?? false;
        message.host = object.host ?? "";
        message.user = object.user ?? "";
        message.password = object.password ?? "";
        message.replyToAddress = object.replyToAddress ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseAddSMTPConfigResponse() {
    return { details: undefined, id: "" };
}
export const AddSMTPConfigResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddSMTPConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddSMTPConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateSMTPConfigRequest() {
    return {
        senderAddress: "",
        senderName: "",
        tls: false,
        host: "",
        user: "",
        replyToAddress: "",
        password: "",
        description: "",
        id: "",
    };
}
export const UpdateSMTPConfigRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.senderName !== "") {
            writer.uint32(18).string(message.senderName);
        }
        if (message.tls !== false) {
            writer.uint32(24).bool(message.tls);
        }
        if (message.host !== "") {
            writer.uint32(34).string(message.host);
        }
        if (message.user !== "") {
            writer.uint32(42).string(message.user);
        }
        if (message.replyToAddress !== "") {
            writer.uint32(50).string(message.replyToAddress);
        }
        if (message.password !== "") {
            writer.uint32(58).string(message.password);
        }
        if (message.description !== "") {
            writer.uint32(66).string(message.description);
        }
        if (message.id !== "") {
            writer.uint32(74).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.senderAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.senderName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.tls = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.user = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.replyToAddress = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
            senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
            tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
            host: isSet(object.host) ? globalThis.String(object.host) : "",
            user: isSet(object.user) ? globalThis.String(object.user) : "",
            replyToAddress: isSet(object.replyToAddress) ? globalThis.String(object.replyToAddress) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.senderAddress !== "") {
            obj.senderAddress = message.senderAddress;
        }
        if (message.senderName !== "") {
            obj.senderName = message.senderName;
        }
        if (message.tls !== false) {
            obj.tls = message.tls;
        }
        if (message.host !== "") {
            obj.host = message.host;
        }
        if (message.user !== "") {
            obj.user = message.user;
        }
        if (message.replyToAddress !== "") {
            obj.replyToAddress = message.replyToAddress;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return UpdateSMTPConfigRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMTPConfigRequest();
        message.senderAddress = object.senderAddress ?? "";
        message.senderName = object.senderName ?? "";
        message.tls = object.tls ?? false;
        message.host = object.host ?? "";
        message.user = object.user ?? "";
        message.replyToAddress = object.replyToAddress ?? "";
        message.password = object.password ?? "";
        message.description = object.description ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateSMTPConfigResponse() {
    return { details: undefined };
}
export const UpdateSMTPConfigResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateSMTPConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMTPConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateSMTPConfigPasswordRequest() {
    return { password: "", id: "" };
}
export const UpdateSMTPConfigPasswordRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.password !== "") {
            writer.uint32(10).string(message.password);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMTPConfigPasswordRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return UpdateSMTPConfigPasswordRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMTPConfigPasswordRequest();
        message.password = object.password ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateSMTPConfigPasswordResponse() {
    return { details: undefined };
}
export const UpdateSMTPConfigPasswordResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMTPConfigPasswordResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateSMTPConfigPasswordResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMTPConfigPasswordResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseActivateSMTPConfigRequest() {
    return { id: "" };
}
export const ActivateSMTPConfigRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return ActivateSMTPConfigRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseActivateSMTPConfigRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseActivateSMTPConfigResponse() {
    return { details: undefined };
}
export const ActivateSMTPConfigResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ActivateSMTPConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseActivateSMTPConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseDeactivateSMTPConfigRequest() {
    return { id: "" };
}
export const DeactivateSMTPConfigRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return DeactivateSMTPConfigRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeactivateSMTPConfigRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseDeactivateSMTPConfigResponse() {
    return { details: undefined };
}
export const DeactivateSMTPConfigResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return DeactivateSMTPConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeactivateSMTPConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveSMTPConfigRequest() {
    return { id: "" };
}
export const RemoveSMTPConfigRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return RemoveSMTPConfigRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveSMTPConfigRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseRemoveSMTPConfigResponse() {
    return { details: undefined };
}
export const RemoveSMTPConfigResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveSMTPConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveSMTPConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseTestSMTPConfigByIdRequest() {
    return { id: "", receiverAddress: "" };
}
export const TestSMTPConfigByIdRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.receiverAddress !== "") {
            writer.uint32(18).string(message.receiverAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestSMTPConfigByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.receiverAddress = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            receiverAddress: isSet(object.receiverAddress) ? globalThis.String(object.receiverAddress) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.receiverAddress !== "") {
            obj.receiverAddress = message.receiverAddress;
        }
        return obj;
    },
    create(base) {
        return TestSMTPConfigByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTestSMTPConfigByIdRequest();
        message.id = object.id ?? "";
        message.receiverAddress = object.receiverAddress ?? "";
        return message;
    },
};
function createBaseTestSMTPConfigByIdResponse() {
    return {};
}
export const TestSMTPConfigByIdResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestSMTPConfigByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return TestSMTPConfigByIdResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseTestSMTPConfigByIdResponse();
        return message;
    },
};
function createBaseTestSMTPConfigRequest() {
    return {
        senderAddress: "",
        senderName: "",
        tls: false,
        host: "",
        user: "",
        password: "",
        receiverAddress: "",
        id: "",
    };
}
export const TestSMTPConfigRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.senderName !== "") {
            writer.uint32(18).string(message.senderName);
        }
        if (message.tls !== false) {
            writer.uint32(24).bool(message.tls);
        }
        if (message.host !== "") {
            writer.uint32(34).string(message.host);
        }
        if (message.user !== "") {
            writer.uint32(42).string(message.user);
        }
        if (message.password !== "") {
            writer.uint32(50).string(message.password);
        }
        if (message.receiverAddress !== "") {
            writer.uint32(58).string(message.receiverAddress);
        }
        if (message.id !== "") {
            writer.uint32(66).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.senderAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.senderName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.tls = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.user = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.receiverAddress = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
            senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
            tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
            host: isSet(object.host) ? globalThis.String(object.host) : "",
            user: isSet(object.user) ? globalThis.String(object.user) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            receiverAddress: isSet(object.receiverAddress) ? globalThis.String(object.receiverAddress) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.senderAddress !== "") {
            obj.senderAddress = message.senderAddress;
        }
        if (message.senderName !== "") {
            obj.senderName = message.senderName;
        }
        if (message.tls !== false) {
            obj.tls = message.tls;
        }
        if (message.host !== "") {
            obj.host = message.host;
        }
        if (message.user !== "") {
            obj.user = message.user;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.receiverAddress !== "") {
            obj.receiverAddress = message.receiverAddress;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return TestSMTPConfigRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTestSMTPConfigRequest();
        message.senderAddress = object.senderAddress ?? "";
        message.senderName = object.senderName ?? "";
        message.tls = object.tls ?? false;
        message.host = object.host ?? "";
        message.user = object.user ?? "";
        message.password = object.password ?? "";
        message.receiverAddress = object.receiverAddress ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseTestSMTPConfigResponse() {
    return {};
}
export const TestSMTPConfigResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return TestSMTPConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseTestSMTPConfigResponse();
        return message;
    },
};
function createBaseGetEmailProviderRequest() {
    return {};
}
export const GetEmailProviderRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEmailProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetEmailProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetEmailProviderRequest();
        return message;
    },
};
function createBaseGetEmailProviderResponse() {
    return { config: undefined };
}
export const GetEmailProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.config !== undefined) {
            EmailProvider.encode(message.config, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEmailProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.config = EmailProvider.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { config: isSet(object.config) ? EmailProvider.fromJSON(object.config) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.config !== undefined) {
            obj.config = EmailProvider.toJSON(message.config);
        }
        return obj;
    },
    create(base) {
        return GetEmailProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetEmailProviderResponse();
        message.config = (object.config !== undefined && object.config !== null)
            ? EmailProvider.fromPartial(object.config)
            : undefined;
        return message;
    },
};
function createBaseGetEmailProviderByIdRequest() {
    return { id: "" };
}
export const GetEmailProviderByIdRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEmailProviderByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return GetEmailProviderByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetEmailProviderByIdRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseGetEmailProviderByIdResponse() {
    return { config: undefined };
}
export const GetEmailProviderByIdResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.config !== undefined) {
            EmailProvider.encode(message.config, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEmailProviderByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.config = EmailProvider.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { config: isSet(object.config) ? EmailProvider.fromJSON(object.config) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.config !== undefined) {
            obj.config = EmailProvider.toJSON(message.config);
        }
        return obj;
    },
    create(base) {
        return GetEmailProviderByIdResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetEmailProviderByIdResponse();
        message.config = (object.config !== undefined && object.config !== null)
            ? EmailProvider.fromPartial(object.config)
            : undefined;
        return message;
    },
};
function createBaseListEmailProvidersRequest() {
    return { query: undefined };
}
export const ListEmailProvidersRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEmailProvidersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return ListEmailProvidersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListEmailProvidersRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        return message;
    },
};
function createBaseListEmailProvidersResponse() {
    return { details: undefined, result: [] };
}
export const ListEmailProvidersResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            EmailProvider.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEmailProvidersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(EmailProvider.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => EmailProvider.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => EmailProvider.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListEmailProvidersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListEmailProvidersResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => EmailProvider.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAddEmailProviderSMTPRequest() {
    return {
        senderAddress: "",
        senderName: "",
        tls: false,
        host: "",
        user: "",
        password: "",
        replyToAddress: "",
        description: "",
    };
}
export const AddEmailProviderSMTPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.senderName !== "") {
            writer.uint32(18).string(message.senderName);
        }
        if (message.tls !== false) {
            writer.uint32(24).bool(message.tls);
        }
        if (message.host !== "") {
            writer.uint32(34).string(message.host);
        }
        if (message.user !== "") {
            writer.uint32(42).string(message.user);
        }
        if (message.password !== "") {
            writer.uint32(50).string(message.password);
        }
        if (message.replyToAddress !== "") {
            writer.uint32(58).string(message.replyToAddress);
        }
        if (message.description !== "") {
            writer.uint32(66).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddEmailProviderSMTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.senderAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.senderName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.tls = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.user = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.replyToAddress = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
            senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
            tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
            host: isSet(object.host) ? globalThis.String(object.host) : "",
            user: isSet(object.user) ? globalThis.String(object.user) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            replyToAddress: isSet(object.replyToAddress) ? globalThis.String(object.replyToAddress) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.senderAddress !== "") {
            obj.senderAddress = message.senderAddress;
        }
        if (message.senderName !== "") {
            obj.senderName = message.senderName;
        }
        if (message.tls !== false) {
            obj.tls = message.tls;
        }
        if (message.host !== "") {
            obj.host = message.host;
        }
        if (message.user !== "") {
            obj.user = message.user;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.replyToAddress !== "") {
            obj.replyToAddress = message.replyToAddress;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return AddEmailProviderSMTPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddEmailProviderSMTPRequest();
        message.senderAddress = object.senderAddress ?? "";
        message.senderName = object.senderName ?? "";
        message.tls = object.tls ?? false;
        message.host = object.host ?? "";
        message.user = object.user ?? "";
        message.password = object.password ?? "";
        message.replyToAddress = object.replyToAddress ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseAddEmailProviderSMTPResponse() {
    return { details: undefined, id: "" };
}
export const AddEmailProviderSMTPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddEmailProviderSMTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddEmailProviderSMTPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddEmailProviderSMTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateEmailProviderSMTPRequest() {
    return {
        senderAddress: "",
        senderName: "",
        tls: false,
        host: "",
        user: "",
        replyToAddress: "",
        password: "",
        description: "",
        id: "",
    };
}
export const UpdateEmailProviderSMTPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.senderName !== "") {
            writer.uint32(18).string(message.senderName);
        }
        if (message.tls !== false) {
            writer.uint32(24).bool(message.tls);
        }
        if (message.host !== "") {
            writer.uint32(34).string(message.host);
        }
        if (message.user !== "") {
            writer.uint32(42).string(message.user);
        }
        if (message.replyToAddress !== "") {
            writer.uint32(50).string(message.replyToAddress);
        }
        if (message.password !== "") {
            writer.uint32(58).string(message.password);
        }
        if (message.description !== "") {
            writer.uint32(66).string(message.description);
        }
        if (message.id !== "") {
            writer.uint32(74).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEmailProviderSMTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.senderAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.senderName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.tls = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.user = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.replyToAddress = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
            senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
            tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
            host: isSet(object.host) ? globalThis.String(object.host) : "",
            user: isSet(object.user) ? globalThis.String(object.user) : "",
            replyToAddress: isSet(object.replyToAddress) ? globalThis.String(object.replyToAddress) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.senderAddress !== "") {
            obj.senderAddress = message.senderAddress;
        }
        if (message.senderName !== "") {
            obj.senderName = message.senderName;
        }
        if (message.tls !== false) {
            obj.tls = message.tls;
        }
        if (message.host !== "") {
            obj.host = message.host;
        }
        if (message.user !== "") {
            obj.user = message.user;
        }
        if (message.replyToAddress !== "") {
            obj.replyToAddress = message.replyToAddress;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return UpdateEmailProviderSMTPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEmailProviderSMTPRequest();
        message.senderAddress = object.senderAddress ?? "";
        message.senderName = object.senderName ?? "";
        message.tls = object.tls ?? false;
        message.host = object.host ?? "";
        message.user = object.user ?? "";
        message.replyToAddress = object.replyToAddress ?? "";
        message.password = object.password ?? "";
        message.description = object.description ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateEmailProviderSMTPResponse() {
    return { details: undefined };
}
export const UpdateEmailProviderSMTPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEmailProviderSMTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateEmailProviderSMTPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEmailProviderSMTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateEmailProviderSMTPPasswordRequest() {
    return { password: "", id: "" };
}
export const UpdateEmailProviderSMTPPasswordRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.password !== "") {
            writer.uint32(10).string(message.password);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEmailProviderSMTPPasswordRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return UpdateEmailProviderSMTPPasswordRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEmailProviderSMTPPasswordRequest();
        message.password = object.password ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateEmailProviderSMTPPasswordResponse() {
    return { details: undefined };
}
export const UpdateEmailProviderSMTPPasswordResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEmailProviderSMTPPasswordResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateEmailProviderSMTPPasswordResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEmailProviderSMTPPasswordResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddEmailProviderHTTPRequest() {
    return { endpoint: "", description: "" };
}
export const AddEmailProviderHTTPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.endpoint !== "") {
            writer.uint32(10).string(message.endpoint);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddEmailProviderHTTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.endpoint !== "") {
            obj.endpoint = message.endpoint;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return AddEmailProviderHTTPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddEmailProviderHTTPRequest();
        message.endpoint = object.endpoint ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseAddEmailProviderHTTPResponse() {
    return { details: undefined, id: "" };
}
export const AddEmailProviderHTTPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddEmailProviderHTTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddEmailProviderHTTPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddEmailProviderHTTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateEmailProviderHTTPRequest() {
    return { id: "", endpoint: "", description: "" };
}
export const UpdateEmailProviderHTTPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.endpoint !== "") {
            writer.uint32(18).string(message.endpoint);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEmailProviderHTTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.endpoint !== "") {
            obj.endpoint = message.endpoint;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return UpdateEmailProviderHTTPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEmailProviderHTTPRequest();
        message.id = object.id ?? "";
        message.endpoint = object.endpoint ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseUpdateEmailProviderHTTPResponse() {
    return { details: undefined };
}
export const UpdateEmailProviderHTTPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEmailProviderHTTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateEmailProviderHTTPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEmailProviderHTTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseActivateEmailProviderRequest() {
    return { id: "" };
}
export const ActivateEmailProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateEmailProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return ActivateEmailProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseActivateEmailProviderRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseActivateEmailProviderResponse() {
    return { details: undefined };
}
export const ActivateEmailProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateEmailProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ActivateEmailProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseActivateEmailProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseDeactivateEmailProviderRequest() {
    return { id: "" };
}
export const DeactivateEmailProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateEmailProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return DeactivateEmailProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeactivateEmailProviderRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseDeactivateEmailProviderResponse() {
    return { details: undefined };
}
export const DeactivateEmailProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateEmailProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return DeactivateEmailProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeactivateEmailProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveEmailProviderRequest() {
    return { id: "" };
}
export const RemoveEmailProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveEmailProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return RemoveEmailProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveEmailProviderRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseRemoveEmailProviderResponse() {
    return { details: undefined };
}
export const RemoveEmailProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveEmailProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveEmailProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveEmailProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseTestEmailProviderSMTPByIdRequest() {
    return { id: "", receiverAddress: "" };
}
export const TestEmailProviderSMTPByIdRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.receiverAddress !== "") {
            writer.uint32(18).string(message.receiverAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestEmailProviderSMTPByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.receiverAddress = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            receiverAddress: isSet(object.receiverAddress) ? globalThis.String(object.receiverAddress) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.receiverAddress !== "") {
            obj.receiverAddress = message.receiverAddress;
        }
        return obj;
    },
    create(base) {
        return TestEmailProviderSMTPByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTestEmailProviderSMTPByIdRequest();
        message.id = object.id ?? "";
        message.receiverAddress = object.receiverAddress ?? "";
        return message;
    },
};
function createBaseTestEmailProviderSMTPByIdResponse() {
    return {};
}
export const TestEmailProviderSMTPByIdResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestEmailProviderSMTPByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return TestEmailProviderSMTPByIdResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseTestEmailProviderSMTPByIdResponse();
        return message;
    },
};
function createBaseTestEmailProviderSMTPRequest() {
    return {
        senderAddress: "",
        senderName: "",
        tls: false,
        host: "",
        user: "",
        password: "",
        receiverAddress: "",
        id: "",
    };
}
export const TestEmailProviderSMTPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.senderName !== "") {
            writer.uint32(18).string(message.senderName);
        }
        if (message.tls !== false) {
            writer.uint32(24).bool(message.tls);
        }
        if (message.host !== "") {
            writer.uint32(34).string(message.host);
        }
        if (message.user !== "") {
            writer.uint32(42).string(message.user);
        }
        if (message.password !== "") {
            writer.uint32(50).string(message.password);
        }
        if (message.receiverAddress !== "") {
            writer.uint32(58).string(message.receiverAddress);
        }
        if (message.id !== "") {
            writer.uint32(66).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestEmailProviderSMTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.senderAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.senderName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.tls = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.user = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.receiverAddress = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
            senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
            tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
            host: isSet(object.host) ? globalThis.String(object.host) : "",
            user: isSet(object.user) ? globalThis.String(object.user) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            receiverAddress: isSet(object.receiverAddress) ? globalThis.String(object.receiverAddress) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.senderAddress !== "") {
            obj.senderAddress = message.senderAddress;
        }
        if (message.senderName !== "") {
            obj.senderName = message.senderName;
        }
        if (message.tls !== false) {
            obj.tls = message.tls;
        }
        if (message.host !== "") {
            obj.host = message.host;
        }
        if (message.user !== "") {
            obj.user = message.user;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.receiverAddress !== "") {
            obj.receiverAddress = message.receiverAddress;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return TestEmailProviderSMTPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTestEmailProviderSMTPRequest();
        message.senderAddress = object.senderAddress ?? "";
        message.senderName = object.senderName ?? "";
        message.tls = object.tls ?? false;
        message.host = object.host ?? "";
        message.user = object.user ?? "";
        message.password = object.password ?? "";
        message.receiverAddress = object.receiverAddress ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseTestEmailProviderSMTPResponse() {
    return {};
}
export const TestEmailProviderSMTPResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestEmailProviderSMTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return TestEmailProviderSMTPResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseTestEmailProviderSMTPResponse();
        return message;
    },
};
function createBaseListSMSProvidersRequest() {
    return { query: undefined };
}
export const ListSMSProvidersRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSMSProvidersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return ListSMSProvidersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListSMSProvidersRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        return message;
    },
};
function createBaseListSMSProvidersResponse() {
    return { details: undefined, result: [] };
}
export const ListSMSProvidersResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            SMSProvider.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSMSProvidersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.result.push(SMSProvider.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => SMSProvider.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => SMSProvider.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListSMSProvidersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListSMSProvidersResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => SMSProvider.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetSMSProviderRequest() {
    return { id: "" };
}
export const GetSMSProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSMSProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return GetSMSProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSMSProviderRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseGetSMSProviderResponse() {
    return { config: undefined };
}
export const GetSMSProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.config !== undefined) {
            SMSProvider.encode(message.config, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSMSProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.config = SMSProvider.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { config: isSet(object.config) ? SMSProvider.fromJSON(object.config) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.config !== undefined) {
            obj.config = SMSProvider.toJSON(message.config);
        }
        return obj;
    },
    create(base) {
        return GetSMSProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSMSProviderResponse();
        message.config = (object.config !== undefined && object.config !== null)
            ? SMSProvider.fromPartial(object.config)
            : undefined;
        return message;
    },
};
function createBaseAddSMSProviderTwilioRequest() {
    return { sid: "", token: "", senderNumber: "", description: "", verifyServiceSid: "" };
}
export const AddSMSProviderTwilioRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sid !== "") {
            writer.uint32(10).string(message.sid);
        }
        if (message.token !== "") {
            writer.uint32(18).string(message.token);
        }
        if (message.senderNumber !== "") {
            writer.uint32(26).string(message.senderNumber);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.verifyServiceSid !== "") {
            writer.uint32(42).string(message.verifyServiceSid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSMSProviderTwilioRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sid = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.senderNumber = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.verifyServiceSid = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            senderNumber: isSet(object.senderNumber) ? globalThis.String(object.senderNumber) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            verifyServiceSid: isSet(object.verifyServiceSid) ? globalThis.String(object.verifyServiceSid) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sid !== "") {
            obj.sid = message.sid;
        }
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.senderNumber !== "") {
            obj.senderNumber = message.senderNumber;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.verifyServiceSid !== "") {
            obj.verifyServiceSid = message.verifyServiceSid;
        }
        return obj;
    },
    create(base) {
        return AddSMSProviderTwilioRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddSMSProviderTwilioRequest();
        message.sid = object.sid ?? "";
        message.token = object.token ?? "";
        message.senderNumber = object.senderNumber ?? "";
        message.description = object.description ?? "";
        message.verifyServiceSid = object.verifyServiceSid ?? "";
        return message;
    },
};
function createBaseAddSMSProviderTwilioResponse() {
    return { details: undefined, id: "" };
}
export const AddSMSProviderTwilioResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSMSProviderTwilioResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddSMSProviderTwilioResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddSMSProviderTwilioResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateSMSProviderTwilioRequest() {
    return { id: "", sid: "", senderNumber: "", description: "", verifyServiceSid: "" };
}
export const UpdateSMSProviderTwilioRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.sid !== "") {
            writer.uint32(18).string(message.sid);
        }
        if (message.senderNumber !== "") {
            writer.uint32(26).string(message.senderNumber);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.verifyServiceSid !== "") {
            writer.uint32(42).string(message.verifyServiceSid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMSProviderTwilioRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.sid = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.senderNumber = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.verifyServiceSid = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
            senderNumber: isSet(object.senderNumber) ? globalThis.String(object.senderNumber) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            verifyServiceSid: isSet(object.verifyServiceSid) ? globalThis.String(object.verifyServiceSid) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.sid !== "") {
            obj.sid = message.sid;
        }
        if (message.senderNumber !== "") {
            obj.senderNumber = message.senderNumber;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.verifyServiceSid !== "") {
            obj.verifyServiceSid = message.verifyServiceSid;
        }
        return obj;
    },
    create(base) {
        return UpdateSMSProviderTwilioRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMSProviderTwilioRequest();
        message.id = object.id ?? "";
        message.sid = object.sid ?? "";
        message.senderNumber = object.senderNumber ?? "";
        message.description = object.description ?? "";
        message.verifyServiceSid = object.verifyServiceSid ?? "";
        return message;
    },
};
function createBaseUpdateSMSProviderTwilioResponse() {
    return { details: undefined };
}
export const UpdateSMSProviderTwilioResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMSProviderTwilioResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateSMSProviderTwilioResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMSProviderTwilioResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateSMSProviderTwilioTokenRequest() {
    return { id: "", token: "" };
}
export const UpdateSMSProviderTwilioTokenRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.token !== "") {
            writer.uint32(18).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMSProviderTwilioTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            token: isSet(object.token) ? globalThis.String(object.token) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.token !== "") {
            obj.token = message.token;
        }
        return obj;
    },
    create(base) {
        return UpdateSMSProviderTwilioTokenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMSProviderTwilioTokenRequest();
        message.id = object.id ?? "";
        message.token = object.token ?? "";
        return message;
    },
};
function createBaseUpdateSMSProviderTwilioTokenResponse() {
    return { details: undefined };
}
export const UpdateSMSProviderTwilioTokenResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMSProviderTwilioTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateSMSProviderTwilioTokenResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMSProviderTwilioTokenResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddSMSProviderHTTPRequest() {
    return { endpoint: "", description: "" };
}
export const AddSMSProviderHTTPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.endpoint !== "") {
            writer.uint32(10).string(message.endpoint);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSMSProviderHTTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.endpoint !== "") {
            obj.endpoint = message.endpoint;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return AddSMSProviderHTTPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddSMSProviderHTTPRequest();
        message.endpoint = object.endpoint ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseAddSMSProviderHTTPResponse() {
    return { details: undefined, id: "" };
}
export const AddSMSProviderHTTPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSMSProviderHTTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddSMSProviderHTTPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddSMSProviderHTTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateSMSProviderHTTPRequest() {
    return { id: "", endpoint: "", description: "" };
}
export const UpdateSMSProviderHTTPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.endpoint !== "") {
            writer.uint32(18).string(message.endpoint);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMSProviderHTTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.endpoint !== "") {
            obj.endpoint = message.endpoint;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return UpdateSMSProviderHTTPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMSProviderHTTPRequest();
        message.id = object.id ?? "";
        message.endpoint = object.endpoint ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
function createBaseUpdateSMSProviderHTTPResponse() {
    return { details: undefined };
}
export const UpdateSMSProviderHTTPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMSProviderHTTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateSMSProviderHTTPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMSProviderHTTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseActivateSMSProviderRequest() {
    return { id: "" };
}
export const ActivateSMSProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateSMSProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return ActivateSMSProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseActivateSMSProviderRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseActivateSMSProviderResponse() {
    return { details: undefined };
}
export const ActivateSMSProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateSMSProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ActivateSMSProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseActivateSMSProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseDeactivateSMSProviderRequest() {
    return { id: "" };
}
export const DeactivateSMSProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateSMSProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return DeactivateSMSProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeactivateSMSProviderRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseDeactivateSMSProviderResponse() {
    return { details: undefined };
}
export const DeactivateSMSProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateSMSProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return DeactivateSMSProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeactivateSMSProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveSMSProviderRequest() {
    return { id: "" };
}
export const RemoveSMSProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveSMSProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return RemoveSMSProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveSMSProviderRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseRemoveSMSProviderResponse() {
    return { details: undefined };
}
export const RemoveSMSProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveSMSProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveSMSProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveSMSProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetFileSystemNotificationProviderRequest() {
    return {};
}
export const GetFileSystemNotificationProviderRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFileSystemNotificationProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetFileSystemNotificationProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetFileSystemNotificationProviderRequest();
        return message;
    },
};
function createBaseGetFileSystemNotificationProviderResponse() {
    return { provider: undefined };
}
export const GetFileSystemNotificationProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.provider !== undefined) {
            DebugNotificationProvider.encode(message.provider, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFileSystemNotificationProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.provider = DebugNotificationProvider.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { provider: isSet(object.provider) ? DebugNotificationProvider.fromJSON(object.provider) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.provider !== undefined) {
            obj.provider = DebugNotificationProvider.toJSON(message.provider);
        }
        return obj;
    },
    create(base) {
        return GetFileSystemNotificationProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetFileSystemNotificationProviderResponse();
        message.provider = (object.provider !== undefined && object.provider !== null)
            ? DebugNotificationProvider.fromPartial(object.provider)
            : undefined;
        return message;
    },
};
function createBaseGetLogNotificationProviderRequest() {
    return {};
}
export const GetLogNotificationProviderRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLogNotificationProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetLogNotificationProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetLogNotificationProviderRequest();
        return message;
    },
};
function createBaseGetLogNotificationProviderResponse() {
    return { provider: undefined };
}
export const GetLogNotificationProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.provider !== undefined) {
            DebugNotificationProvider.encode(message.provider, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLogNotificationProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.provider = DebugNotificationProvider.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { provider: isSet(object.provider) ? DebugNotificationProvider.fromJSON(object.provider) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.provider !== undefined) {
            obj.provider = DebugNotificationProvider.toJSON(message.provider);
        }
        return obj;
    },
    create(base) {
        return GetLogNotificationProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLogNotificationProviderResponse();
        message.provider = (object.provider !== undefined && object.provider !== null)
            ? DebugNotificationProvider.fromPartial(object.provider)
            : undefined;
        return message;
    },
};
function createBaseGetOIDCSettingsRequest() {
    return {};
}
export const GetOIDCSettingsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOIDCSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetOIDCSettingsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetOIDCSettingsRequest();
        return message;
    },
};
function createBaseGetOIDCSettingsResponse() {
    return { settings: undefined };
}
export const GetOIDCSettingsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.settings !== undefined) {
            OIDCSettings.encode(message.settings, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOIDCSettingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.settings = OIDCSettings.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { settings: isSet(object.settings) ? OIDCSettings.fromJSON(object.settings) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.settings !== undefined) {
            obj.settings = OIDCSettings.toJSON(message.settings);
        }
        return obj;
    },
    create(base) {
        return GetOIDCSettingsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOIDCSettingsResponse();
        message.settings = (object.settings !== undefined && object.settings !== null)
            ? OIDCSettings.fromPartial(object.settings)
            : undefined;
        return message;
    },
};
function createBaseAddOIDCSettingsRequest() {
    return {
        accessTokenLifetime: undefined,
        idTokenLifetime: undefined,
        refreshTokenIdleExpiration: undefined,
        refreshTokenExpiration: undefined,
    };
}
export const AddOIDCSettingsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.accessTokenLifetime !== undefined) {
            Duration.encode(message.accessTokenLifetime, writer.uint32(10).fork()).join();
        }
        if (message.idTokenLifetime !== undefined) {
            Duration.encode(message.idTokenLifetime, writer.uint32(18).fork()).join();
        }
        if (message.refreshTokenIdleExpiration !== undefined) {
            Duration.encode(message.refreshTokenIdleExpiration, writer.uint32(26).fork()).join();
        }
        if (message.refreshTokenExpiration !== undefined) {
            Duration.encode(message.refreshTokenExpiration, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddOIDCSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessTokenLifetime = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.idTokenLifetime = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.refreshTokenIdleExpiration = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.refreshTokenExpiration = Duration.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessTokenLifetime: isSet(object.accessTokenLifetime)
                ? Duration.fromJSON(object.accessTokenLifetime)
                : undefined,
            idTokenLifetime: isSet(object.idTokenLifetime) ? Duration.fromJSON(object.idTokenLifetime) : undefined,
            refreshTokenIdleExpiration: isSet(object.refreshTokenIdleExpiration)
                ? Duration.fromJSON(object.refreshTokenIdleExpiration)
                : undefined,
            refreshTokenExpiration: isSet(object.refreshTokenExpiration)
                ? Duration.fromJSON(object.refreshTokenExpiration)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessTokenLifetime !== undefined) {
            obj.accessTokenLifetime = Duration.toJSON(message.accessTokenLifetime);
        }
        if (message.idTokenLifetime !== undefined) {
            obj.idTokenLifetime = Duration.toJSON(message.idTokenLifetime);
        }
        if (message.refreshTokenIdleExpiration !== undefined) {
            obj.refreshTokenIdleExpiration = Duration.toJSON(message.refreshTokenIdleExpiration);
        }
        if (message.refreshTokenExpiration !== undefined) {
            obj.refreshTokenExpiration = Duration.toJSON(message.refreshTokenExpiration);
        }
        return obj;
    },
    create(base) {
        return AddOIDCSettingsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddOIDCSettingsRequest();
        message.accessTokenLifetime = (object.accessTokenLifetime !== undefined && object.accessTokenLifetime !== null)
            ? Duration.fromPartial(object.accessTokenLifetime)
            : undefined;
        message.idTokenLifetime = (object.idTokenLifetime !== undefined && object.idTokenLifetime !== null)
            ? Duration.fromPartial(object.idTokenLifetime)
            : undefined;
        message.refreshTokenIdleExpiration =
            (object.refreshTokenIdleExpiration !== undefined && object.refreshTokenIdleExpiration !== null)
                ? Duration.fromPartial(object.refreshTokenIdleExpiration)
                : undefined;
        message.refreshTokenExpiration =
            (object.refreshTokenExpiration !== undefined && object.refreshTokenExpiration !== null)
                ? Duration.fromPartial(object.refreshTokenExpiration)
                : undefined;
        return message;
    },
};
function createBaseAddOIDCSettingsResponse() {
    return { details: undefined };
}
export const AddOIDCSettingsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddOIDCSettingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddOIDCSettingsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddOIDCSettingsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateOIDCSettingsRequest() {
    return {
        accessTokenLifetime: undefined,
        idTokenLifetime: undefined,
        refreshTokenIdleExpiration: undefined,
        refreshTokenExpiration: undefined,
    };
}
export const UpdateOIDCSettingsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.accessTokenLifetime !== undefined) {
            Duration.encode(message.accessTokenLifetime, writer.uint32(10).fork()).join();
        }
        if (message.idTokenLifetime !== undefined) {
            Duration.encode(message.idTokenLifetime, writer.uint32(18).fork()).join();
        }
        if (message.refreshTokenIdleExpiration !== undefined) {
            Duration.encode(message.refreshTokenIdleExpiration, writer.uint32(26).fork()).join();
        }
        if (message.refreshTokenExpiration !== undefined) {
            Duration.encode(message.refreshTokenExpiration, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOIDCSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessTokenLifetime = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.idTokenLifetime = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.refreshTokenIdleExpiration = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.refreshTokenExpiration = Duration.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessTokenLifetime: isSet(object.accessTokenLifetime)
                ? Duration.fromJSON(object.accessTokenLifetime)
                : undefined,
            idTokenLifetime: isSet(object.idTokenLifetime) ? Duration.fromJSON(object.idTokenLifetime) : undefined,
            refreshTokenIdleExpiration: isSet(object.refreshTokenIdleExpiration)
                ? Duration.fromJSON(object.refreshTokenIdleExpiration)
                : undefined,
            refreshTokenExpiration: isSet(object.refreshTokenExpiration)
                ? Duration.fromJSON(object.refreshTokenExpiration)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessTokenLifetime !== undefined) {
            obj.accessTokenLifetime = Duration.toJSON(message.accessTokenLifetime);
        }
        if (message.idTokenLifetime !== undefined) {
            obj.idTokenLifetime = Duration.toJSON(message.idTokenLifetime);
        }
        if (message.refreshTokenIdleExpiration !== undefined) {
            obj.refreshTokenIdleExpiration = Duration.toJSON(message.refreshTokenIdleExpiration);
        }
        if (message.refreshTokenExpiration !== undefined) {
            obj.refreshTokenExpiration = Duration.toJSON(message.refreshTokenExpiration);
        }
        return obj;
    },
    create(base) {
        return UpdateOIDCSettingsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateOIDCSettingsRequest();
        message.accessTokenLifetime = (object.accessTokenLifetime !== undefined && object.accessTokenLifetime !== null)
            ? Duration.fromPartial(object.accessTokenLifetime)
            : undefined;
        message.idTokenLifetime = (object.idTokenLifetime !== undefined && object.idTokenLifetime !== null)
            ? Duration.fromPartial(object.idTokenLifetime)
            : undefined;
        message.refreshTokenIdleExpiration =
            (object.refreshTokenIdleExpiration !== undefined && object.refreshTokenIdleExpiration !== null)
                ? Duration.fromPartial(object.refreshTokenIdleExpiration)
                : undefined;
        message.refreshTokenExpiration =
            (object.refreshTokenExpiration !== undefined && object.refreshTokenExpiration !== null)
                ? Duration.fromPartial(object.refreshTokenExpiration)
                : undefined;
        return message;
    },
};
function createBaseUpdateOIDCSettingsResponse() {
    return { details: undefined };
}
export const UpdateOIDCSettingsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOIDCSettingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateOIDCSettingsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateOIDCSettingsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetSecurityPolicyRequest() {
    return {};
}
export const GetSecurityPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSecurityPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetSecurityPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetSecurityPolicyRequest();
        return message;
    },
};
function createBaseGetSecurityPolicyResponse() {
    return { policy: undefined };
}
export const GetSecurityPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            SecurityPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSecurityPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = SecurityPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? SecurityPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = SecurityPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetSecurityPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSecurityPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? SecurityPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseSetSecurityPolicyRequest() {
    return { enableIframeEmbedding: false, allowedOrigins: [], enableImpersonation: false };
}
export const SetSecurityPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.enableIframeEmbedding !== false) {
            writer.uint32(8).bool(message.enableIframeEmbedding);
        }
        for (const v of message.allowedOrigins) {
            writer.uint32(18).string(v);
        }
        if (message.enableImpersonation !== false) {
            writer.uint32(24).bool(message.enableImpersonation);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetSecurityPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.enableIframeEmbedding = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.allowedOrigins.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.enableImpersonation = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            enableIframeEmbedding: isSet(object.enableIframeEmbedding)
                ? globalThis.Boolean(object.enableIframeEmbedding)
                : false,
            allowedOrigins: globalThis.Array.isArray(object?.allowedOrigins)
                ? object.allowedOrigins.map((e) => globalThis.String(e))
                : [],
            enableImpersonation: isSet(object.enableImpersonation) ? globalThis.Boolean(object.enableImpersonation) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.enableIframeEmbedding !== false) {
            obj.enableIframeEmbedding = message.enableIframeEmbedding;
        }
        if (message.allowedOrigins?.length) {
            obj.allowedOrigins = message.allowedOrigins;
        }
        if (message.enableImpersonation !== false) {
            obj.enableImpersonation = message.enableImpersonation;
        }
        return obj;
    },
    create(base) {
        return SetSecurityPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetSecurityPolicyRequest();
        message.enableIframeEmbedding = object.enableIframeEmbedding ?? false;
        message.allowedOrigins = object.allowedOrigins?.map((e) => e) || [];
        message.enableImpersonation = object.enableImpersonation ?? false;
        return message;
    },
};
function createBaseSetSecurityPolicyResponse() {
    return { details: undefined };
}
export const SetSecurityPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetSecurityPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetSecurityPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetSecurityPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseIsOrgUniqueRequest() {
    return { name: "", domain: "" };
}
export const IsOrgUniqueRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.domain !== "") {
            writer.uint32(18).string(message.domain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsOrgUniqueRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        return obj;
    },
    create(base) {
        return IsOrgUniqueRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIsOrgUniqueRequest();
        message.name = object.name ?? "";
        message.domain = object.domain ?? "";
        return message;
    },
};
function createBaseIsOrgUniqueResponse() {
    return { isUnique: false };
}
export const IsOrgUniqueResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.isUnique !== false) {
            writer.uint32(8).bool(message.isUnique);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsOrgUniqueResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isUnique = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isUnique: isSet(object.isUnique) ? globalThis.Boolean(object.isUnique) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isUnique !== false) {
            obj.isUnique = message.isUnique;
        }
        return obj;
    },
    create(base) {
        return IsOrgUniqueResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIsOrgUniqueResponse();
        message.isUnique = object.isUnique ?? false;
        return message;
    },
};
function createBaseGetOrgByIDRequest() {
    return { id: "" };
}
export const GetOrgByIDRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrgByIDRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return GetOrgByIDRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrgByIDRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseGetOrgByIDResponse() {
    return { org: undefined };
}
export const GetOrgByIDResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.org !== undefined) {
            Org.encode(message.org, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrgByIDResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.org = Org.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { org: isSet(object.org) ? Org.fromJSON(object.org) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.org !== undefined) {
            obj.org = Org.toJSON(message.org);
        }
        return obj;
    },
    create(base) {
        return GetOrgByIDResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrgByIDResponse();
        message.org = (object.org !== undefined && object.org !== null) ? Org.fromPartial(object.org) : undefined;
        return message;
    },
};
function createBaseListOrgsRequest() {
    return { query: undefined, sortingColumn: 0, queries: [] };
}
export const ListOrgsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.queries) {
            OrgQuery.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOrgsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.queries.push(OrgQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? orgFieldNameFromJSON(object.sortingColumn) : 0,
            queries: globalThis.Array.isArray(object?.queries) ? object.queries.map((e) => OrgQuery.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = orgFieldNameToJSON(message.sortingColumn);
        }
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => OrgQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListOrgsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListOrgsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        message.sortingColumn = object.sortingColumn ?? 0;
        message.queries = object.queries?.map((e) => OrgQuery.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListOrgsResponse() {
    return { details: undefined, sortingColumn: 0, result: [] };
}
export const ListOrgsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.result) {
            Org.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOrgsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.result.push(Org.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? orgFieldNameFromJSON(object.sortingColumn) : 0,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => Org.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = orgFieldNameToJSON(message.sortingColumn);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => Org.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListOrgsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListOrgsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.sortingColumn = object.sortingColumn ?? 0;
        message.result = object.result?.map((e) => Org.fromPartial(e)) || [];
        return message;
    },
};
function createBaseSetUpOrgRequest() {
    return { org: undefined, human: undefined, roles: [] };
}
export const SetUpOrgRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.org !== undefined) {
            SetUpOrgRequest_Org.encode(message.org, writer.uint32(10).fork()).join();
        }
        if (message.human !== undefined) {
            SetUpOrgRequest_Human.encode(message.human, writer.uint32(18).fork()).join();
        }
        for (const v of message.roles) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.org = SetUpOrgRequest_Org.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.human = SetUpOrgRequest_Human.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.roles.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            org: isSet(object.org) ? SetUpOrgRequest_Org.fromJSON(object.org) : undefined,
            human: isSet(object.human) ? SetUpOrgRequest_Human.fromJSON(object.human) : undefined,
            roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.org !== undefined) {
            obj.org = SetUpOrgRequest_Org.toJSON(message.org);
        }
        if (message.human !== undefined) {
            obj.human = SetUpOrgRequest_Human.toJSON(message.human);
        }
        if (message.roles?.length) {
            obj.roles = message.roles;
        }
        return obj;
    },
    create(base) {
        return SetUpOrgRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetUpOrgRequest();
        message.org = (object.org !== undefined && object.org !== null)
            ? SetUpOrgRequest_Org.fromPartial(object.org)
            : undefined;
        message.human = (object.human !== undefined && object.human !== null)
            ? SetUpOrgRequest_Human.fromPartial(object.human)
            : undefined;
        message.roles = object.roles?.map((e) => e) || [];
        return message;
    },
};
function createBaseSetUpOrgRequest_Org() {
    return { name: "", domain: "" };
}
export const SetUpOrgRequest_Org = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.domain !== "") {
            writer.uint32(18).string(message.domain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgRequest_Org();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        return obj;
    },
    create(base) {
        return SetUpOrgRequest_Org.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetUpOrgRequest_Org();
        message.name = object.name ?? "";
        message.domain = object.domain ?? "";
        return message;
    },
};
function createBaseSetUpOrgRequest_Human() {
    return { userName: "", profile: undefined, email: undefined, phone: undefined, password: "" };
}
export const SetUpOrgRequest_Human = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userName !== "") {
            writer.uint32(10).string(message.userName);
        }
        if (message.profile !== undefined) {
            SetUpOrgRequest_Human_Profile.encode(message.profile, writer.uint32(18).fork()).join();
        }
        if (message.email !== undefined) {
            SetUpOrgRequest_Human_Email.encode(message.email, writer.uint32(26).fork()).join();
        }
        if (message.phone !== undefined) {
            SetUpOrgRequest_Human_Phone.encode(message.phone, writer.uint32(34).fork()).join();
        }
        if (message.password !== "") {
            writer.uint32(42).string(message.password);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgRequest_Human();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.profile = SetUpOrgRequest_Human_Profile.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.email = SetUpOrgRequest_Human_Email.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.phone = SetUpOrgRequest_Human_Phone.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
            profile: isSet(object.profile) ? SetUpOrgRequest_Human_Profile.fromJSON(object.profile) : undefined,
            email: isSet(object.email) ? SetUpOrgRequest_Human_Email.fromJSON(object.email) : undefined,
            phone: isSet(object.phone) ? SetUpOrgRequest_Human_Phone.fromJSON(object.phone) : undefined,
            password: isSet(object.password) ? globalThis.String(object.password) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userName !== "") {
            obj.userName = message.userName;
        }
        if (message.profile !== undefined) {
            obj.profile = SetUpOrgRequest_Human_Profile.toJSON(message.profile);
        }
        if (message.email !== undefined) {
            obj.email = SetUpOrgRequest_Human_Email.toJSON(message.email);
        }
        if (message.phone !== undefined) {
            obj.phone = SetUpOrgRequest_Human_Phone.toJSON(message.phone);
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        return obj;
    },
    create(base) {
        return SetUpOrgRequest_Human.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetUpOrgRequest_Human();
        message.userName = object.userName ?? "";
        message.profile = (object.profile !== undefined && object.profile !== null)
            ? SetUpOrgRequest_Human_Profile.fromPartial(object.profile)
            : undefined;
        message.email = (object.email !== undefined && object.email !== null)
            ? SetUpOrgRequest_Human_Email.fromPartial(object.email)
            : undefined;
        message.phone = (object.phone !== undefined && object.phone !== null)
            ? SetUpOrgRequest_Human_Phone.fromPartial(object.phone)
            : undefined;
        message.password = object.password ?? "";
        return message;
    },
};
function createBaseSetUpOrgRequest_Human_Profile() {
    return { firstName: "", lastName: "", nickName: "", displayName: "", preferredLanguage: "", gender: 0 };
}
export const SetUpOrgRequest_Human_Profile = {
    encode(message, writer = new BinaryWriter()) {
        if (message.firstName !== "") {
            writer.uint32(10).string(message.firstName);
        }
        if (message.lastName !== "") {
            writer.uint32(18).string(message.lastName);
        }
        if (message.nickName !== "") {
            writer.uint32(26).string(message.nickName);
        }
        if (message.displayName !== "") {
            writer.uint32(34).string(message.displayName);
        }
        if (message.preferredLanguage !== "") {
            writer.uint32(42).string(message.preferredLanguage);
        }
        if (message.gender !== 0) {
            writer.uint32(48).int32(message.gender);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgRequest_Human_Profile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.firstName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.lastName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nickName = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.preferredLanguage = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.gender = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
            lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
            nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
            displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
            preferredLanguage: isSet(object.preferredLanguage) ? globalThis.String(object.preferredLanguage) : "",
            gender: isSet(object.gender) ? genderFromJSON(object.gender) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.firstName !== "") {
            obj.firstName = message.firstName;
        }
        if (message.lastName !== "") {
            obj.lastName = message.lastName;
        }
        if (message.nickName !== "") {
            obj.nickName = message.nickName;
        }
        if (message.displayName !== "") {
            obj.displayName = message.displayName;
        }
        if (message.preferredLanguage !== "") {
            obj.preferredLanguage = message.preferredLanguage;
        }
        if (message.gender !== 0) {
            obj.gender = genderToJSON(message.gender);
        }
        return obj;
    },
    create(base) {
        return SetUpOrgRequest_Human_Profile.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetUpOrgRequest_Human_Profile();
        message.firstName = object.firstName ?? "";
        message.lastName = object.lastName ?? "";
        message.nickName = object.nickName ?? "";
        message.displayName = object.displayName ?? "";
        message.preferredLanguage = object.preferredLanguage ?? "";
        message.gender = object.gender ?? 0;
        return message;
    },
};
function createBaseSetUpOrgRequest_Human_Email() {
    return { email: "", isEmailVerified: false };
}
export const SetUpOrgRequest_Human_Email = {
    encode(message, writer = new BinaryWriter()) {
        if (message.email !== "") {
            writer.uint32(10).string(message.email);
        }
        if (message.isEmailVerified !== false) {
            writer.uint32(16).bool(message.isEmailVerified);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgRequest_Human_Email();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isEmailVerified = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            isEmailVerified: isSet(object.isEmailVerified) ? globalThis.Boolean(object.isEmailVerified) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.isEmailVerified !== false) {
            obj.isEmailVerified = message.isEmailVerified;
        }
        return obj;
    },
    create(base) {
        return SetUpOrgRequest_Human_Email.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetUpOrgRequest_Human_Email();
        message.email = object.email ?? "";
        message.isEmailVerified = object.isEmailVerified ?? false;
        return message;
    },
};
function createBaseSetUpOrgRequest_Human_Phone() {
    return { phone: "", isPhoneVerified: false };
}
export const SetUpOrgRequest_Human_Phone = {
    encode(message, writer = new BinaryWriter()) {
        if (message.phone !== "") {
            writer.uint32(10).string(message.phone);
        }
        if (message.isPhoneVerified !== false) {
            writer.uint32(16).bool(message.isPhoneVerified);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgRequest_Human_Phone();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.phone = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isPhoneVerified = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
            isPhoneVerified: isSet(object.isPhoneVerified) ? globalThis.Boolean(object.isPhoneVerified) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.phone !== "") {
            obj.phone = message.phone;
        }
        if (message.isPhoneVerified !== false) {
            obj.isPhoneVerified = message.isPhoneVerified;
        }
        return obj;
    },
    create(base) {
        return SetUpOrgRequest_Human_Phone.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetUpOrgRequest_Human_Phone();
        message.phone = object.phone ?? "";
        message.isPhoneVerified = object.isPhoneVerified ?? false;
        return message;
    },
};
function createBaseSetUpOrgResponse() {
    return { details: undefined, orgId: "", userId: "" };
}
export const SetUpOrgResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.orgId !== "") {
            writer.uint32(18).string(message.orgId);
        }
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return SetUpOrgResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetUpOrgResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.orgId = object.orgId ?? "";
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseRemoveOrgRequest() {
    return { orgId: "" };
}
export const RemoveOrgRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveOrgRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return RemoveOrgRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveOrgRequest();
        message.orgId = object.orgId ?? "";
        return message;
    },
};
function createBaseRemoveOrgResponse() {
    return { details: undefined };
}
export const RemoveOrgResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveOrgResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveOrgResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveOrgResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetIDPByIDRequest() {
    return { id: "" };
}
export const GetIDPByIDRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetIDPByIDRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return GetIDPByIDRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetIDPByIDRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseGetIDPByIDResponse() {
    return { idp: undefined };
}
export const GetIDPByIDResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idp !== undefined) {
            IDP.encode(message.idp, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetIDPByIDResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idp = IDP.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idp: isSet(object.idp) ? IDP.fromJSON(object.idp) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.idp !== undefined) {
            obj.idp = IDP.toJSON(message.idp);
        }
        return obj;
    },
    create(base) {
        return GetIDPByIDResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetIDPByIDResponse();
        message.idp = (object.idp !== undefined && object.idp !== null) ? IDP.fromPartial(object.idp) : undefined;
        return message;
    },
};
function createBaseListIDPsRequest() {
    return { query: undefined, sortingColumn: 0, queries: [] };
}
export const ListIDPsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.queries) {
            IDPQuery.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListIDPsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.queries.push(IDPQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? iDPFieldNameFromJSON(object.sortingColumn) : 0,
            queries: globalThis.Array.isArray(object?.queries) ? object.queries.map((e) => IDPQuery.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = iDPFieldNameToJSON(message.sortingColumn);
        }
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => IDPQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListIDPsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListIDPsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        message.sortingColumn = object.sortingColumn ?? 0;
        message.queries = object.queries?.map((e) => IDPQuery.fromPartial(e)) || [];
        return message;
    },
};
function createBaseIDPQuery() {
    return { idpIdQuery: undefined, idpNameQuery: undefined };
}
export const IDPQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idpIdQuery !== undefined) {
            IDPIDQuery.encode(message.idpIdQuery, writer.uint32(10).fork()).join();
        }
        if (message.idpNameQuery !== undefined) {
            IDPNameQuery.encode(message.idpNameQuery, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIDPQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idpIdQuery = IDPIDQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.idpNameQuery = IDPNameQuery.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            idpIdQuery: isSet(object.idpIdQuery) ? IDPIDQuery.fromJSON(object.idpIdQuery) : undefined,
            idpNameQuery: isSet(object.idpNameQuery) ? IDPNameQuery.fromJSON(object.idpNameQuery) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpIdQuery !== undefined) {
            obj.idpIdQuery = IDPIDQuery.toJSON(message.idpIdQuery);
        }
        if (message.idpNameQuery !== undefined) {
            obj.idpNameQuery = IDPNameQuery.toJSON(message.idpNameQuery);
        }
        return obj;
    },
    create(base) {
        return IDPQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIDPQuery();
        message.idpIdQuery = (object.idpIdQuery !== undefined && object.idpIdQuery !== null)
            ? IDPIDQuery.fromPartial(object.idpIdQuery)
            : undefined;
        message.idpNameQuery = (object.idpNameQuery !== undefined && object.idpNameQuery !== null)
            ? IDPNameQuery.fromPartial(object.idpNameQuery)
            : undefined;
        return message;
    },
};
function createBaseListIDPsResponse() {
    return { details: undefined, sortingColumn: 0, result: [] };
}
export const ListIDPsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.result) {
            IDP.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListIDPsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.result.push(IDP.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? iDPFieldNameFromJSON(object.sortingColumn) : 0,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => IDP.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = iDPFieldNameToJSON(message.sortingColumn);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => IDP.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListIDPsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListIDPsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.sortingColumn = object.sortingColumn ?? 0;
        message.result = object.result?.map((e) => IDP.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAddOIDCIDPRequest() {
    return {
        name: "",
        stylingType: 0,
        clientId: "",
        clientSecret: "",
        issuer: "",
        scopes: [],
        displayNameMapping: 0,
        usernameMapping: 0,
        autoRegister: false,
    };
}
export const AddOIDCIDPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.stylingType !== 0) {
            writer.uint32(16).int32(message.stylingType);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        if (message.issuer !== "") {
            writer.uint32(42).string(message.issuer);
        }
        for (const v of message.scopes) {
            writer.uint32(50).string(v);
        }
        if (message.displayNameMapping !== 0) {
            writer.uint32(56).int32(message.displayNameMapping);
        }
        if (message.usernameMapping !== 0) {
            writer.uint32(64).int32(message.usernameMapping);
        }
        if (message.autoRegister !== false) {
            writer.uint32(72).bool(message.autoRegister);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddOIDCIDPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.stylingType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.displayNameMapping = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.usernameMapping = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.autoRegister = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            stylingType: isSet(object.stylingType) ? iDPStylingTypeFromJSON(object.stylingType) : 0,
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            displayNameMapping: isSet(object.displayNameMapping) ? oIDCMappingFieldFromJSON(object.displayNameMapping) : 0,
            usernameMapping: isSet(object.usernameMapping) ? oIDCMappingFieldFromJSON(object.usernameMapping) : 0,
            autoRegister: isSet(object.autoRegister) ? globalThis.Boolean(object.autoRegister) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.stylingType !== 0) {
            obj.stylingType = iDPStylingTypeToJSON(message.stylingType);
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.displayNameMapping !== 0) {
            obj.displayNameMapping = oIDCMappingFieldToJSON(message.displayNameMapping);
        }
        if (message.usernameMapping !== 0) {
            obj.usernameMapping = oIDCMappingFieldToJSON(message.usernameMapping);
        }
        if (message.autoRegister !== false) {
            obj.autoRegister = message.autoRegister;
        }
        return obj;
    },
    create(base) {
        return AddOIDCIDPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddOIDCIDPRequest();
        message.name = object.name ?? "";
        message.stylingType = object.stylingType ?? 0;
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.issuer = object.issuer ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.displayNameMapping = object.displayNameMapping ?? 0;
        message.usernameMapping = object.usernameMapping ?? 0;
        message.autoRegister = object.autoRegister ?? false;
        return message;
    },
};
function createBaseAddOIDCIDPResponse() {
    return { details: undefined, idpId: "" };
}
export const AddOIDCIDPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.idpId !== "") {
            writer.uint32(18).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddOIDCIDPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return AddOIDCIDPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddOIDCIDPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.idpId = object.idpId ?? "";
        return message;
    },
};
function createBaseAddJWTIDPRequest() {
    return {
        name: "",
        stylingType: 0,
        jwtEndpoint: "",
        issuer: "",
        keysEndpoint: "",
        headerName: "",
        autoRegister: false,
    };
}
export const AddJWTIDPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.stylingType !== 0) {
            writer.uint32(16).int32(message.stylingType);
        }
        if (message.jwtEndpoint !== "") {
            writer.uint32(26).string(message.jwtEndpoint);
        }
        if (message.issuer !== "") {
            writer.uint32(34).string(message.issuer);
        }
        if (message.keysEndpoint !== "") {
            writer.uint32(42).string(message.keysEndpoint);
        }
        if (message.headerName !== "") {
            writer.uint32(50).string(message.headerName);
        }
        if (message.autoRegister !== false) {
            writer.uint32(56).bool(message.autoRegister);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddJWTIDPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.stylingType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.jwtEndpoint = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.keysEndpoint = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.headerName = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.autoRegister = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            stylingType: isSet(object.stylingType) ? iDPStylingTypeFromJSON(object.stylingType) : 0,
            jwtEndpoint: isSet(object.jwtEndpoint) ? globalThis.String(object.jwtEndpoint) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            keysEndpoint: isSet(object.keysEndpoint) ? globalThis.String(object.keysEndpoint) : "",
            headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
            autoRegister: isSet(object.autoRegister) ? globalThis.Boolean(object.autoRegister) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.stylingType !== 0) {
            obj.stylingType = iDPStylingTypeToJSON(message.stylingType);
        }
        if (message.jwtEndpoint !== "") {
            obj.jwtEndpoint = message.jwtEndpoint;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.keysEndpoint !== "") {
            obj.keysEndpoint = message.keysEndpoint;
        }
        if (message.headerName !== "") {
            obj.headerName = message.headerName;
        }
        if (message.autoRegister !== false) {
            obj.autoRegister = message.autoRegister;
        }
        return obj;
    },
    create(base) {
        return AddJWTIDPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddJWTIDPRequest();
        message.name = object.name ?? "";
        message.stylingType = object.stylingType ?? 0;
        message.jwtEndpoint = object.jwtEndpoint ?? "";
        message.issuer = object.issuer ?? "";
        message.keysEndpoint = object.keysEndpoint ?? "";
        message.headerName = object.headerName ?? "";
        message.autoRegister = object.autoRegister ?? false;
        return message;
    },
};
function createBaseAddJWTIDPResponse() {
    return { details: undefined, idpId: "" };
}
export const AddJWTIDPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.idpId !== "") {
            writer.uint32(18).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddJWTIDPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return AddJWTIDPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddJWTIDPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.idpId = object.idpId ?? "";
        return message;
    },
};
function createBaseUpdateIDPRequest() {
    return { idpId: "", name: "", stylingType: 0, autoRegister: false };
}
export const UpdateIDPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.stylingType !== 0) {
            writer.uint32(24).int32(message.stylingType);
        }
        if (message.autoRegister !== false) {
            writer.uint32(32).bool(message.autoRegister);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIDPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.stylingType = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.autoRegister = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            stylingType: isSet(object.stylingType) ? iDPStylingTypeFromJSON(object.stylingType) : 0,
            autoRegister: isSet(object.autoRegister) ? globalThis.Boolean(object.autoRegister) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.stylingType !== 0) {
            obj.stylingType = iDPStylingTypeToJSON(message.stylingType);
        }
        if (message.autoRegister !== false) {
            obj.autoRegister = message.autoRegister;
        }
        return obj;
    },
    create(base) {
        return UpdateIDPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateIDPRequest();
        message.idpId = object.idpId ?? "";
        message.name = object.name ?? "";
        message.stylingType = object.stylingType ?? 0;
        message.autoRegister = object.autoRegister ?? false;
        return message;
    },
};
function createBaseUpdateIDPResponse() {
    return { details: undefined };
}
export const UpdateIDPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIDPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateIDPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateIDPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseDeactivateIDPRequest() {
    return { idpId: "" };
}
export const DeactivateIDPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateIDPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return DeactivateIDPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeactivateIDPRequest();
        message.idpId = object.idpId ?? "";
        return message;
    },
};
function createBaseDeactivateIDPResponse() {
    return { details: undefined };
}
export const DeactivateIDPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateIDPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return DeactivateIDPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeactivateIDPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseReactivateIDPRequest() {
    return { idpId: "" };
}
export const ReactivateIDPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReactivateIDPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return ReactivateIDPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseReactivateIDPRequest();
        message.idpId = object.idpId ?? "";
        return message;
    },
};
function createBaseReactivateIDPResponse() {
    return { details: undefined };
}
export const ReactivateIDPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReactivateIDPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ReactivateIDPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseReactivateIDPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveIDPRequest() {
    return { idpId: "" };
}
export const RemoveIDPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveIDPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return RemoveIDPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveIDPRequest();
        message.idpId = object.idpId ?? "";
        return message;
    },
};
function createBaseRemoveIDPResponse() {
    return { details: undefined };
}
export const RemoveIDPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveIDPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveIDPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveIDPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateIDPOIDCConfigRequest() {
    return {
        idpId: "",
        issuer: "",
        clientId: "",
        clientSecret: "",
        scopes: [],
        displayNameMapping: 0,
        usernameMapping: 0,
    };
}
export const UpdateIDPOIDCConfigRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(42).string(v);
        }
        if (message.displayNameMapping !== 0) {
            writer.uint32(48).int32(message.displayNameMapping);
        }
        if (message.usernameMapping !== 0) {
            writer.uint32(56).int32(message.usernameMapping);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIDPOIDCConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.displayNameMapping = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.usernameMapping = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            displayNameMapping: isSet(object.displayNameMapping) ? oIDCMappingFieldFromJSON(object.displayNameMapping) : 0,
            usernameMapping: isSet(object.usernameMapping) ? oIDCMappingFieldFromJSON(object.usernameMapping) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.displayNameMapping !== 0) {
            obj.displayNameMapping = oIDCMappingFieldToJSON(message.displayNameMapping);
        }
        if (message.usernameMapping !== 0) {
            obj.usernameMapping = oIDCMappingFieldToJSON(message.usernameMapping);
        }
        return obj;
    },
    create(base) {
        return UpdateIDPOIDCConfigRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateIDPOIDCConfigRequest();
        message.idpId = object.idpId ?? "";
        message.issuer = object.issuer ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.displayNameMapping = object.displayNameMapping ?? 0;
        message.usernameMapping = object.usernameMapping ?? 0;
        return message;
    },
};
function createBaseUpdateIDPOIDCConfigResponse() {
    return { details: undefined };
}
export const UpdateIDPOIDCConfigResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIDPOIDCConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateIDPOIDCConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateIDPOIDCConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateIDPJWTConfigRequest() {
    return { idpId: "", jwtEndpoint: "", issuer: "", keysEndpoint: "", headerName: "" };
}
export const UpdateIDPJWTConfigRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        if (message.jwtEndpoint !== "") {
            writer.uint32(18).string(message.jwtEndpoint);
        }
        if (message.issuer !== "") {
            writer.uint32(26).string(message.issuer);
        }
        if (message.keysEndpoint !== "") {
            writer.uint32(34).string(message.keysEndpoint);
        }
        if (message.headerName !== "") {
            writer.uint32(42).string(message.headerName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIDPJWTConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.jwtEndpoint = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.keysEndpoint = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.headerName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
            jwtEndpoint: isSet(object.jwtEndpoint) ? globalThis.String(object.jwtEndpoint) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            keysEndpoint: isSet(object.keysEndpoint) ? globalThis.String(object.keysEndpoint) : "",
            headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        if (message.jwtEndpoint !== "") {
            obj.jwtEndpoint = message.jwtEndpoint;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.keysEndpoint !== "") {
            obj.keysEndpoint = message.keysEndpoint;
        }
        if (message.headerName !== "") {
            obj.headerName = message.headerName;
        }
        return obj;
    },
    create(base) {
        return UpdateIDPJWTConfigRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateIDPJWTConfigRequest();
        message.idpId = object.idpId ?? "";
        message.jwtEndpoint = object.jwtEndpoint ?? "";
        message.issuer = object.issuer ?? "";
        message.keysEndpoint = object.keysEndpoint ?? "";
        message.headerName = object.headerName ?? "";
        return message;
    },
};
function createBaseUpdateIDPJWTConfigResponse() {
    return { details: undefined };
}
export const UpdateIDPJWTConfigResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIDPJWTConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateIDPJWTConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateIDPJWTConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListProvidersRequest() {
    return { query: undefined, queries: [] };
}
export const ListProvidersRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        for (const v of message.queries) {
            ProviderQuery.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListProvidersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.queries.push(ProviderQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
            queries: globalThis.Array.isArray(object?.queries)
                ? object.queries.map((e) => ProviderQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => ProviderQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListProvidersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListProvidersRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        message.queries = object.queries?.map((e) => ProviderQuery.fromPartial(e)) || [];
        return message;
    },
};
function createBaseProviderQuery() {
    return { idpIdQuery: undefined, idpNameQuery: undefined };
}
export const ProviderQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idpIdQuery !== undefined) {
            IDPIDQuery.encode(message.idpIdQuery, writer.uint32(10).fork()).join();
        }
        if (message.idpNameQuery !== undefined) {
            IDPNameQuery.encode(message.idpNameQuery, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProviderQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idpIdQuery = IDPIDQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.idpNameQuery = IDPNameQuery.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            idpIdQuery: isSet(object.idpIdQuery) ? IDPIDQuery.fromJSON(object.idpIdQuery) : undefined,
            idpNameQuery: isSet(object.idpNameQuery) ? IDPNameQuery.fromJSON(object.idpNameQuery) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpIdQuery !== undefined) {
            obj.idpIdQuery = IDPIDQuery.toJSON(message.idpIdQuery);
        }
        if (message.idpNameQuery !== undefined) {
            obj.idpNameQuery = IDPNameQuery.toJSON(message.idpNameQuery);
        }
        return obj;
    },
    create(base) {
        return ProviderQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProviderQuery();
        message.idpIdQuery = (object.idpIdQuery !== undefined && object.idpIdQuery !== null)
            ? IDPIDQuery.fromPartial(object.idpIdQuery)
            : undefined;
        message.idpNameQuery = (object.idpNameQuery !== undefined && object.idpNameQuery !== null)
            ? IDPNameQuery.fromPartial(object.idpNameQuery)
            : undefined;
        return message;
    },
};
function createBaseListProvidersResponse() {
    return { details: undefined, result: [] };
}
export const ListProvidersResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            Provider.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListProvidersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(Provider.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => Provider.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => Provider.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListProvidersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListProvidersResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => Provider.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetProviderByIDRequest() {
    return { id: "" };
}
export const GetProviderByIDRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProviderByIDRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return GetProviderByIDRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetProviderByIDRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseGetProviderByIDResponse() {
    return { idp: undefined };
}
export const GetProviderByIDResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idp !== undefined) {
            Provider.encode(message.idp, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProviderByIDResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idp = Provider.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idp: isSet(object.idp) ? Provider.fromJSON(object.idp) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.idp !== undefined) {
            obj.idp = Provider.toJSON(message.idp);
        }
        return obj;
    },
    create(base) {
        return GetProviderByIDResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetProviderByIDResponse();
        message.idp = (object.idp !== undefined && object.idp !== null) ? Provider.fromPartial(object.idp) : undefined;
        return message;
    },
};
function createBaseAddGenericOAuthProviderRequest() {
    return {
        name: "",
        clientId: "",
        clientSecret: "",
        authorizationEndpoint: "",
        tokenEndpoint: "",
        userEndpoint: "",
        scopes: [],
        idAttribute: "",
        providerOptions: undefined,
    };
}
export const AddGenericOAuthProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(18).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(26).string(message.clientSecret);
        }
        if (message.authorizationEndpoint !== "") {
            writer.uint32(34).string(message.authorizationEndpoint);
        }
        if (message.tokenEndpoint !== "") {
            writer.uint32(42).string(message.tokenEndpoint);
        }
        if (message.userEndpoint !== "") {
            writer.uint32(50).string(message.userEndpoint);
        }
        for (const v of message.scopes) {
            writer.uint32(58).string(v);
        }
        if (message.idAttribute !== "") {
            writer.uint32(66).string(message.idAttribute);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGenericOAuthProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.authorizationEndpoint = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.tokenEndpoint = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.userEndpoint = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.idAttribute = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
            tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
            userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            idAttribute: isSet(object.idAttribute) ? globalThis.String(object.idAttribute) : "",
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.authorizationEndpoint !== "") {
            obj.authorizationEndpoint = message.authorizationEndpoint;
        }
        if (message.tokenEndpoint !== "") {
            obj.tokenEndpoint = message.tokenEndpoint;
        }
        if (message.userEndpoint !== "") {
            obj.userEndpoint = message.userEndpoint;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.idAttribute !== "") {
            obj.idAttribute = message.idAttribute;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return AddGenericOAuthProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGenericOAuthProviderRequest();
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.authorizationEndpoint = object.authorizationEndpoint ?? "";
        message.tokenEndpoint = object.tokenEndpoint ?? "";
        message.userEndpoint = object.userEndpoint ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.idAttribute = object.idAttribute ?? "";
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddGenericOAuthProviderResponse() {
    return { details: undefined, id: "" };
}
export const AddGenericOAuthProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGenericOAuthProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddGenericOAuthProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGenericOAuthProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateGenericOAuthProviderRequest() {
    return {
        id: "",
        name: "",
        clientId: "",
        clientSecret: "",
        authorizationEndpoint: "",
        tokenEndpoint: "",
        userEndpoint: "",
        scopes: [],
        idAttribute: "",
        providerOptions: undefined,
    };
}
export const UpdateGenericOAuthProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        if (message.authorizationEndpoint !== "") {
            writer.uint32(42).string(message.authorizationEndpoint);
        }
        if (message.tokenEndpoint !== "") {
            writer.uint32(50).string(message.tokenEndpoint);
        }
        if (message.userEndpoint !== "") {
            writer.uint32(58).string(message.userEndpoint);
        }
        for (const v of message.scopes) {
            writer.uint32(66).string(v);
        }
        if (message.idAttribute !== "") {
            writer.uint32(74).string(message.idAttribute);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(82).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGenericOAuthProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.authorizationEndpoint = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.tokenEndpoint = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.userEndpoint = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.idAttribute = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
            tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
            userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            idAttribute: isSet(object.idAttribute) ? globalThis.String(object.idAttribute) : "",
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.authorizationEndpoint !== "") {
            obj.authorizationEndpoint = message.authorizationEndpoint;
        }
        if (message.tokenEndpoint !== "") {
            obj.tokenEndpoint = message.tokenEndpoint;
        }
        if (message.userEndpoint !== "") {
            obj.userEndpoint = message.userEndpoint;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.idAttribute !== "") {
            obj.idAttribute = message.idAttribute;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return UpdateGenericOAuthProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGenericOAuthProviderRequest();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.authorizationEndpoint = object.authorizationEndpoint ?? "";
        message.tokenEndpoint = object.tokenEndpoint ?? "";
        message.userEndpoint = object.userEndpoint ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.idAttribute = object.idAttribute ?? "";
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateGenericOAuthProviderResponse() {
    return { details: undefined };
}
export const UpdateGenericOAuthProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGenericOAuthProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateGenericOAuthProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGenericOAuthProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddGenericOIDCProviderRequest() {
    return {
        name: "",
        issuer: "",
        clientId: "",
        clientSecret: "",
        scopes: [],
        providerOptions: undefined,
        isIdTokenMapping: false,
    };
}
export const AddGenericOIDCProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(42).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        if (message.isIdTokenMapping !== false) {
            writer.uint32(56).bool(message.isIdTokenMapping);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGenericOIDCProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.isIdTokenMapping = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
            isIdTokenMapping: isSet(object.isIdTokenMapping) ? globalThis.Boolean(object.isIdTokenMapping) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        if (message.isIdTokenMapping !== false) {
            obj.isIdTokenMapping = message.isIdTokenMapping;
        }
        return obj;
    },
    create(base) {
        return AddGenericOIDCProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGenericOIDCProviderRequest();
        message.name = object.name ?? "";
        message.issuer = object.issuer ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        message.isIdTokenMapping = object.isIdTokenMapping ?? false;
        return message;
    },
};
function createBaseAddGenericOIDCProviderResponse() {
    return { details: undefined, id: "" };
}
export const AddGenericOIDCProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGenericOIDCProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddGenericOIDCProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGenericOIDCProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateGenericOIDCProviderRequest() {
    return {
        id: "",
        name: "",
        issuer: "",
        clientId: "",
        clientSecret: "",
        scopes: [],
        providerOptions: undefined,
        isIdTokenMapping: false,
    };
}
export const UpdateGenericOIDCProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.issuer !== "") {
            writer.uint32(26).string(message.issuer);
        }
        if (message.clientId !== "") {
            writer.uint32(34).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(42).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(50).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
        }
        if (message.isIdTokenMapping !== false) {
            writer.uint32(64).bool(message.isIdTokenMapping);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGenericOIDCProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.isIdTokenMapping = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
            isIdTokenMapping: isSet(object.isIdTokenMapping) ? globalThis.Boolean(object.isIdTokenMapping) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        if (message.isIdTokenMapping !== false) {
            obj.isIdTokenMapping = message.isIdTokenMapping;
        }
        return obj;
    },
    create(base) {
        return UpdateGenericOIDCProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGenericOIDCProviderRequest();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.issuer = object.issuer ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        message.isIdTokenMapping = object.isIdTokenMapping ?? false;
        return message;
    },
};
function createBaseUpdateGenericOIDCProviderResponse() {
    return { details: undefined };
}
export const UpdateGenericOIDCProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGenericOIDCProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateGenericOIDCProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGenericOIDCProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseMigrateGenericOIDCProviderRequest() {
    return { id: "", azure: undefined, google: undefined };
}
export const MigrateGenericOIDCProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.azure !== undefined) {
            AddAzureADProviderRequest.encode(message.azure, writer.uint32(18).fork()).join();
        }
        if (message.google !== undefined) {
            AddGoogleProviderRequest.encode(message.google, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMigrateGenericOIDCProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.azure = AddAzureADProviderRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.google = AddGoogleProviderRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            azure: isSet(object.azure) ? AddAzureADProviderRequest.fromJSON(object.azure) : undefined,
            google: isSet(object.google) ? AddGoogleProviderRequest.fromJSON(object.google) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.azure !== undefined) {
            obj.azure = AddAzureADProviderRequest.toJSON(message.azure);
        }
        if (message.google !== undefined) {
            obj.google = AddGoogleProviderRequest.toJSON(message.google);
        }
        return obj;
    },
    create(base) {
        return MigrateGenericOIDCProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMigrateGenericOIDCProviderRequest();
        message.id = object.id ?? "";
        message.azure = (object.azure !== undefined && object.azure !== null)
            ? AddAzureADProviderRequest.fromPartial(object.azure)
            : undefined;
        message.google = (object.google !== undefined && object.google !== null)
            ? AddGoogleProviderRequest.fromPartial(object.google)
            : undefined;
        return message;
    },
};
function createBaseMigrateGenericOIDCProviderResponse() {
    return { details: undefined };
}
export const MigrateGenericOIDCProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMigrateGenericOIDCProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return MigrateGenericOIDCProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMigrateGenericOIDCProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddJWTProviderRequest() {
    return { name: "", issuer: "", jwtEndpoint: "", keysEndpoint: "", headerName: "", providerOptions: undefined };
}
export const AddJWTProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        if (message.jwtEndpoint !== "") {
            writer.uint32(26).string(message.jwtEndpoint);
        }
        if (message.keysEndpoint !== "") {
            writer.uint32(34).string(message.keysEndpoint);
        }
        if (message.headerName !== "") {
            writer.uint32(42).string(message.headerName);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddJWTProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.jwtEndpoint = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.keysEndpoint = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.headerName = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            jwtEndpoint: isSet(object.jwtEndpoint) ? globalThis.String(object.jwtEndpoint) : "",
            keysEndpoint: isSet(object.keysEndpoint) ? globalThis.String(object.keysEndpoint) : "",
            headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.jwtEndpoint !== "") {
            obj.jwtEndpoint = message.jwtEndpoint;
        }
        if (message.keysEndpoint !== "") {
            obj.keysEndpoint = message.keysEndpoint;
        }
        if (message.headerName !== "") {
            obj.headerName = message.headerName;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return AddJWTProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddJWTProviderRequest();
        message.name = object.name ?? "";
        message.issuer = object.issuer ?? "";
        message.jwtEndpoint = object.jwtEndpoint ?? "";
        message.keysEndpoint = object.keysEndpoint ?? "";
        message.headerName = object.headerName ?? "";
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddJWTProviderResponse() {
    return { details: undefined, id: "" };
}
export const AddJWTProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddJWTProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddJWTProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddJWTProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateJWTProviderRequest() {
    return {
        id: "",
        name: "",
        issuer: "",
        jwtEndpoint: "",
        keysEndpoint: "",
        headerName: "",
        providerOptions: undefined,
    };
}
export const UpdateJWTProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.issuer !== "") {
            writer.uint32(26).string(message.issuer);
        }
        if (message.jwtEndpoint !== "") {
            writer.uint32(34).string(message.jwtEndpoint);
        }
        if (message.keysEndpoint !== "") {
            writer.uint32(42).string(message.keysEndpoint);
        }
        if (message.headerName !== "") {
            writer.uint32(50).string(message.headerName);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateJWTProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.jwtEndpoint = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.keysEndpoint = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.headerName = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            jwtEndpoint: isSet(object.jwtEndpoint) ? globalThis.String(object.jwtEndpoint) : "",
            keysEndpoint: isSet(object.keysEndpoint) ? globalThis.String(object.keysEndpoint) : "",
            headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.jwtEndpoint !== "") {
            obj.jwtEndpoint = message.jwtEndpoint;
        }
        if (message.keysEndpoint !== "") {
            obj.keysEndpoint = message.keysEndpoint;
        }
        if (message.headerName !== "") {
            obj.headerName = message.headerName;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return UpdateJWTProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateJWTProviderRequest();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.issuer = object.issuer ?? "";
        message.jwtEndpoint = object.jwtEndpoint ?? "";
        message.keysEndpoint = object.keysEndpoint ?? "";
        message.headerName = object.headerName ?? "";
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateJWTProviderResponse() {
    return { details: undefined };
}
export const UpdateJWTProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateJWTProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateJWTProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateJWTProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddAzureADProviderRequest() {
    return {
        name: "",
        clientId: "",
        clientSecret: "",
        tenant: undefined,
        emailVerified: false,
        scopes: [],
        providerOptions: undefined,
    };
}
export const AddAzureADProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(18).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(26).string(message.clientSecret);
        }
        if (message.tenant !== undefined) {
            AzureADTenant.encode(message.tenant, writer.uint32(34).fork()).join();
        }
        if (message.emailVerified !== false) {
            writer.uint32(40).bool(message.emailVerified);
        }
        for (const v of message.scopes) {
            writer.uint32(50).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddAzureADProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.tenant = AzureADTenant.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.emailVerified = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            tenant: isSet(object.tenant) ? AzureADTenant.fromJSON(object.tenant) : undefined,
            emailVerified: isSet(object.emailVerified) ? globalThis.Boolean(object.emailVerified) : false,
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.tenant !== undefined) {
            obj.tenant = AzureADTenant.toJSON(message.tenant);
        }
        if (message.emailVerified !== false) {
            obj.emailVerified = message.emailVerified;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return AddAzureADProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddAzureADProviderRequest();
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.tenant = (object.tenant !== undefined && object.tenant !== null)
            ? AzureADTenant.fromPartial(object.tenant)
            : undefined;
        message.emailVerified = object.emailVerified ?? false;
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddAzureADProviderResponse() {
    return { details: undefined, id: "" };
}
export const AddAzureADProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddAzureADProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddAzureADProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddAzureADProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateAzureADProviderRequest() {
    return {
        id: "",
        name: "",
        clientId: "",
        clientSecret: "",
        tenant: undefined,
        emailVerified: false,
        scopes: [],
        providerOptions: undefined,
    };
}
export const UpdateAzureADProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        if (message.tenant !== undefined) {
            AzureADTenant.encode(message.tenant, writer.uint32(42).fork()).join();
        }
        if (message.emailVerified !== false) {
            writer.uint32(48).bool(message.emailVerified);
        }
        for (const v of message.scopes) {
            writer.uint32(58).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAzureADProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.tenant = AzureADTenant.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.emailVerified = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            tenant: isSet(object.tenant) ? AzureADTenant.fromJSON(object.tenant) : undefined,
            emailVerified: isSet(object.emailVerified) ? globalThis.Boolean(object.emailVerified) : false,
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.tenant !== undefined) {
            obj.tenant = AzureADTenant.toJSON(message.tenant);
        }
        if (message.emailVerified !== false) {
            obj.emailVerified = message.emailVerified;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return UpdateAzureADProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateAzureADProviderRequest();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.tenant = (object.tenant !== undefined && object.tenant !== null)
            ? AzureADTenant.fromPartial(object.tenant)
            : undefined;
        message.emailVerified = object.emailVerified ?? false;
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateAzureADProviderResponse() {
    return { details: undefined };
}
export const UpdateAzureADProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAzureADProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateAzureADProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateAzureADProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddGitHubProviderRequest() {
    return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
export const AddGitHubProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(18).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(26).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(34).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitHubProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return AddGitHubProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGitHubProviderRequest();
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddGitHubProviderResponse() {
    return { details: undefined, id: "" };
}
export const AddGitHubProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitHubProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddGitHubProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGitHubProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateGitHubProviderRequest() {
    return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
export const UpdateGitHubProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(42).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitHubProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return UpdateGitHubProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGitHubProviderRequest();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateGitHubProviderResponse() {
    return { details: undefined };
}
export const UpdateGitHubProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitHubProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateGitHubProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGitHubProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddGitHubEnterpriseServerProviderRequest() {
    return {
        clientId: "",
        name: "",
        clientSecret: "",
        authorizationEndpoint: "",
        tokenEndpoint: "",
        userEndpoint: "",
        scopes: [],
        providerOptions: undefined,
    };
}
export const AddGitHubEnterpriseServerProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.clientId !== "") {
            writer.uint32(10).string(message.clientId);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientSecret !== "") {
            writer.uint32(26).string(message.clientSecret);
        }
        if (message.authorizationEndpoint !== "") {
            writer.uint32(34).string(message.authorizationEndpoint);
        }
        if (message.tokenEndpoint !== "") {
            writer.uint32(42).string(message.tokenEndpoint);
        }
        if (message.userEndpoint !== "") {
            writer.uint32(50).string(message.userEndpoint);
        }
        for (const v of message.scopes) {
            writer.uint32(58).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitHubEnterpriseServerProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.authorizationEndpoint = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.tokenEndpoint = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.userEndpoint = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
            tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
            userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.authorizationEndpoint !== "") {
            obj.authorizationEndpoint = message.authorizationEndpoint;
        }
        if (message.tokenEndpoint !== "") {
            obj.tokenEndpoint = message.tokenEndpoint;
        }
        if (message.userEndpoint !== "") {
            obj.userEndpoint = message.userEndpoint;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return AddGitHubEnterpriseServerProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGitHubEnterpriseServerProviderRequest();
        message.clientId = object.clientId ?? "";
        message.name = object.name ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.authorizationEndpoint = object.authorizationEndpoint ?? "";
        message.tokenEndpoint = object.tokenEndpoint ?? "";
        message.userEndpoint = object.userEndpoint ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddGitHubEnterpriseServerProviderResponse() {
    return { details: undefined, id: "" };
}
export const AddGitHubEnterpriseServerProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitHubEnterpriseServerProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddGitHubEnterpriseServerProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGitHubEnterpriseServerProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateGitHubEnterpriseServerProviderRequest() {
    return {
        id: "",
        name: "",
        clientId: "",
        clientSecret: "",
        authorizationEndpoint: "",
        tokenEndpoint: "",
        userEndpoint: "",
        scopes: [],
        providerOptions: undefined,
    };
}
export const UpdateGitHubEnterpriseServerProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        if (message.authorizationEndpoint !== "") {
            writer.uint32(42).string(message.authorizationEndpoint);
        }
        if (message.tokenEndpoint !== "") {
            writer.uint32(50).string(message.tokenEndpoint);
        }
        if (message.userEndpoint !== "") {
            writer.uint32(58).string(message.userEndpoint);
        }
        for (const v of message.scopes) {
            writer.uint32(66).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitHubEnterpriseServerProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.authorizationEndpoint = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.tokenEndpoint = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.userEndpoint = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
            tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
            userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.authorizationEndpoint !== "") {
            obj.authorizationEndpoint = message.authorizationEndpoint;
        }
        if (message.tokenEndpoint !== "") {
            obj.tokenEndpoint = message.tokenEndpoint;
        }
        if (message.userEndpoint !== "") {
            obj.userEndpoint = message.userEndpoint;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return UpdateGitHubEnterpriseServerProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGitHubEnterpriseServerProviderRequest();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.authorizationEndpoint = object.authorizationEndpoint ?? "";
        message.tokenEndpoint = object.tokenEndpoint ?? "";
        message.userEndpoint = object.userEndpoint ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateGitHubEnterpriseServerProviderResponse() {
    return { details: undefined };
}
export const UpdateGitHubEnterpriseServerProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitHubEnterpriseServerProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateGitHubEnterpriseServerProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGitHubEnterpriseServerProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddGitLabProviderRequest() {
    return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
export const AddGitLabProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(18).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(26).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(34).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitLabProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return AddGitLabProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGitLabProviderRequest();
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddGitLabProviderResponse() {
    return { details: undefined, id: "" };
}
export const AddGitLabProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitLabProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddGitLabProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGitLabProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateGitLabProviderRequest() {
    return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
export const UpdateGitLabProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(42).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitLabProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return UpdateGitLabProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGitLabProviderRequest();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateGitLabProviderResponse() {
    return { details: undefined };
}
export const UpdateGitLabProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitLabProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateGitLabProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGitLabProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddGitLabSelfHostedProviderRequest() {
    return { issuer: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
export const AddGitLabSelfHostedProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.issuer !== "") {
            writer.uint32(10).string(message.issuer);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(42).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitLabSelfHostedProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return AddGitLabSelfHostedProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGitLabSelfHostedProviderRequest();
        message.issuer = object.issuer ?? "";
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddGitLabSelfHostedProviderResponse() {
    return { details: undefined, id: "" };
}
export const AddGitLabSelfHostedProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitLabSelfHostedProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddGitLabSelfHostedProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGitLabSelfHostedProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateGitLabSelfHostedProviderRequest() {
    return { id: "", issuer: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
export const UpdateGitLabSelfHostedProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(34).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(42).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(50).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitLabSelfHostedProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return UpdateGitLabSelfHostedProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGitLabSelfHostedProviderRequest();
        message.id = object.id ?? "";
        message.issuer = object.issuer ?? "";
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateGitLabSelfHostedProviderResponse() {
    return { details: undefined };
}
export const UpdateGitLabSelfHostedProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitLabSelfHostedProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateGitLabSelfHostedProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGitLabSelfHostedProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddGoogleProviderRequest() {
    return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
export const AddGoogleProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(18).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(26).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(34).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGoogleProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return AddGoogleProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGoogleProviderRequest();
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddGoogleProviderResponse() {
    return { details: undefined, id: "" };
}
export const AddGoogleProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGoogleProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddGoogleProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddGoogleProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateGoogleProviderRequest() {
    return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
export const UpdateGoogleProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(42).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGoogleProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return UpdateGoogleProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGoogleProviderRequest();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.clientSecret = object.clientSecret ?? "";
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateGoogleProviderResponse() {
    return { details: undefined };
}
export const UpdateGoogleProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGoogleProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateGoogleProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGoogleProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddLDAPProviderRequest() {
    return {
        name: "",
        servers: [],
        startTls: false,
        baseDn: "",
        bindDn: "",
        bindPassword: "",
        userBase: "",
        userObjectClasses: [],
        userFilters: [],
        timeout: undefined,
        attributes: undefined,
        providerOptions: undefined,
    };
}
export const AddLDAPProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        for (const v of message.servers) {
            writer.uint32(18).string(v);
        }
        if (message.startTls !== false) {
            writer.uint32(24).bool(message.startTls);
        }
        if (message.baseDn !== "") {
            writer.uint32(34).string(message.baseDn);
        }
        if (message.bindDn !== "") {
            writer.uint32(42).string(message.bindDn);
        }
        if (message.bindPassword !== "") {
            writer.uint32(50).string(message.bindPassword);
        }
        if (message.userBase !== "") {
            writer.uint32(58).string(message.userBase);
        }
        for (const v of message.userObjectClasses) {
            writer.uint32(66).string(v);
        }
        for (const v of message.userFilters) {
            writer.uint32(74).string(v);
        }
        if (message.timeout !== undefined) {
            Duration.encode(message.timeout, writer.uint32(82).fork()).join();
        }
        if (message.attributes !== undefined) {
            LDAPAttributes.encode(message.attributes, writer.uint32(90).fork()).join();
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(98).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddLDAPProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.servers.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.startTls = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.baseDn = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.bindDn = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.bindPassword = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.userBase = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.userObjectClasses.push(reader.string());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.userFilters.push(reader.string());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.timeout = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.attributes = LDAPAttributes.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            servers: globalThis.Array.isArray(object?.servers) ? object.servers.map((e) => globalThis.String(e)) : [],
            startTls: isSet(object.startTls) ? globalThis.Boolean(object.startTls) : false,
            baseDn: isSet(object.baseDn) ? globalThis.String(object.baseDn) : "",
            bindDn: isSet(object.bindDn) ? globalThis.String(object.bindDn) : "",
            bindPassword: isSet(object.bindPassword) ? globalThis.String(object.bindPassword) : "",
            userBase: isSet(object.userBase) ? globalThis.String(object.userBase) : "",
            userObjectClasses: globalThis.Array.isArray(object?.userObjectClasses)
                ? object.userObjectClasses.map((e) => globalThis.String(e))
                : [],
            userFilters: globalThis.Array.isArray(object?.userFilters)
                ? object.userFilters.map((e) => globalThis.String(e))
                : [],
            timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
            attributes: isSet(object.attributes) ? LDAPAttributes.fromJSON(object.attributes) : undefined,
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.servers?.length) {
            obj.servers = message.servers;
        }
        if (message.startTls !== false) {
            obj.startTls = message.startTls;
        }
        if (message.baseDn !== "") {
            obj.baseDn = message.baseDn;
        }
        if (message.bindDn !== "") {
            obj.bindDn = message.bindDn;
        }
        if (message.bindPassword !== "") {
            obj.bindPassword = message.bindPassword;
        }
        if (message.userBase !== "") {
            obj.userBase = message.userBase;
        }
        if (message.userObjectClasses?.length) {
            obj.userObjectClasses = message.userObjectClasses;
        }
        if (message.userFilters?.length) {
            obj.userFilters = message.userFilters;
        }
        if (message.timeout !== undefined) {
            obj.timeout = Duration.toJSON(message.timeout);
        }
        if (message.attributes !== undefined) {
            obj.attributes = LDAPAttributes.toJSON(message.attributes);
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return AddLDAPProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddLDAPProviderRequest();
        message.name = object.name ?? "";
        message.servers = object.servers?.map((e) => e) || [];
        message.startTls = object.startTls ?? false;
        message.baseDn = object.baseDn ?? "";
        message.bindDn = object.bindDn ?? "";
        message.bindPassword = object.bindPassword ?? "";
        message.userBase = object.userBase ?? "";
        message.userObjectClasses = object.userObjectClasses?.map((e) => e) || [];
        message.userFilters = object.userFilters?.map((e) => e) || [];
        message.timeout = (object.timeout !== undefined && object.timeout !== null)
            ? Duration.fromPartial(object.timeout)
            : undefined;
        message.attributes = (object.attributes !== undefined && object.attributes !== null)
            ? LDAPAttributes.fromPartial(object.attributes)
            : undefined;
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddLDAPProviderResponse() {
    return { details: undefined, id: "" };
}
export const AddLDAPProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddLDAPProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddLDAPProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddLDAPProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateLDAPProviderRequest() {
    return {
        id: "",
        name: "",
        servers: [],
        startTls: false,
        baseDn: "",
        bindDn: "",
        bindPassword: "",
        userBase: "",
        userObjectClasses: [],
        userFilters: [],
        timeout: undefined,
        attributes: undefined,
        providerOptions: undefined,
    };
}
export const UpdateLDAPProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        for (const v of message.servers) {
            writer.uint32(26).string(v);
        }
        if (message.startTls !== false) {
            writer.uint32(32).bool(message.startTls);
        }
        if (message.baseDn !== "") {
            writer.uint32(42).string(message.baseDn);
        }
        if (message.bindDn !== "") {
            writer.uint32(50).string(message.bindDn);
        }
        if (message.bindPassword !== "") {
            writer.uint32(58).string(message.bindPassword);
        }
        if (message.userBase !== "") {
            writer.uint32(66).string(message.userBase);
        }
        for (const v of message.userObjectClasses) {
            writer.uint32(74).string(v);
        }
        for (const v of message.userFilters) {
            writer.uint32(82).string(v);
        }
        if (message.timeout !== undefined) {
            Duration.encode(message.timeout, writer.uint32(90).fork()).join();
        }
        if (message.attributes !== undefined) {
            LDAPAttributes.encode(message.attributes, writer.uint32(98).fork()).join();
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(106).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLDAPProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.servers.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.startTls = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.baseDn = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.bindDn = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.bindPassword = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.userBase = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.userObjectClasses.push(reader.string());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.userFilters.push(reader.string());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.timeout = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.attributes = LDAPAttributes.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            servers: globalThis.Array.isArray(object?.servers) ? object.servers.map((e) => globalThis.String(e)) : [],
            startTls: isSet(object.startTls) ? globalThis.Boolean(object.startTls) : false,
            baseDn: isSet(object.baseDn) ? globalThis.String(object.baseDn) : "",
            bindDn: isSet(object.bindDn) ? globalThis.String(object.bindDn) : "",
            bindPassword: isSet(object.bindPassword) ? globalThis.String(object.bindPassword) : "",
            userBase: isSet(object.userBase) ? globalThis.String(object.userBase) : "",
            userObjectClasses: globalThis.Array.isArray(object?.userObjectClasses)
                ? object.userObjectClasses.map((e) => globalThis.String(e))
                : [],
            userFilters: globalThis.Array.isArray(object?.userFilters)
                ? object.userFilters.map((e) => globalThis.String(e))
                : [],
            timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
            attributes: isSet(object.attributes) ? LDAPAttributes.fromJSON(object.attributes) : undefined,
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.servers?.length) {
            obj.servers = message.servers;
        }
        if (message.startTls !== false) {
            obj.startTls = message.startTls;
        }
        if (message.baseDn !== "") {
            obj.baseDn = message.baseDn;
        }
        if (message.bindDn !== "") {
            obj.bindDn = message.bindDn;
        }
        if (message.bindPassword !== "") {
            obj.bindPassword = message.bindPassword;
        }
        if (message.userBase !== "") {
            obj.userBase = message.userBase;
        }
        if (message.userObjectClasses?.length) {
            obj.userObjectClasses = message.userObjectClasses;
        }
        if (message.userFilters?.length) {
            obj.userFilters = message.userFilters;
        }
        if (message.timeout !== undefined) {
            obj.timeout = Duration.toJSON(message.timeout);
        }
        if (message.attributes !== undefined) {
            obj.attributes = LDAPAttributes.toJSON(message.attributes);
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return UpdateLDAPProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateLDAPProviderRequest();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.servers = object.servers?.map((e) => e) || [];
        message.startTls = object.startTls ?? false;
        message.baseDn = object.baseDn ?? "";
        message.bindDn = object.bindDn ?? "";
        message.bindPassword = object.bindPassword ?? "";
        message.userBase = object.userBase ?? "";
        message.userObjectClasses = object.userObjectClasses?.map((e) => e) || [];
        message.userFilters = object.userFilters?.map((e) => e) || [];
        message.timeout = (object.timeout !== undefined && object.timeout !== null)
            ? Duration.fromPartial(object.timeout)
            : undefined;
        message.attributes = (object.attributes !== undefined && object.attributes !== null)
            ? LDAPAttributes.fromPartial(object.attributes)
            : undefined;
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateLDAPProviderResponse() {
    return { details: undefined };
}
export const UpdateLDAPProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLDAPProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateLDAPProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateLDAPProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddAppleProviderRequest() {
    return {
        name: "",
        clientId: "",
        teamId: "",
        keyId: "",
        privateKey: Buffer.alloc(0),
        scopes: [],
        providerOptions: undefined,
    };
}
export const AddAppleProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(18).string(message.clientId);
        }
        if (message.teamId !== "") {
            writer.uint32(26).string(message.teamId);
        }
        if (message.keyId !== "") {
            writer.uint32(34).string(message.keyId);
        }
        if (message.privateKey.length !== 0) {
            writer.uint32(42).bytes(message.privateKey);
        }
        for (const v of message.scopes) {
            writer.uint32(50).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddAppleProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.teamId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.keyId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.privateKey = Buffer.from(reader.bytes());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
            keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
            privateKey: isSet(object.privateKey) ? Buffer.from(bytesFromBase64(object.privateKey)) : Buffer.alloc(0),
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.teamId !== "") {
            obj.teamId = message.teamId;
        }
        if (message.keyId !== "") {
            obj.keyId = message.keyId;
        }
        if (message.privateKey.length !== 0) {
            obj.privateKey = base64FromBytes(message.privateKey);
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return AddAppleProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddAppleProviderRequest();
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.teamId = object.teamId ?? "";
        message.keyId = object.keyId ?? "";
        message.privateKey = object.privateKey ?? Buffer.alloc(0);
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddAppleProviderResponse() {
    return { details: undefined, id: "" };
}
export const AddAppleProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddAppleProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddAppleProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddAppleProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateAppleProviderRequest() {
    return {
        id: "",
        name: "",
        clientId: "",
        teamId: "",
        keyId: "",
        privateKey: Buffer.alloc(0),
        scopes: [],
        providerOptions: undefined,
    };
}
export const UpdateAppleProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.teamId !== "") {
            writer.uint32(34).string(message.teamId);
        }
        if (message.keyId !== "") {
            writer.uint32(42).string(message.keyId);
        }
        if (message.privateKey.length !== 0) {
            writer.uint32(50).bytes(message.privateKey);
        }
        for (const v of message.scopes) {
            writer.uint32(58).string(v);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAppleProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.teamId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.keyId = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.privateKey = Buffer.from(reader.bytes());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
            keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
            privateKey: isSet(object.privateKey) ? Buffer.from(bytesFromBase64(object.privateKey)) : Buffer.alloc(0),
            scopes: globalThis.Array.isArray(object?.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.teamId !== "") {
            obj.teamId = message.teamId;
        }
        if (message.keyId !== "") {
            obj.keyId = message.keyId;
        }
        if (message.privateKey.length !== 0) {
            obj.privateKey = base64FromBytes(message.privateKey);
        }
        if (message.scopes?.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return UpdateAppleProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateAppleProviderRequest();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.clientId = object.clientId ?? "";
        message.teamId = object.teamId ?? "";
        message.keyId = object.keyId ?? "";
        message.privateKey = object.privateKey ?? Buffer.alloc(0);
        message.scopes = object.scopes?.map((e) => e) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateAppleProviderResponse() {
    return { details: undefined };
}
export const UpdateAppleProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAppleProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateAppleProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateAppleProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddSAMLProviderRequest() {
    return {
        name: "",
        metadataXml: undefined,
        metadataUrl: undefined,
        binding: 0,
        withSignedRequest: false,
        providerOptions: undefined,
        nameIdFormat: undefined,
        transientMappingAttributeName: undefined,
    };
}
export const AddSAMLProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.metadataXml !== undefined) {
            writer.uint32(18).bytes(message.metadataXml);
        }
        if (message.metadataUrl !== undefined) {
            writer.uint32(26).string(message.metadataUrl);
        }
        if (message.binding !== 0) {
            writer.uint32(32).int32(message.binding);
        }
        if (message.withSignedRequest !== false) {
            writer.uint32(40).bool(message.withSignedRequest);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        if (message.nameIdFormat !== undefined) {
            writer.uint32(56).int32(message.nameIdFormat);
        }
        if (message.transientMappingAttributeName !== undefined) {
            writer.uint32(66).string(message.transientMappingAttributeName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSAMLProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.metadataXml = Buffer.from(reader.bytes());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.metadataUrl = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.binding = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.withSignedRequest = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.nameIdFormat = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.transientMappingAttributeName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            metadataXml: isSet(object.metadataXml) ? Buffer.from(bytesFromBase64(object.metadataXml)) : undefined,
            metadataUrl: isSet(object.metadataUrl) ? globalThis.String(object.metadataUrl) : undefined,
            binding: isSet(object.binding) ? sAMLBindingFromJSON(object.binding) : 0,
            withSignedRequest: isSet(object.withSignedRequest) ? globalThis.Boolean(object.withSignedRequest) : false,
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
            nameIdFormat: isSet(object.nameIdFormat) ? sAMLNameIDFormatFromJSON(object.nameIdFormat) : undefined,
            transientMappingAttributeName: isSet(object.transientMappingAttributeName)
                ? globalThis.String(object.transientMappingAttributeName)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.metadataXml !== undefined) {
            obj.metadataXml = base64FromBytes(message.metadataXml);
        }
        if (message.metadataUrl !== undefined) {
            obj.metadataUrl = message.metadataUrl;
        }
        if (message.binding !== 0) {
            obj.binding = sAMLBindingToJSON(message.binding);
        }
        if (message.withSignedRequest !== false) {
            obj.withSignedRequest = message.withSignedRequest;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        if (message.nameIdFormat !== undefined) {
            obj.nameIdFormat = sAMLNameIDFormatToJSON(message.nameIdFormat);
        }
        if (message.transientMappingAttributeName !== undefined) {
            obj.transientMappingAttributeName = message.transientMappingAttributeName;
        }
        return obj;
    },
    create(base) {
        return AddSAMLProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddSAMLProviderRequest();
        message.name = object.name ?? "";
        message.metadataXml = object.metadataXml ?? undefined;
        message.metadataUrl = object.metadataUrl ?? undefined;
        message.binding = object.binding ?? 0;
        message.withSignedRequest = object.withSignedRequest ?? false;
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        message.nameIdFormat = object.nameIdFormat ?? undefined;
        message.transientMappingAttributeName = object.transientMappingAttributeName ?? undefined;
        return message;
    },
};
function createBaseAddSAMLProviderResponse() {
    return { details: undefined, id: "" };
}
export const AddSAMLProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSAMLProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AddSAMLProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddSAMLProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseUpdateSAMLProviderRequest() {
    return {
        id: "",
        name: "",
        metadataXml: undefined,
        metadataUrl: undefined,
        binding: 0,
        withSignedRequest: false,
        providerOptions: undefined,
        nameIdFormat: undefined,
        transientMappingAttributeName: undefined,
    };
}
export const UpdateSAMLProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.metadataXml !== undefined) {
            writer.uint32(26).bytes(message.metadataXml);
        }
        if (message.metadataUrl !== undefined) {
            writer.uint32(34).string(message.metadataUrl);
        }
        if (message.binding !== 0) {
            writer.uint32(40).int32(message.binding);
        }
        if (message.withSignedRequest !== false) {
            writer.uint32(48).bool(message.withSignedRequest);
        }
        if (message.providerOptions !== undefined) {
            Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
        }
        if (message.nameIdFormat !== undefined) {
            writer.uint32(64).int32(message.nameIdFormat);
        }
        if (message.transientMappingAttributeName !== undefined) {
            writer.uint32(74).string(message.transientMappingAttributeName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSAMLProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.metadataXml = Buffer.from(reader.bytes());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.metadataUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.binding = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.withSignedRequest = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.providerOptions = Options.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.nameIdFormat = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.transientMappingAttributeName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            metadataXml: isSet(object.metadataXml) ? Buffer.from(bytesFromBase64(object.metadataXml)) : undefined,
            metadataUrl: isSet(object.metadataUrl) ? globalThis.String(object.metadataUrl) : undefined,
            binding: isSet(object.binding) ? sAMLBindingFromJSON(object.binding) : 0,
            withSignedRequest: isSet(object.withSignedRequest) ? globalThis.Boolean(object.withSignedRequest) : false,
            providerOptions: isSet(object.providerOptions) ? Options.fromJSON(object.providerOptions) : undefined,
            nameIdFormat: isSet(object.nameIdFormat) ? sAMLNameIDFormatFromJSON(object.nameIdFormat) : undefined,
            transientMappingAttributeName: isSet(object.transientMappingAttributeName)
                ? globalThis.String(object.transientMappingAttributeName)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.metadataXml !== undefined) {
            obj.metadataXml = base64FromBytes(message.metadataXml);
        }
        if (message.metadataUrl !== undefined) {
            obj.metadataUrl = message.metadataUrl;
        }
        if (message.binding !== 0) {
            obj.binding = sAMLBindingToJSON(message.binding);
        }
        if (message.withSignedRequest !== false) {
            obj.withSignedRequest = message.withSignedRequest;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = Options.toJSON(message.providerOptions);
        }
        if (message.nameIdFormat !== undefined) {
            obj.nameIdFormat = sAMLNameIDFormatToJSON(message.nameIdFormat);
        }
        if (message.transientMappingAttributeName !== undefined) {
            obj.transientMappingAttributeName = message.transientMappingAttributeName;
        }
        return obj;
    },
    create(base) {
        return UpdateSAMLProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSAMLProviderRequest();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.metadataXml = object.metadataXml ?? undefined;
        message.metadataUrl = object.metadataUrl ?? undefined;
        message.binding = object.binding ?? 0;
        message.withSignedRequest = object.withSignedRequest ?? false;
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? Options.fromPartial(object.providerOptions)
            : undefined;
        message.nameIdFormat = object.nameIdFormat ?? undefined;
        message.transientMappingAttributeName = object.transientMappingAttributeName ?? undefined;
        return message;
    },
};
function createBaseUpdateSAMLProviderResponse() {
    return { details: undefined };
}
export const UpdateSAMLProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSAMLProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateSAMLProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSAMLProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRegenerateSAMLProviderCertificateRequest() {
    return { id: "" };
}
export const RegenerateSAMLProviderCertificateRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegenerateSAMLProviderCertificateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return RegenerateSAMLProviderCertificateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRegenerateSAMLProviderCertificateRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseRegenerateSAMLProviderCertificateResponse() {
    return { details: undefined };
}
export const RegenerateSAMLProviderCertificateResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegenerateSAMLProviderCertificateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RegenerateSAMLProviderCertificateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRegenerateSAMLProviderCertificateResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseDeleteProviderRequest() {
    return { id: "" };
}
export const DeleteProviderRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return DeleteProviderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteProviderRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseDeleteProviderResponse() {
    return { details: undefined };
}
export const DeleteProviderResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return DeleteProviderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetOrgIAMPolicyRequest() {
    return {};
}
export const GetOrgIAMPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrgIAMPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetOrgIAMPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetOrgIAMPolicyRequest();
        return message;
    },
};
function createBaseGetOrgIAMPolicyResponse() {
    return { policy: undefined };
}
export const GetOrgIAMPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            OrgIAMPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrgIAMPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = OrgIAMPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? OrgIAMPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = OrgIAMPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetOrgIAMPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrgIAMPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? OrgIAMPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdateOrgIAMPolicyRequest() {
    return { userLoginMustBeDomain: false };
}
export const UpdateOrgIAMPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userLoginMustBeDomain !== false) {
            writer.uint32(8).bool(message.userLoginMustBeDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOrgIAMPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userLoginMustBeDomain = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
                ? globalThis.Boolean(object.userLoginMustBeDomain)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userLoginMustBeDomain !== false) {
            obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
        }
        return obj;
    },
    create(base) {
        return UpdateOrgIAMPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateOrgIAMPolicyRequest();
        message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
        return message;
    },
};
function createBaseUpdateOrgIAMPolicyResponse() {
    return { details: undefined };
}
export const UpdateOrgIAMPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOrgIAMPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateOrgIAMPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateOrgIAMPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetCustomOrgIAMPolicyRequest() {
    return { orgId: "" };
}
export const GetCustomOrgIAMPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomOrgIAMPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return GetCustomOrgIAMPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomOrgIAMPolicyRequest();
        message.orgId = object.orgId ?? "";
        return message;
    },
};
function createBaseGetCustomOrgIAMPolicyResponse() {
    return { policy: undefined, isDefault: false };
}
export const GetCustomOrgIAMPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            OrgIAMPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        if (message.isDefault !== false) {
            writer.uint32(16).bool(message.isDefault);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomOrgIAMPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = OrgIAMPolicy.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isDefault = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            policy: isSet(object.policy) ? OrgIAMPolicy.fromJSON(object.policy) : undefined,
            isDefault: isSet(object.isDefault) ? globalThis.Boolean(object.isDefault) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = OrgIAMPolicy.toJSON(message.policy);
        }
        if (message.isDefault !== false) {
            obj.isDefault = message.isDefault;
        }
        return obj;
    },
    create(base) {
        return GetCustomOrgIAMPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomOrgIAMPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? OrgIAMPolicy.fromPartial(object.policy)
            : undefined;
        message.isDefault = object.isDefault ?? false;
        return message;
    },
};
function createBaseAddCustomOrgIAMPolicyRequest() {
    return { orgId: "", userLoginMustBeDomain: false };
}
export const AddCustomOrgIAMPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        if (message.userLoginMustBeDomain !== false) {
            writer.uint32(16).bool(message.userLoginMustBeDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddCustomOrgIAMPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.userLoginMustBeDomain = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
                ? globalThis.Boolean(object.userLoginMustBeDomain)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.userLoginMustBeDomain !== false) {
            obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
        }
        return obj;
    },
    create(base) {
        return AddCustomOrgIAMPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddCustomOrgIAMPolicyRequest();
        message.orgId = object.orgId ?? "";
        message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
        return message;
    },
};
function createBaseAddCustomOrgIAMPolicyResponse() {
    return { details: undefined };
}
export const AddCustomOrgIAMPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddCustomOrgIAMPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddCustomOrgIAMPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddCustomOrgIAMPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateCustomOrgIAMPolicyRequest() {
    return { orgId: "", userLoginMustBeDomain: false };
}
export const UpdateCustomOrgIAMPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        if (message.userLoginMustBeDomain !== false) {
            writer.uint32(16).bool(message.userLoginMustBeDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCustomOrgIAMPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.userLoginMustBeDomain = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
                ? globalThis.Boolean(object.userLoginMustBeDomain)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.userLoginMustBeDomain !== false) {
            obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
        }
        return obj;
    },
    create(base) {
        return UpdateCustomOrgIAMPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateCustomOrgIAMPolicyRequest();
        message.orgId = object.orgId ?? "";
        message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
        return message;
    },
};
function createBaseUpdateCustomOrgIAMPolicyResponse() {
    return { details: undefined };
}
export const UpdateCustomOrgIAMPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCustomOrgIAMPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateCustomOrgIAMPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateCustomOrgIAMPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomOrgIAMPolicyToDefaultRequest() {
    return { orgId: "" };
}
export const ResetCustomOrgIAMPolicyToDefaultRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomOrgIAMPolicyToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return ResetCustomOrgIAMPolicyToDefaultRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomOrgIAMPolicyToDefaultRequest();
        message.orgId = object.orgId ?? "";
        return message;
    },
};
function createBaseResetCustomOrgIAMPolicyToDefaultResponse() {
    return { details: undefined };
}
export const ResetCustomOrgIAMPolicyToDefaultResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomOrgIAMPolicyToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResetCustomOrgIAMPolicyToDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomOrgIAMPolicyToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDomainPolicyRequest() {
    return {};
}
export const GetDomainPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDomainPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetDomainPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetDomainPolicyRequest();
        return message;
    },
};
function createBaseGetDomainPolicyResponse() {
    return { policy: undefined };
}
export const GetDomainPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            DomainPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDomainPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = DomainPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? DomainPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = DomainPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetDomainPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDomainPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? DomainPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdateDomainPolicyRequest() {
    return { userLoginMustBeDomain: false, validateOrgDomains: false, smtpSenderAddressMatchesInstanceDomain: false };
}
export const UpdateDomainPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userLoginMustBeDomain !== false) {
            writer.uint32(8).bool(message.userLoginMustBeDomain);
        }
        if (message.validateOrgDomains !== false) {
            writer.uint32(16).bool(message.validateOrgDomains);
        }
        if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
            writer.uint32(24).bool(message.smtpSenderAddressMatchesInstanceDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateDomainPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userLoginMustBeDomain = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.validateOrgDomains = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.smtpSenderAddressMatchesInstanceDomain = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
                ? globalThis.Boolean(object.userLoginMustBeDomain)
                : false,
            validateOrgDomains: isSet(object.validateOrgDomains) ? globalThis.Boolean(object.validateOrgDomains) : false,
            smtpSenderAddressMatchesInstanceDomain: isSet(object.smtpSenderAddressMatchesInstanceDomain)
                ? globalThis.Boolean(object.smtpSenderAddressMatchesInstanceDomain)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userLoginMustBeDomain !== false) {
            obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
        }
        if (message.validateOrgDomains !== false) {
            obj.validateOrgDomains = message.validateOrgDomains;
        }
        if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
            obj.smtpSenderAddressMatchesInstanceDomain = message.smtpSenderAddressMatchesInstanceDomain;
        }
        return obj;
    },
    create(base) {
        return UpdateDomainPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateDomainPolicyRequest();
        message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
        message.validateOrgDomains = object.validateOrgDomains ?? false;
        message.smtpSenderAddressMatchesInstanceDomain = object.smtpSenderAddressMatchesInstanceDomain ?? false;
        return message;
    },
};
function createBaseUpdateDomainPolicyResponse() {
    return { details: undefined };
}
export const UpdateDomainPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateDomainPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateDomainPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateDomainPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetCustomDomainPolicyRequest() {
    return { orgId: "" };
}
export const GetCustomDomainPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomDomainPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return GetCustomDomainPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomDomainPolicyRequest();
        message.orgId = object.orgId ?? "";
        return message;
    },
};
function createBaseGetCustomDomainPolicyResponse() {
    return { policy: undefined, isDefault: false };
}
export const GetCustomDomainPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            DomainPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        if (message.isDefault !== false) {
            writer.uint32(16).bool(message.isDefault);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomDomainPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = DomainPolicy.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isDefault = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            policy: isSet(object.policy) ? DomainPolicy.fromJSON(object.policy) : undefined,
            isDefault: isSet(object.isDefault) ? globalThis.Boolean(object.isDefault) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = DomainPolicy.toJSON(message.policy);
        }
        if (message.isDefault !== false) {
            obj.isDefault = message.isDefault;
        }
        return obj;
    },
    create(base) {
        return GetCustomDomainPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomDomainPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? DomainPolicy.fromPartial(object.policy)
            : undefined;
        message.isDefault = object.isDefault ?? false;
        return message;
    },
};
function createBaseAddCustomDomainPolicyRequest() {
    return {
        orgId: "",
        userLoginMustBeDomain: false,
        validateOrgDomains: false,
        smtpSenderAddressMatchesInstanceDomain: false,
    };
}
export const AddCustomDomainPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        if (message.userLoginMustBeDomain !== false) {
            writer.uint32(16).bool(message.userLoginMustBeDomain);
        }
        if (message.validateOrgDomains !== false) {
            writer.uint32(24).bool(message.validateOrgDomains);
        }
        if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
            writer.uint32(32).bool(message.smtpSenderAddressMatchesInstanceDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddCustomDomainPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.userLoginMustBeDomain = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.validateOrgDomains = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.smtpSenderAddressMatchesInstanceDomain = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
                ? globalThis.Boolean(object.userLoginMustBeDomain)
                : false,
            validateOrgDomains: isSet(object.validateOrgDomains) ? globalThis.Boolean(object.validateOrgDomains) : false,
            smtpSenderAddressMatchesInstanceDomain: isSet(object.smtpSenderAddressMatchesInstanceDomain)
                ? globalThis.Boolean(object.smtpSenderAddressMatchesInstanceDomain)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.userLoginMustBeDomain !== false) {
            obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
        }
        if (message.validateOrgDomains !== false) {
            obj.validateOrgDomains = message.validateOrgDomains;
        }
        if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
            obj.smtpSenderAddressMatchesInstanceDomain = message.smtpSenderAddressMatchesInstanceDomain;
        }
        return obj;
    },
    create(base) {
        return AddCustomDomainPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddCustomDomainPolicyRequest();
        message.orgId = object.orgId ?? "";
        message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
        message.validateOrgDomains = object.validateOrgDomains ?? false;
        message.smtpSenderAddressMatchesInstanceDomain = object.smtpSenderAddressMatchesInstanceDomain ?? false;
        return message;
    },
};
function createBaseAddCustomDomainPolicyResponse() {
    return { details: undefined };
}
export const AddCustomDomainPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddCustomDomainPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddCustomDomainPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddCustomDomainPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateCustomDomainPolicyRequest() {
    return {
        orgId: "",
        userLoginMustBeDomain: false,
        validateOrgDomains: false,
        smtpSenderAddressMatchesInstanceDomain: false,
    };
}
export const UpdateCustomDomainPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        if (message.userLoginMustBeDomain !== false) {
            writer.uint32(16).bool(message.userLoginMustBeDomain);
        }
        if (message.validateOrgDomains !== false) {
            writer.uint32(24).bool(message.validateOrgDomains);
        }
        if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
            writer.uint32(32).bool(message.smtpSenderAddressMatchesInstanceDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCustomDomainPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.userLoginMustBeDomain = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.validateOrgDomains = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.smtpSenderAddressMatchesInstanceDomain = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
                ? globalThis.Boolean(object.userLoginMustBeDomain)
                : false,
            validateOrgDomains: isSet(object.validateOrgDomains) ? globalThis.Boolean(object.validateOrgDomains) : false,
            smtpSenderAddressMatchesInstanceDomain: isSet(object.smtpSenderAddressMatchesInstanceDomain)
                ? globalThis.Boolean(object.smtpSenderAddressMatchesInstanceDomain)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.userLoginMustBeDomain !== false) {
            obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
        }
        if (message.validateOrgDomains !== false) {
            obj.validateOrgDomains = message.validateOrgDomains;
        }
        if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
            obj.smtpSenderAddressMatchesInstanceDomain = message.smtpSenderAddressMatchesInstanceDomain;
        }
        return obj;
    },
    create(base) {
        return UpdateCustomDomainPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateCustomDomainPolicyRequest();
        message.orgId = object.orgId ?? "";
        message.userLoginMustBeDomain = object.userLoginMustBeDomain ?? false;
        message.validateOrgDomains = object.validateOrgDomains ?? false;
        message.smtpSenderAddressMatchesInstanceDomain = object.smtpSenderAddressMatchesInstanceDomain ?? false;
        return message;
    },
};
function createBaseUpdateCustomDomainPolicyResponse() {
    return { details: undefined };
}
export const UpdateCustomDomainPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCustomDomainPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateCustomDomainPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateCustomDomainPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomDomainPolicyToDefaultRequest() {
    return { orgId: "" };
}
export const ResetCustomDomainPolicyToDefaultRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomDomainPolicyToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return ResetCustomDomainPolicyToDefaultRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomDomainPolicyToDefaultRequest();
        message.orgId = object.orgId ?? "";
        return message;
    },
};
function createBaseResetCustomDomainPolicyToDefaultResponse() {
    return { details: undefined };
}
export const ResetCustomDomainPolicyToDefaultResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomDomainPolicyToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResetCustomDomainPolicyToDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomDomainPolicyToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetLabelPolicyRequest() {
    return {};
}
export const GetLabelPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLabelPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetLabelPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetLabelPolicyRequest();
        return message;
    },
};
function createBaseGetLabelPolicyResponse() {
    return { policy: undefined };
}
export const GetLabelPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            LabelPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLabelPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = LabelPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? LabelPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = LabelPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetLabelPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLabelPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? LabelPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseGetPreviewLabelPolicyRequest() {
    return {};
}
export const GetPreviewLabelPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviewLabelPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetPreviewLabelPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetPreviewLabelPolicyRequest();
        return message;
    },
};
function createBaseGetPreviewLabelPolicyResponse() {
    return { policy: undefined };
}
export const GetPreviewLabelPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            LabelPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviewLabelPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = LabelPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? LabelPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = LabelPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetPreviewLabelPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPreviewLabelPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? LabelPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdateLabelPolicyRequest() {
    return {
        primaryColor: "",
        hideLoginNameSuffix: false,
        warnColor: "",
        backgroundColor: "",
        fontColor: "",
        primaryColorDark: "",
        backgroundColorDark: "",
        warnColorDark: "",
        fontColorDark: "",
        disableWatermark: false,
        themeMode: 0,
    };
}
export const UpdateLabelPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.primaryColor !== "") {
            writer.uint32(10).string(message.primaryColor);
        }
        if (message.hideLoginNameSuffix !== false) {
            writer.uint32(24).bool(message.hideLoginNameSuffix);
        }
        if (message.warnColor !== "") {
            writer.uint32(34).string(message.warnColor);
        }
        if (message.backgroundColor !== "") {
            writer.uint32(42).string(message.backgroundColor);
        }
        if (message.fontColor !== "") {
            writer.uint32(50).string(message.fontColor);
        }
        if (message.primaryColorDark !== "") {
            writer.uint32(58).string(message.primaryColorDark);
        }
        if (message.backgroundColorDark !== "") {
            writer.uint32(66).string(message.backgroundColorDark);
        }
        if (message.warnColorDark !== "") {
            writer.uint32(74).string(message.warnColorDark);
        }
        if (message.fontColorDark !== "") {
            writer.uint32(82).string(message.fontColorDark);
        }
        if (message.disableWatermark !== false) {
            writer.uint32(88).bool(message.disableWatermark);
        }
        if (message.themeMode !== 0) {
            writer.uint32(96).int32(message.themeMode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLabelPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.primaryColor = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.hideLoginNameSuffix = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.warnColor = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.backgroundColor = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.fontColor = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.primaryColorDark = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.backgroundColorDark = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.warnColorDark = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.fontColorDark = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.disableWatermark = reader.bool();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.themeMode = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            primaryColor: isSet(object.primaryColor) ? globalThis.String(object.primaryColor) : "",
            hideLoginNameSuffix: isSet(object.hideLoginNameSuffix) ? globalThis.Boolean(object.hideLoginNameSuffix) : false,
            warnColor: isSet(object.warnColor) ? globalThis.String(object.warnColor) : "",
            backgroundColor: isSet(object.backgroundColor) ? globalThis.String(object.backgroundColor) : "",
            fontColor: isSet(object.fontColor) ? globalThis.String(object.fontColor) : "",
            primaryColorDark: isSet(object.primaryColorDark) ? globalThis.String(object.primaryColorDark) : "",
            backgroundColorDark: isSet(object.backgroundColorDark) ? globalThis.String(object.backgroundColorDark) : "",
            warnColorDark: isSet(object.warnColorDark) ? globalThis.String(object.warnColorDark) : "",
            fontColorDark: isSet(object.fontColorDark) ? globalThis.String(object.fontColorDark) : "",
            disableWatermark: isSet(object.disableWatermark) ? globalThis.Boolean(object.disableWatermark) : false,
            themeMode: isSet(object.themeMode) ? themeModeFromJSON(object.themeMode) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.primaryColor !== "") {
            obj.primaryColor = message.primaryColor;
        }
        if (message.hideLoginNameSuffix !== false) {
            obj.hideLoginNameSuffix = message.hideLoginNameSuffix;
        }
        if (message.warnColor !== "") {
            obj.warnColor = message.warnColor;
        }
        if (message.backgroundColor !== "") {
            obj.backgroundColor = message.backgroundColor;
        }
        if (message.fontColor !== "") {
            obj.fontColor = message.fontColor;
        }
        if (message.primaryColorDark !== "") {
            obj.primaryColorDark = message.primaryColorDark;
        }
        if (message.backgroundColorDark !== "") {
            obj.backgroundColorDark = message.backgroundColorDark;
        }
        if (message.warnColorDark !== "") {
            obj.warnColorDark = message.warnColorDark;
        }
        if (message.fontColorDark !== "") {
            obj.fontColorDark = message.fontColorDark;
        }
        if (message.disableWatermark !== false) {
            obj.disableWatermark = message.disableWatermark;
        }
        if (message.themeMode !== 0) {
            obj.themeMode = themeModeToJSON(message.themeMode);
        }
        return obj;
    },
    create(base) {
        return UpdateLabelPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateLabelPolicyRequest();
        message.primaryColor = object.primaryColor ?? "";
        message.hideLoginNameSuffix = object.hideLoginNameSuffix ?? false;
        message.warnColor = object.warnColor ?? "";
        message.backgroundColor = object.backgroundColor ?? "";
        message.fontColor = object.fontColor ?? "";
        message.primaryColorDark = object.primaryColorDark ?? "";
        message.backgroundColorDark = object.backgroundColorDark ?? "";
        message.warnColorDark = object.warnColorDark ?? "";
        message.fontColorDark = object.fontColorDark ?? "";
        message.disableWatermark = object.disableWatermark ?? false;
        message.themeMode = object.themeMode ?? 0;
        return message;
    },
};
function createBaseUpdateLabelPolicyResponse() {
    return { details: undefined };
}
export const UpdateLabelPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLabelPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateLabelPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateLabelPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseActivateLabelPolicyRequest() {
    return {};
}
export const ActivateLabelPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateLabelPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ActivateLabelPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseActivateLabelPolicyRequest();
        return message;
    },
};
function createBaseActivateLabelPolicyResponse() {
    return { details: undefined };
}
export const ActivateLabelPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateLabelPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ActivateLabelPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseActivateLabelPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveLabelPolicyLogoRequest() {
    return {};
}
export const RemoveLabelPolicyLogoRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyLogoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RemoveLabelPolicyLogoRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoveLabelPolicyLogoRequest();
        return message;
    },
};
function createBaseRemoveLabelPolicyLogoResponse() {
    return { details: undefined };
}
export const RemoveLabelPolicyLogoResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyLogoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveLabelPolicyLogoResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveLabelPolicyLogoResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveLabelPolicyLogoDarkRequest() {
    return {};
}
export const RemoveLabelPolicyLogoDarkRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyLogoDarkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RemoveLabelPolicyLogoDarkRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoveLabelPolicyLogoDarkRequest();
        return message;
    },
};
function createBaseRemoveLabelPolicyLogoDarkResponse() {
    return { details: undefined };
}
export const RemoveLabelPolicyLogoDarkResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyLogoDarkResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveLabelPolicyLogoDarkResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveLabelPolicyLogoDarkResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveLabelPolicyIconRequest() {
    return {};
}
export const RemoveLabelPolicyIconRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyIconRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RemoveLabelPolicyIconRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoveLabelPolicyIconRequest();
        return message;
    },
};
function createBaseRemoveLabelPolicyIconResponse() {
    return { details: undefined };
}
export const RemoveLabelPolicyIconResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyIconResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveLabelPolicyIconResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveLabelPolicyIconResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveLabelPolicyIconDarkRequest() {
    return {};
}
export const RemoveLabelPolicyIconDarkRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyIconDarkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RemoveLabelPolicyIconDarkRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoveLabelPolicyIconDarkRequest();
        return message;
    },
};
function createBaseRemoveLabelPolicyIconDarkResponse() {
    return { details: undefined };
}
export const RemoveLabelPolicyIconDarkResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyIconDarkResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveLabelPolicyIconDarkResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveLabelPolicyIconDarkResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveLabelPolicyFontRequest() {
    return {};
}
export const RemoveLabelPolicyFontRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyFontRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RemoveLabelPolicyFontRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoveLabelPolicyFontRequest();
        return message;
    },
};
function createBaseRemoveLabelPolicyFontResponse() {
    return { details: undefined };
}
export const RemoveLabelPolicyFontResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyFontResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveLabelPolicyFontResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveLabelPolicyFontResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetLoginPolicyRequest() {
    return {};
}
export const GetLoginPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetLoginPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetLoginPolicyRequest();
        return message;
    },
};
function createBaseGetLoginPolicyResponse() {
    return { policy: undefined };
}
export const GetLoginPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            LoginPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = LoginPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? LoginPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = LoginPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetLoginPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLoginPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? LoginPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdateLoginPolicyRequest() {
    return {
        allowUsernamePassword: false,
        allowRegister: false,
        allowExternalIdp: false,
        forceMfa: false,
        passwordlessType: 0,
        hidePasswordReset: false,
        ignoreUnknownUsernames: false,
        defaultRedirectUri: "",
        passwordCheckLifetime: undefined,
        externalLoginCheckLifetime: undefined,
        mfaInitSkipLifetime: undefined,
        secondFactorCheckLifetime: undefined,
        multiFactorCheckLifetime: undefined,
        allowDomainDiscovery: false,
        disableLoginWithEmail: false,
        disableLoginWithPhone: false,
        forceMfaLocalOnly: false,
    };
}
export const UpdateLoginPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.allowUsernamePassword !== false) {
            writer.uint32(8).bool(message.allowUsernamePassword);
        }
        if (message.allowRegister !== false) {
            writer.uint32(16).bool(message.allowRegister);
        }
        if (message.allowExternalIdp !== false) {
            writer.uint32(24).bool(message.allowExternalIdp);
        }
        if (message.forceMfa !== false) {
            writer.uint32(32).bool(message.forceMfa);
        }
        if (message.passwordlessType !== 0) {
            writer.uint32(40).int32(message.passwordlessType);
        }
        if (message.hidePasswordReset !== false) {
            writer.uint32(48).bool(message.hidePasswordReset);
        }
        if (message.ignoreUnknownUsernames !== false) {
            writer.uint32(56).bool(message.ignoreUnknownUsernames);
        }
        if (message.defaultRedirectUri !== "") {
            writer.uint32(66).string(message.defaultRedirectUri);
        }
        if (message.passwordCheckLifetime !== undefined) {
            Duration.encode(message.passwordCheckLifetime, writer.uint32(74).fork()).join();
        }
        if (message.externalLoginCheckLifetime !== undefined) {
            Duration.encode(message.externalLoginCheckLifetime, writer.uint32(82).fork()).join();
        }
        if (message.mfaInitSkipLifetime !== undefined) {
            Duration.encode(message.mfaInitSkipLifetime, writer.uint32(90).fork()).join();
        }
        if (message.secondFactorCheckLifetime !== undefined) {
            Duration.encode(message.secondFactorCheckLifetime, writer.uint32(98).fork()).join();
        }
        if (message.multiFactorCheckLifetime !== undefined) {
            Duration.encode(message.multiFactorCheckLifetime, writer.uint32(106).fork()).join();
        }
        if (message.allowDomainDiscovery !== false) {
            writer.uint32(112).bool(message.allowDomainDiscovery);
        }
        if (message.disableLoginWithEmail !== false) {
            writer.uint32(120).bool(message.disableLoginWithEmail);
        }
        if (message.disableLoginWithPhone !== false) {
            writer.uint32(128).bool(message.disableLoginWithPhone);
        }
        if (message.forceMfaLocalOnly !== false) {
            writer.uint32(136).bool(message.forceMfaLocalOnly);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.allowUsernamePassword = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.allowRegister = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.allowExternalIdp = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.forceMfa = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.passwordlessType = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.hidePasswordReset = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.ignoreUnknownUsernames = reader.bool();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.defaultRedirectUri = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.passwordCheckLifetime = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.externalLoginCheckLifetime = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.mfaInitSkipLifetime = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.secondFactorCheckLifetime = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.multiFactorCheckLifetime = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.allowDomainDiscovery = reader.bool();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.disableLoginWithEmail = reader.bool();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.disableLoginWithPhone = reader.bool();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.forceMfaLocalOnly = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            allowUsernamePassword: isSet(object.allowUsernamePassword)
                ? globalThis.Boolean(object.allowUsernamePassword)
                : false,
            allowRegister: isSet(object.allowRegister) ? globalThis.Boolean(object.allowRegister) : false,
            allowExternalIdp: isSet(object.allowExternalIdp) ? globalThis.Boolean(object.allowExternalIdp) : false,
            forceMfa: isSet(object.forceMfa) ? globalThis.Boolean(object.forceMfa) : false,
            passwordlessType: isSet(object.passwordlessType) ? passwordlessTypeFromJSON(object.passwordlessType) : 0,
            hidePasswordReset: isSet(object.hidePasswordReset) ? globalThis.Boolean(object.hidePasswordReset) : false,
            ignoreUnknownUsernames: isSet(object.ignoreUnknownUsernames)
                ? globalThis.Boolean(object.ignoreUnknownUsernames)
                : false,
            defaultRedirectUri: isSet(object.defaultRedirectUri) ? globalThis.String(object.defaultRedirectUri) : "",
            passwordCheckLifetime: isSet(object.passwordCheckLifetime)
                ? Duration.fromJSON(object.passwordCheckLifetime)
                : undefined,
            externalLoginCheckLifetime: isSet(object.externalLoginCheckLifetime)
                ? Duration.fromJSON(object.externalLoginCheckLifetime)
                : undefined,
            mfaInitSkipLifetime: isSet(object.mfaInitSkipLifetime)
                ? Duration.fromJSON(object.mfaInitSkipLifetime)
                : undefined,
            secondFactorCheckLifetime: isSet(object.secondFactorCheckLifetime)
                ? Duration.fromJSON(object.secondFactorCheckLifetime)
                : undefined,
            multiFactorCheckLifetime: isSet(object.multiFactorCheckLifetime)
                ? Duration.fromJSON(object.multiFactorCheckLifetime)
                : undefined,
            allowDomainDiscovery: isSet(object.allowDomainDiscovery)
                ? globalThis.Boolean(object.allowDomainDiscovery)
                : false,
            disableLoginWithEmail: isSet(object.disableLoginWithEmail)
                ? globalThis.Boolean(object.disableLoginWithEmail)
                : false,
            disableLoginWithPhone: isSet(object.disableLoginWithPhone)
                ? globalThis.Boolean(object.disableLoginWithPhone)
                : false,
            forceMfaLocalOnly: isSet(object.forceMfaLocalOnly) ? globalThis.Boolean(object.forceMfaLocalOnly) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.allowUsernamePassword !== false) {
            obj.allowUsernamePassword = message.allowUsernamePassword;
        }
        if (message.allowRegister !== false) {
            obj.allowRegister = message.allowRegister;
        }
        if (message.allowExternalIdp !== false) {
            obj.allowExternalIdp = message.allowExternalIdp;
        }
        if (message.forceMfa !== false) {
            obj.forceMfa = message.forceMfa;
        }
        if (message.passwordlessType !== 0) {
            obj.passwordlessType = passwordlessTypeToJSON(message.passwordlessType);
        }
        if (message.hidePasswordReset !== false) {
            obj.hidePasswordReset = message.hidePasswordReset;
        }
        if (message.ignoreUnknownUsernames !== false) {
            obj.ignoreUnknownUsernames = message.ignoreUnknownUsernames;
        }
        if (message.defaultRedirectUri !== "") {
            obj.defaultRedirectUri = message.defaultRedirectUri;
        }
        if (message.passwordCheckLifetime !== undefined) {
            obj.passwordCheckLifetime = Duration.toJSON(message.passwordCheckLifetime);
        }
        if (message.externalLoginCheckLifetime !== undefined) {
            obj.externalLoginCheckLifetime = Duration.toJSON(message.externalLoginCheckLifetime);
        }
        if (message.mfaInitSkipLifetime !== undefined) {
            obj.mfaInitSkipLifetime = Duration.toJSON(message.mfaInitSkipLifetime);
        }
        if (message.secondFactorCheckLifetime !== undefined) {
            obj.secondFactorCheckLifetime = Duration.toJSON(message.secondFactorCheckLifetime);
        }
        if (message.multiFactorCheckLifetime !== undefined) {
            obj.multiFactorCheckLifetime = Duration.toJSON(message.multiFactorCheckLifetime);
        }
        if (message.allowDomainDiscovery !== false) {
            obj.allowDomainDiscovery = message.allowDomainDiscovery;
        }
        if (message.disableLoginWithEmail !== false) {
            obj.disableLoginWithEmail = message.disableLoginWithEmail;
        }
        if (message.disableLoginWithPhone !== false) {
            obj.disableLoginWithPhone = message.disableLoginWithPhone;
        }
        if (message.forceMfaLocalOnly !== false) {
            obj.forceMfaLocalOnly = message.forceMfaLocalOnly;
        }
        return obj;
    },
    create(base) {
        return UpdateLoginPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateLoginPolicyRequest();
        message.allowUsernamePassword = object.allowUsernamePassword ?? false;
        message.allowRegister = object.allowRegister ?? false;
        message.allowExternalIdp = object.allowExternalIdp ?? false;
        message.forceMfa = object.forceMfa ?? false;
        message.passwordlessType = object.passwordlessType ?? 0;
        message.hidePasswordReset = object.hidePasswordReset ?? false;
        message.ignoreUnknownUsernames = object.ignoreUnknownUsernames ?? false;
        message.defaultRedirectUri = object.defaultRedirectUri ?? "";
        message.passwordCheckLifetime =
            (object.passwordCheckLifetime !== undefined && object.passwordCheckLifetime !== null)
                ? Duration.fromPartial(object.passwordCheckLifetime)
                : undefined;
        message.externalLoginCheckLifetime =
            (object.externalLoginCheckLifetime !== undefined && object.externalLoginCheckLifetime !== null)
                ? Duration.fromPartial(object.externalLoginCheckLifetime)
                : undefined;
        message.mfaInitSkipLifetime = (object.mfaInitSkipLifetime !== undefined && object.mfaInitSkipLifetime !== null)
            ? Duration.fromPartial(object.mfaInitSkipLifetime)
            : undefined;
        message.secondFactorCheckLifetime =
            (object.secondFactorCheckLifetime !== undefined && object.secondFactorCheckLifetime !== null)
                ? Duration.fromPartial(object.secondFactorCheckLifetime)
                : undefined;
        message.multiFactorCheckLifetime =
            (object.multiFactorCheckLifetime !== undefined && object.multiFactorCheckLifetime !== null)
                ? Duration.fromPartial(object.multiFactorCheckLifetime)
                : undefined;
        message.allowDomainDiscovery = object.allowDomainDiscovery ?? false;
        message.disableLoginWithEmail = object.disableLoginWithEmail ?? false;
        message.disableLoginWithPhone = object.disableLoginWithPhone ?? false;
        message.forceMfaLocalOnly = object.forceMfaLocalOnly ?? false;
        return message;
    },
};
function createBaseUpdateLoginPolicyResponse() {
    return { details: undefined };
}
export const UpdateLoginPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateLoginPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListLoginPolicyIDPsRequest() {
    return { query: undefined };
}
export const ListLoginPolicyIDPsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListLoginPolicyIDPsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return ListLoginPolicyIDPsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListLoginPolicyIDPsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        return message;
    },
};
function createBaseListLoginPolicyIDPsResponse() {
    return { details: undefined, result: [] };
}
export const ListLoginPolicyIDPsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            IDPLoginPolicyLink.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListLoginPolicyIDPsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(IDPLoginPolicyLink.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result)
                ? object.result.map((e) => IDPLoginPolicyLink.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => IDPLoginPolicyLink.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListLoginPolicyIDPsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListLoginPolicyIDPsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => IDPLoginPolicyLink.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAddIDPToLoginPolicyRequest() {
    return { idpId: "" };
}
export const AddIDPToLoginPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddIDPToLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return AddIDPToLoginPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddIDPToLoginPolicyRequest();
        message.idpId = object.idpId ?? "";
        return message;
    },
};
function createBaseAddIDPToLoginPolicyResponse() {
    return { details: undefined };
}
export const AddIDPToLoginPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddIDPToLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddIDPToLoginPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddIDPToLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveIDPFromLoginPolicyRequest() {
    return { idpId: "" };
}
export const RemoveIDPFromLoginPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveIDPFromLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return RemoveIDPFromLoginPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveIDPFromLoginPolicyRequest();
        message.idpId = object.idpId ?? "";
        return message;
    },
};
function createBaseRemoveIDPFromLoginPolicyResponse() {
    return { details: undefined };
}
export const RemoveIDPFromLoginPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveIDPFromLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveIDPFromLoginPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveIDPFromLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListLoginPolicySecondFactorsRequest() {
    return {};
}
export const ListLoginPolicySecondFactorsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListLoginPolicySecondFactorsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListLoginPolicySecondFactorsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListLoginPolicySecondFactorsRequest();
        return message;
    },
};
function createBaseListLoginPolicySecondFactorsResponse() {
    return { details: undefined, result: [] };
}
export const ListLoginPolicySecondFactorsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        writer.uint32(18).fork();
        for (const v of message.result) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListLoginPolicySecondFactorsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.result.push(reader.int32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.result.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result)
                ? object.result.map((e) => secondFactorTypeFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => secondFactorTypeToJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListLoginPolicySecondFactorsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListLoginPolicySecondFactorsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => e) || [];
        return message;
    },
};
function createBaseAddSecondFactorToLoginPolicyRequest() {
    return { type: 0 };
}
export const AddSecondFactorToLoginPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSecondFactorToLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { type: isSet(object.type) ? secondFactorTypeFromJSON(object.type) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = secondFactorTypeToJSON(message.type);
        }
        return obj;
    },
    create(base) {
        return AddSecondFactorToLoginPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddSecondFactorToLoginPolicyRequest();
        message.type = object.type ?? 0;
        return message;
    },
};
function createBaseAddSecondFactorToLoginPolicyResponse() {
    return { details: undefined };
}
export const AddSecondFactorToLoginPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSecondFactorToLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddSecondFactorToLoginPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddSecondFactorToLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveSecondFactorFromLoginPolicyRequest() {
    return { type: 0 };
}
export const RemoveSecondFactorFromLoginPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveSecondFactorFromLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { type: isSet(object.type) ? secondFactorTypeFromJSON(object.type) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = secondFactorTypeToJSON(message.type);
        }
        return obj;
    },
    create(base) {
        return RemoveSecondFactorFromLoginPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveSecondFactorFromLoginPolicyRequest();
        message.type = object.type ?? 0;
        return message;
    },
};
function createBaseRemoveSecondFactorFromLoginPolicyResponse() {
    return { details: undefined };
}
export const RemoveSecondFactorFromLoginPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveSecondFactorFromLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveSecondFactorFromLoginPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveSecondFactorFromLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListLoginPolicyMultiFactorsRequest() {
    return {};
}
export const ListLoginPolicyMultiFactorsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListLoginPolicyMultiFactorsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListLoginPolicyMultiFactorsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListLoginPolicyMultiFactorsRequest();
        return message;
    },
};
function createBaseListLoginPolicyMultiFactorsResponse() {
    return { details: undefined, result: [] };
}
export const ListLoginPolicyMultiFactorsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        writer.uint32(18).fork();
        for (const v of message.result) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListLoginPolicyMultiFactorsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.result.push(reader.int32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.result.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => multiFactorTypeFromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => multiFactorTypeToJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListLoginPolicyMultiFactorsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListLoginPolicyMultiFactorsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => e) || [];
        return message;
    },
};
function createBaseAddMultiFactorToLoginPolicyRequest() {
    return { type: 0 };
}
export const AddMultiFactorToLoginPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMultiFactorToLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { type: isSet(object.type) ? multiFactorTypeFromJSON(object.type) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = multiFactorTypeToJSON(message.type);
        }
        return obj;
    },
    create(base) {
        return AddMultiFactorToLoginPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddMultiFactorToLoginPolicyRequest();
        message.type = object.type ?? 0;
        return message;
    },
};
function createBaseAddMultiFactorToLoginPolicyResponse() {
    return { details: undefined };
}
export const AddMultiFactorToLoginPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMultiFactorToLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddMultiFactorToLoginPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddMultiFactorToLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveMultiFactorFromLoginPolicyRequest() {
    return { type: 0 };
}
export const RemoveMultiFactorFromLoginPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMultiFactorFromLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { type: isSet(object.type) ? multiFactorTypeFromJSON(object.type) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = multiFactorTypeToJSON(message.type);
        }
        return obj;
    },
    create(base) {
        return RemoveMultiFactorFromLoginPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMultiFactorFromLoginPolicyRequest();
        message.type = object.type ?? 0;
        return message;
    },
};
function createBaseRemoveMultiFactorFromLoginPolicyResponse() {
    return { details: undefined };
}
export const RemoveMultiFactorFromLoginPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMultiFactorFromLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveMultiFactorFromLoginPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMultiFactorFromLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetPasswordComplexityPolicyRequest() {
    return {};
}
export const GetPasswordComplexityPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPasswordComplexityPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetPasswordComplexityPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetPasswordComplexityPolicyRequest();
        return message;
    },
};
function createBaseGetPasswordComplexityPolicyResponse() {
    return { policy: undefined };
}
export const GetPasswordComplexityPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            PasswordComplexityPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPasswordComplexityPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = PasswordComplexityPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? PasswordComplexityPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = PasswordComplexityPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetPasswordComplexityPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPasswordComplexityPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? PasswordComplexityPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdatePasswordComplexityPolicyRequest() {
    return { minLength: 0, hasUppercase: false, hasLowercase: false, hasNumber: false, hasSymbol: false };
}
export const UpdatePasswordComplexityPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.minLength !== 0) {
            writer.uint32(8).uint32(message.minLength);
        }
        if (message.hasUppercase !== false) {
            writer.uint32(16).bool(message.hasUppercase);
        }
        if (message.hasLowercase !== false) {
            writer.uint32(24).bool(message.hasLowercase);
        }
        if (message.hasNumber !== false) {
            writer.uint32(32).bool(message.hasNumber);
        }
        if (message.hasSymbol !== false) {
            writer.uint32(40).bool(message.hasSymbol);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePasswordComplexityPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.minLength = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.hasUppercase = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.hasLowercase = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.hasNumber = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.hasSymbol = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            minLength: isSet(object.minLength) ? globalThis.Number(object.minLength) : 0,
            hasUppercase: isSet(object.hasUppercase) ? globalThis.Boolean(object.hasUppercase) : false,
            hasLowercase: isSet(object.hasLowercase) ? globalThis.Boolean(object.hasLowercase) : false,
            hasNumber: isSet(object.hasNumber) ? globalThis.Boolean(object.hasNumber) : false,
            hasSymbol: isSet(object.hasSymbol) ? globalThis.Boolean(object.hasSymbol) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.minLength !== 0) {
            obj.minLength = Math.round(message.minLength);
        }
        if (message.hasUppercase !== false) {
            obj.hasUppercase = message.hasUppercase;
        }
        if (message.hasLowercase !== false) {
            obj.hasLowercase = message.hasLowercase;
        }
        if (message.hasNumber !== false) {
            obj.hasNumber = message.hasNumber;
        }
        if (message.hasSymbol !== false) {
            obj.hasSymbol = message.hasSymbol;
        }
        return obj;
    },
    create(base) {
        return UpdatePasswordComplexityPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatePasswordComplexityPolicyRequest();
        message.minLength = object.minLength ?? 0;
        message.hasUppercase = object.hasUppercase ?? false;
        message.hasLowercase = object.hasLowercase ?? false;
        message.hasNumber = object.hasNumber ?? false;
        message.hasSymbol = object.hasSymbol ?? false;
        return message;
    },
};
function createBaseUpdatePasswordComplexityPolicyResponse() {
    return { details: undefined };
}
export const UpdatePasswordComplexityPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePasswordComplexityPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdatePasswordComplexityPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatePasswordComplexityPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetPasswordAgePolicyRequest() {
    return {};
}
export const GetPasswordAgePolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPasswordAgePolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetPasswordAgePolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetPasswordAgePolicyRequest();
        return message;
    },
};
function createBaseGetPasswordAgePolicyResponse() {
    return { policy: undefined };
}
export const GetPasswordAgePolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            PasswordAgePolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPasswordAgePolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = PasswordAgePolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? PasswordAgePolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = PasswordAgePolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetPasswordAgePolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPasswordAgePolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? PasswordAgePolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdatePasswordAgePolicyRequest() {
    return { maxAgeDays: 0, expireWarnDays: 0 };
}
export const UpdatePasswordAgePolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.maxAgeDays !== 0) {
            writer.uint32(8).uint32(message.maxAgeDays);
        }
        if (message.expireWarnDays !== 0) {
            writer.uint32(16).uint32(message.expireWarnDays);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePasswordAgePolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.maxAgeDays = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.expireWarnDays = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            maxAgeDays: isSet(object.maxAgeDays) ? globalThis.Number(object.maxAgeDays) : 0,
            expireWarnDays: isSet(object.expireWarnDays) ? globalThis.Number(object.expireWarnDays) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.maxAgeDays !== 0) {
            obj.maxAgeDays = Math.round(message.maxAgeDays);
        }
        if (message.expireWarnDays !== 0) {
            obj.expireWarnDays = Math.round(message.expireWarnDays);
        }
        return obj;
    },
    create(base) {
        return UpdatePasswordAgePolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatePasswordAgePolicyRequest();
        message.maxAgeDays = object.maxAgeDays ?? 0;
        message.expireWarnDays = object.expireWarnDays ?? 0;
        return message;
    },
};
function createBaseUpdatePasswordAgePolicyResponse() {
    return { details: undefined };
}
export const UpdatePasswordAgePolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePasswordAgePolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdatePasswordAgePolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatePasswordAgePolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetLockoutPolicyRequest() {
    return {};
}
export const GetLockoutPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLockoutPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetLockoutPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetLockoutPolicyRequest();
        return message;
    },
};
function createBaseGetLockoutPolicyResponse() {
    return { policy: undefined };
}
export const GetLockoutPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            LockoutPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLockoutPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = LockoutPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? LockoutPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = LockoutPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetLockoutPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLockoutPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? LockoutPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdateLockoutPolicyRequest() {
    return { maxPasswordAttempts: 0, maxOtpAttempts: 0 };
}
export const UpdateLockoutPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.maxPasswordAttempts !== 0) {
            writer.uint32(8).uint32(message.maxPasswordAttempts);
        }
        if (message.maxOtpAttempts !== 0) {
            writer.uint32(16).uint32(message.maxOtpAttempts);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLockoutPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.maxPasswordAttempts = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.maxOtpAttempts = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            maxPasswordAttempts: isSet(object.maxPasswordAttempts) ? globalThis.Number(object.maxPasswordAttempts) : 0,
            maxOtpAttempts: isSet(object.maxOtpAttempts) ? globalThis.Number(object.maxOtpAttempts) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.maxPasswordAttempts !== 0) {
            obj.maxPasswordAttempts = Math.round(message.maxPasswordAttempts);
        }
        if (message.maxOtpAttempts !== 0) {
            obj.maxOtpAttempts = Math.round(message.maxOtpAttempts);
        }
        return obj;
    },
    create(base) {
        return UpdateLockoutPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateLockoutPolicyRequest();
        message.maxPasswordAttempts = object.maxPasswordAttempts ?? 0;
        message.maxOtpAttempts = object.maxOtpAttempts ?? 0;
        return message;
    },
};
function createBaseUpdateLockoutPolicyResponse() {
    return { details: undefined };
}
export const UpdateLockoutPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLockoutPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateLockoutPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateLockoutPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetPrivacyPolicyRequest() {
    return {};
}
export const GetPrivacyPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPrivacyPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetPrivacyPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetPrivacyPolicyRequest();
        return message;
    },
};
function createBaseGetPrivacyPolicyResponse() {
    return { policy: undefined };
}
export const GetPrivacyPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            PrivacyPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPrivacyPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = PrivacyPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? PrivacyPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = PrivacyPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetPrivacyPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPrivacyPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? PrivacyPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdatePrivacyPolicyRequest() {
    return {
        tosLink: "",
        privacyLink: "",
        helpLink: "",
        supportEmail: "",
        docsLink: "",
        customLink: "",
        customLinkText: "",
    };
}
export const UpdatePrivacyPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.tosLink !== "") {
            writer.uint32(10).string(message.tosLink);
        }
        if (message.privacyLink !== "") {
            writer.uint32(18).string(message.privacyLink);
        }
        if (message.helpLink !== "") {
            writer.uint32(26).string(message.helpLink);
        }
        if (message.supportEmail !== "") {
            writer.uint32(34).string(message.supportEmail);
        }
        if (message.docsLink !== "") {
            writer.uint32(42).string(message.docsLink);
        }
        if (message.customLink !== "") {
            writer.uint32(50).string(message.customLink);
        }
        if (message.customLinkText !== "") {
            writer.uint32(58).string(message.customLinkText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePrivacyPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tosLink = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.privacyLink = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.helpLink = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.supportEmail = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.docsLink = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.customLink = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.customLinkText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tosLink: isSet(object.tosLink) ? globalThis.String(object.tosLink) : "",
            privacyLink: isSet(object.privacyLink) ? globalThis.String(object.privacyLink) : "",
            helpLink: isSet(object.helpLink) ? globalThis.String(object.helpLink) : "",
            supportEmail: isSet(object.supportEmail) ? globalThis.String(object.supportEmail) : "",
            docsLink: isSet(object.docsLink) ? globalThis.String(object.docsLink) : "",
            customLink: isSet(object.customLink) ? globalThis.String(object.customLink) : "",
            customLinkText: isSet(object.customLinkText) ? globalThis.String(object.customLinkText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tosLink !== "") {
            obj.tosLink = message.tosLink;
        }
        if (message.privacyLink !== "") {
            obj.privacyLink = message.privacyLink;
        }
        if (message.helpLink !== "") {
            obj.helpLink = message.helpLink;
        }
        if (message.supportEmail !== "") {
            obj.supportEmail = message.supportEmail;
        }
        if (message.docsLink !== "") {
            obj.docsLink = message.docsLink;
        }
        if (message.customLink !== "") {
            obj.customLink = message.customLink;
        }
        if (message.customLinkText !== "") {
            obj.customLinkText = message.customLinkText;
        }
        return obj;
    },
    create(base) {
        return UpdatePrivacyPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatePrivacyPolicyRequest();
        message.tosLink = object.tosLink ?? "";
        message.privacyLink = object.privacyLink ?? "";
        message.helpLink = object.helpLink ?? "";
        message.supportEmail = object.supportEmail ?? "";
        message.docsLink = object.docsLink ?? "";
        message.customLink = object.customLink ?? "";
        message.customLinkText = object.customLinkText ?? "";
        return message;
    },
};
function createBaseUpdatePrivacyPolicyResponse() {
    return { details: undefined };
}
export const UpdatePrivacyPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePrivacyPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdatePrivacyPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdatePrivacyPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddNotificationPolicyRequest() {
    return { passwordChange: false };
}
export const AddNotificationPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.passwordChange !== false) {
            writer.uint32(8).bool(message.passwordChange);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddNotificationPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.passwordChange = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { passwordChange: isSet(object.passwordChange) ? globalThis.Boolean(object.passwordChange) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.passwordChange !== false) {
            obj.passwordChange = message.passwordChange;
        }
        return obj;
    },
    create(base) {
        return AddNotificationPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddNotificationPolicyRequest();
        message.passwordChange = object.passwordChange ?? false;
        return message;
    },
};
function createBaseAddNotificationPolicyResponse() {
    return { details: undefined };
}
export const AddNotificationPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddNotificationPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddNotificationPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddNotificationPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetNotificationPolicyRequest() {
    return {};
}
export const GetNotificationPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNotificationPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetNotificationPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetNotificationPolicyRequest();
        return message;
    },
};
function createBaseGetNotificationPolicyResponse() {
    return { policy: undefined };
}
export const GetNotificationPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            NotificationPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNotificationPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = NotificationPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? NotificationPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = NotificationPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetNotificationPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetNotificationPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? NotificationPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdateNotificationPolicyRequest() {
    return { passwordChange: false };
}
export const UpdateNotificationPolicyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.passwordChange !== false) {
            writer.uint32(8).bool(message.passwordChange);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateNotificationPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.passwordChange = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { passwordChange: isSet(object.passwordChange) ? globalThis.Boolean(object.passwordChange) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.passwordChange !== false) {
            obj.passwordChange = message.passwordChange;
        }
        return obj;
    },
    create(base) {
        return UpdateNotificationPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateNotificationPolicyRequest();
        message.passwordChange = object.passwordChange ?? false;
        return message;
    },
};
function createBaseUpdateNotificationPolicyResponse() {
    return { details: undefined };
}
export const UpdateNotificationPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateNotificationPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateNotificationPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateNotificationPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultInitMessageTextRequest() {
    return { language: "" };
}
export const GetDefaultInitMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultInitMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetDefaultInitMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultInitMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetDefaultInitMessageTextResponse() {
    return { customText: undefined };
}
export const GetDefaultInitMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultInitMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetDefaultInitMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultInitMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomInitMessageTextRequest() {
    return { language: "" };
}
export const GetCustomInitMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomInitMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetCustomInitMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomInitMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetCustomInitMessageTextResponse() {
    return { customText: undefined };
}
export const GetCustomInitMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomInitMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetCustomInitMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomInitMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultInitMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
export const SetDefaultInitMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultInitMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return SetDefaultInitMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultInitMessageTextRequest();
        message.language = object.language ?? "";
        message.title = object.title ?? "";
        message.preHeader = object.preHeader ?? "";
        message.subject = object.subject ?? "";
        message.greeting = object.greeting ?? "";
        message.text = object.text ?? "";
        message.buttonText = object.buttonText ?? "";
        message.footerText = object.footerText ?? "";
        return message;
    },
};
function createBaseSetDefaultInitMessageTextResponse() {
    return { details: undefined };
}
export const SetDefaultInitMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultInitMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetDefaultInitMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultInitMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomInitMessageTextToDefaultRequest() {
    return { language: "" };
}
export const ResetCustomInitMessageTextToDefaultRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomInitMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return ResetCustomInitMessageTextToDefaultRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomInitMessageTextToDefaultRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseResetCustomInitMessageTextToDefaultResponse() {
    return { details: undefined };
}
export const ResetCustomInitMessageTextToDefaultResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomInitMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResetCustomInitMessageTextToDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomInitMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultPasswordResetMessageTextRequest() {
    return { language: "" };
}
export const GetDefaultPasswordResetMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultPasswordResetMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetDefaultPasswordResetMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultPasswordResetMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetDefaultPasswordResetMessageTextResponse() {
    return { customText: undefined };
}
export const GetDefaultPasswordResetMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultPasswordResetMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetDefaultPasswordResetMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultPasswordResetMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomPasswordResetMessageTextRequest() {
    return { language: "" };
}
export const GetCustomPasswordResetMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomPasswordResetMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetCustomPasswordResetMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomPasswordResetMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetCustomPasswordResetMessageTextResponse() {
    return { customText: undefined };
}
export const GetCustomPasswordResetMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomPasswordResetMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetCustomPasswordResetMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomPasswordResetMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultPasswordResetMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
export const SetDefaultPasswordResetMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultPasswordResetMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return SetDefaultPasswordResetMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultPasswordResetMessageTextRequest();
        message.language = object.language ?? "";
        message.title = object.title ?? "";
        message.preHeader = object.preHeader ?? "";
        message.subject = object.subject ?? "";
        message.greeting = object.greeting ?? "";
        message.text = object.text ?? "";
        message.buttonText = object.buttonText ?? "";
        message.footerText = object.footerText ?? "";
        return message;
    },
};
function createBaseSetDefaultPasswordResetMessageTextResponse() {
    return { details: undefined };
}
export const SetDefaultPasswordResetMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultPasswordResetMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetDefaultPasswordResetMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultPasswordResetMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomPasswordResetMessageTextToDefaultRequest() {
    return { language: "" };
}
export const ResetCustomPasswordResetMessageTextToDefaultRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomPasswordResetMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return ResetCustomPasswordResetMessageTextToDefaultRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomPasswordResetMessageTextToDefaultRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseResetCustomPasswordResetMessageTextToDefaultResponse() {
    return { details: undefined };
}
export const ResetCustomPasswordResetMessageTextToDefaultResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomPasswordResetMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResetCustomPasswordResetMessageTextToDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomPasswordResetMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultVerifyEmailMessageTextRequest() {
    return { language: "" };
}
export const GetDefaultVerifyEmailMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifyEmailMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetDefaultVerifyEmailMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultVerifyEmailMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetDefaultVerifyEmailMessageTextResponse() {
    return { customText: undefined };
}
export const GetDefaultVerifyEmailMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifyEmailMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetDefaultVerifyEmailMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultVerifyEmailMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomVerifyEmailMessageTextRequest() {
    return { language: "" };
}
export const GetCustomVerifyEmailMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifyEmailMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetCustomVerifyEmailMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomVerifyEmailMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetCustomVerifyEmailMessageTextResponse() {
    return { customText: undefined };
}
export const GetCustomVerifyEmailMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifyEmailMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetCustomVerifyEmailMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomVerifyEmailMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultVerifyEmailMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
export const SetDefaultVerifyEmailMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifyEmailMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return SetDefaultVerifyEmailMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultVerifyEmailMessageTextRequest();
        message.language = object.language ?? "";
        message.title = object.title ?? "";
        message.preHeader = object.preHeader ?? "";
        message.subject = object.subject ?? "";
        message.greeting = object.greeting ?? "";
        message.text = object.text ?? "";
        message.buttonText = object.buttonText ?? "";
        message.footerText = object.footerText ?? "";
        return message;
    },
};
function createBaseSetDefaultVerifyEmailMessageTextResponse() {
    return { details: undefined };
}
export const SetDefaultVerifyEmailMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifyEmailMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetDefaultVerifyEmailMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultVerifyEmailMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomVerifyEmailMessageTextToDefaultRequest() {
    return { language: "" };
}
export const ResetCustomVerifyEmailMessageTextToDefaultRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifyEmailMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return ResetCustomVerifyEmailMessageTextToDefaultRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomVerifyEmailMessageTextToDefaultRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseResetCustomVerifyEmailMessageTextToDefaultResponse() {
    return { details: undefined };
}
export const ResetCustomVerifyEmailMessageTextToDefaultResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifyEmailMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResetCustomVerifyEmailMessageTextToDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomVerifyEmailMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultVerifyPhoneMessageTextRequest() {
    return { language: "" };
}
export const GetDefaultVerifyPhoneMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifyPhoneMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetDefaultVerifyPhoneMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultVerifyPhoneMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetDefaultVerifyPhoneMessageTextResponse() {
    return { customText: undefined };
}
export const GetDefaultVerifyPhoneMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifyPhoneMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetDefaultVerifyPhoneMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultVerifyPhoneMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomVerifyPhoneMessageTextRequest() {
    return { language: "" };
}
export const GetCustomVerifyPhoneMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifyPhoneMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetCustomVerifyPhoneMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomVerifyPhoneMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetCustomVerifyPhoneMessageTextResponse() {
    return { customText: undefined };
}
export const GetCustomVerifyPhoneMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifyPhoneMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetCustomVerifyPhoneMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomVerifyPhoneMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultVerifyPhoneMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
export const SetDefaultVerifyPhoneMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifyPhoneMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return SetDefaultVerifyPhoneMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultVerifyPhoneMessageTextRequest();
        message.language = object.language ?? "";
        message.title = object.title ?? "";
        message.preHeader = object.preHeader ?? "";
        message.subject = object.subject ?? "";
        message.greeting = object.greeting ?? "";
        message.text = object.text ?? "";
        message.buttonText = object.buttonText ?? "";
        message.footerText = object.footerText ?? "";
        return message;
    },
};
function createBaseSetDefaultVerifyPhoneMessageTextResponse() {
    return { details: undefined };
}
export const SetDefaultVerifyPhoneMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifyPhoneMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetDefaultVerifyPhoneMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultVerifyPhoneMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest() {
    return { language: "" };
}
export const ResetCustomVerifyPhoneMessageTextToDefaultRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return ResetCustomVerifyPhoneMessageTextToDefaultRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse() {
    return { details: undefined };
}
export const ResetCustomVerifyPhoneMessageTextToDefaultResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResetCustomVerifyPhoneMessageTextToDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetCustomVerifySMSOTPMessageTextRequest() {
    return { language: "" };
}
export const GetCustomVerifySMSOTPMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifySMSOTPMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetCustomVerifySMSOTPMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomVerifySMSOTPMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetCustomVerifySMSOTPMessageTextResponse() {
    return { customText: undefined };
}
export const GetCustomVerifySMSOTPMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifySMSOTPMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetCustomVerifySMSOTPMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomVerifySMSOTPMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultVerifySMSOTPMessageTextRequest() {
    return { language: "" };
}
export const GetDefaultVerifySMSOTPMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifySMSOTPMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetDefaultVerifySMSOTPMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultVerifySMSOTPMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetDefaultVerifySMSOTPMessageTextResponse() {
    return { customText: undefined };
}
export const GetDefaultVerifySMSOTPMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifySMSOTPMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetDefaultVerifySMSOTPMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultVerifySMSOTPMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultVerifySMSOTPMessageTextRequest() {
    return { language: "", text: "" };
}
export const SetDefaultVerifySMSOTPMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.text !== "") {
            writer.uint32(18).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifySMSOTPMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return SetDefaultVerifySMSOTPMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultVerifySMSOTPMessageTextRequest();
        message.language = object.language ?? "";
        message.text = object.text ?? "";
        return message;
    },
};
function createBaseSetDefaultVerifySMSOTPMessageTextResponse() {
    return { details: undefined };
}
export const SetDefaultVerifySMSOTPMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifySMSOTPMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetDefaultVerifySMSOTPMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultVerifySMSOTPMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomVerifySMSOTPMessageTextToDefaultRequest() {
    return { language: "" };
}
export const ResetCustomVerifySMSOTPMessageTextToDefaultRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return ResetCustomVerifySMSOTPMessageTextToDefaultRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseResetCustomVerifySMSOTPMessageTextToDefaultResponse() {
    return { details: undefined };
}
export const ResetCustomVerifySMSOTPMessageTextToDefaultResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResetCustomVerifySMSOTPMessageTextToDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetCustomVerifyEmailOTPMessageTextRequest() {
    return { language: "" };
}
export const GetCustomVerifyEmailOTPMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifyEmailOTPMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetCustomVerifyEmailOTPMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomVerifyEmailOTPMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetCustomVerifyEmailOTPMessageTextResponse() {
    return { customText: undefined };
}
export const GetCustomVerifyEmailOTPMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifyEmailOTPMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetCustomVerifyEmailOTPMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomVerifyEmailOTPMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultVerifyEmailOTPMessageTextRequest() {
    return { language: "" };
}
export const GetDefaultVerifyEmailOTPMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifyEmailOTPMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetDefaultVerifyEmailOTPMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultVerifyEmailOTPMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetDefaultVerifyEmailOTPMessageTextResponse() {
    return { customText: undefined };
}
export const GetDefaultVerifyEmailOTPMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifyEmailOTPMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetDefaultVerifyEmailOTPMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultVerifyEmailOTPMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultVerifyEmailOTPMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
export const SetDefaultVerifyEmailOTPMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifyEmailOTPMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return SetDefaultVerifyEmailOTPMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultVerifyEmailOTPMessageTextRequest();
        message.language = object.language ?? "";
        message.title = object.title ?? "";
        message.preHeader = object.preHeader ?? "";
        message.subject = object.subject ?? "";
        message.greeting = object.greeting ?? "";
        message.text = object.text ?? "";
        message.buttonText = object.buttonText ?? "";
        message.footerText = object.footerText ?? "";
        return message;
    },
};
function createBaseSetDefaultVerifyEmailOTPMessageTextResponse() {
    return { details: undefined };
}
export const SetDefaultVerifyEmailOTPMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifyEmailOTPMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetDefaultVerifyEmailOTPMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultVerifyEmailOTPMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomVerifyEmailOTPMessageTextToDefaultRequest() {
    return { language: "" };
}
export const ResetCustomVerifyEmailOTPMessageTextToDefaultRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return ResetCustomVerifyEmailOTPMessageTextToDefaultRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseResetCustomVerifyEmailOTPMessageTextToDefaultResponse() {
    return { details: undefined };
}
export const ResetCustomVerifyEmailOTPMessageTextToDefaultResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResetCustomVerifyEmailOTPMessageTextToDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultDomainClaimedMessageTextRequest() {
    return { language: "" };
}
export const GetDefaultDomainClaimedMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultDomainClaimedMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetDefaultDomainClaimedMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultDomainClaimedMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetDefaultDomainClaimedMessageTextResponse() {
    return { customText: undefined };
}
export const GetDefaultDomainClaimedMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultDomainClaimedMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetDefaultDomainClaimedMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultDomainClaimedMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomDomainClaimedMessageTextRequest() {
    return { language: "" };
}
export const GetCustomDomainClaimedMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomDomainClaimedMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetCustomDomainClaimedMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomDomainClaimedMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetCustomDomainClaimedMessageTextResponse() {
    return { customText: undefined };
}
export const GetCustomDomainClaimedMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomDomainClaimedMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetCustomDomainClaimedMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomDomainClaimedMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultDomainClaimedMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
export const SetDefaultDomainClaimedMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultDomainClaimedMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return SetDefaultDomainClaimedMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultDomainClaimedMessageTextRequest();
        message.language = object.language ?? "";
        message.title = object.title ?? "";
        message.preHeader = object.preHeader ?? "";
        message.subject = object.subject ?? "";
        message.greeting = object.greeting ?? "";
        message.text = object.text ?? "";
        message.buttonText = object.buttonText ?? "";
        message.footerText = object.footerText ?? "";
        return message;
    },
};
function createBaseSetDefaultDomainClaimedMessageTextResponse() {
    return { details: undefined };
}
export const SetDefaultDomainClaimedMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultDomainClaimedMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetDefaultDomainClaimedMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultDomainClaimedMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomDomainClaimedMessageTextToDefaultRequest() {
    return { language: "" };
}
export const ResetCustomDomainClaimedMessageTextToDefaultRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomDomainClaimedMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return ResetCustomDomainClaimedMessageTextToDefaultRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomDomainClaimedMessageTextToDefaultRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseResetCustomDomainClaimedMessageTextToDefaultResponse() {
    return { details: undefined };
}
export const ResetCustomDomainClaimedMessageTextToDefaultResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomDomainClaimedMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResetCustomDomainClaimedMessageTextToDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomDomainClaimedMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultPasswordChangeMessageTextRequest() {
    return { language: "" };
}
export const GetDefaultPasswordChangeMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultPasswordChangeMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetDefaultPasswordChangeMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultPasswordChangeMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetDefaultPasswordChangeMessageTextResponse() {
    return { customText: undefined };
}
export const GetDefaultPasswordChangeMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultPasswordChangeMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetDefaultPasswordChangeMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultPasswordChangeMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomPasswordChangeMessageTextRequest() {
    return { language: "" };
}
export const GetCustomPasswordChangeMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomPasswordChangeMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetCustomPasswordChangeMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomPasswordChangeMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetCustomPasswordChangeMessageTextResponse() {
    return { customText: undefined };
}
export const GetCustomPasswordChangeMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomPasswordChangeMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetCustomPasswordChangeMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomPasswordChangeMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultPasswordChangeMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
export const SetDefaultPasswordChangeMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultPasswordChangeMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return SetDefaultPasswordChangeMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultPasswordChangeMessageTextRequest();
        message.language = object.language ?? "";
        message.title = object.title ?? "";
        message.preHeader = object.preHeader ?? "";
        message.subject = object.subject ?? "";
        message.greeting = object.greeting ?? "";
        message.text = object.text ?? "";
        message.buttonText = object.buttonText ?? "";
        message.footerText = object.footerText ?? "";
        return message;
    },
};
function createBaseSetDefaultPasswordChangeMessageTextResponse() {
    return { details: undefined };
}
export const SetDefaultPasswordChangeMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultPasswordChangeMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetDefaultPasswordChangeMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultPasswordChangeMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomPasswordChangeMessageTextToDefaultRequest() {
    return { language: "" };
}
export const ResetCustomPasswordChangeMessageTextToDefaultRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomPasswordChangeMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return ResetCustomPasswordChangeMessageTextToDefaultRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomPasswordChangeMessageTextToDefaultRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseResetCustomPasswordChangeMessageTextToDefaultResponse() {
    return { details: undefined };
}
export const ResetCustomPasswordChangeMessageTextToDefaultResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomPasswordChangeMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResetCustomPasswordChangeMessageTextToDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomPasswordChangeMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultInviteUserMessageTextRequest() {
    return { language: "" };
}
export const GetDefaultInviteUserMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultInviteUserMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetDefaultInviteUserMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultInviteUserMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetDefaultInviteUserMessageTextResponse() {
    return { customText: undefined };
}
export const GetDefaultInviteUserMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultInviteUserMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetDefaultInviteUserMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultInviteUserMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomInviteUserMessageTextRequest() {
    return { language: "" };
}
export const GetCustomInviteUserMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomInviteUserMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetCustomInviteUserMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomInviteUserMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetCustomInviteUserMessageTextResponse() {
    return { customText: undefined };
}
export const GetCustomInviteUserMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomInviteUserMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetCustomInviteUserMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomInviteUserMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultInviteUserMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
export const SetDefaultInviteUserMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultInviteUserMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return SetDefaultInviteUserMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultInviteUserMessageTextRequest();
        message.language = object.language ?? "";
        message.title = object.title ?? "";
        message.preHeader = object.preHeader ?? "";
        message.subject = object.subject ?? "";
        message.greeting = object.greeting ?? "";
        message.text = object.text ?? "";
        message.buttonText = object.buttonText ?? "";
        message.footerText = object.footerText ?? "";
        return message;
    },
};
function createBaseSetDefaultInviteUserMessageTextResponse() {
    return { details: undefined };
}
export const SetDefaultInviteUserMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultInviteUserMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetDefaultInviteUserMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultInviteUserMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomInviteUserMessageTextToDefaultRequest() {
    return { language: "" };
}
export const ResetCustomInviteUserMessageTextToDefaultRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomInviteUserMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return ResetCustomInviteUserMessageTextToDefaultRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomInviteUserMessageTextToDefaultRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseResetCustomInviteUserMessageTextToDefaultResponse() {
    return { details: undefined };
}
export const ResetCustomInviteUserMessageTextToDefaultResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomInviteUserMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResetCustomInviteUserMessageTextToDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomInviteUserMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultPasswordlessRegistrationMessageTextRequest() {
    return { language: "" };
}
export const GetDefaultPasswordlessRegistrationMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultPasswordlessRegistrationMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetDefaultPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultPasswordlessRegistrationMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetDefaultPasswordlessRegistrationMessageTextResponse() {
    return { customText: undefined };
}
export const GetDefaultPasswordlessRegistrationMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultPasswordlessRegistrationMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetDefaultPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultPasswordlessRegistrationMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomPasswordlessRegistrationMessageTextRequest() {
    return { language: "" };
}
export const GetCustomPasswordlessRegistrationMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomPasswordlessRegistrationMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomPasswordlessRegistrationMessageTextRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetCustomPasswordlessRegistrationMessageTextResponse() {
    return { customText: undefined };
}
export const GetCustomPasswordlessRegistrationMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomPasswordlessRegistrationMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = MessageCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetCustomPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomPasswordlessRegistrationMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultPasswordlessRegistrationMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
export const SetDefaultPasswordlessRegistrationMessageTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultPasswordlessRegistrationMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return SetDefaultPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultPasswordlessRegistrationMessageTextRequest();
        message.language = object.language ?? "";
        message.title = object.title ?? "";
        message.preHeader = object.preHeader ?? "";
        message.subject = object.subject ?? "";
        message.greeting = object.greeting ?? "";
        message.text = object.text ?? "";
        message.buttonText = object.buttonText ?? "";
        message.footerText = object.footerText ?? "";
        return message;
    },
};
function createBaseSetDefaultPasswordlessRegistrationMessageTextResponse() {
    return { details: undefined };
}
export const SetDefaultPasswordlessRegistrationMessageTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultPasswordlessRegistrationMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetDefaultPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultPasswordlessRegistrationMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest() {
    return { language: "" };
}
export const ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse() {
    return { details: undefined };
}
export const ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultLoginTextsRequest() {
    return { language: "" };
}
export const GetDefaultLoginTextsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultLoginTextsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetDefaultLoginTextsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultLoginTextsRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetDefaultLoginTextsResponse() {
    return { customText: undefined };
}
export const GetDefaultLoginTextsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            LoginCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultLoginTextsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = LoginCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? LoginCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = LoginCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetDefaultLoginTextsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultLoginTextsResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? LoginCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomLoginTextsRequest() {
    return { language: "" };
}
export const GetCustomLoginTextsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomLoginTextsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return GetCustomLoginTextsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomLoginTextsRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseGetCustomLoginTextsResponse() {
    return { customText: undefined };
}
export const GetCustomLoginTextsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.customText !== undefined) {
            LoginCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomLoginTextsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = LoginCustomText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? LoginCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = LoginCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return GetCustomLoginTextsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomLoginTextsResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? LoginCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetCustomLoginTextsRequest() {
    return {
        language: "",
        selectAccountText: undefined,
        loginText: undefined,
        passwordText: undefined,
        usernameChangeText: undefined,
        usernameChangeDoneText: undefined,
        initPasswordText: undefined,
        initPasswordDoneText: undefined,
        emailVerificationText: undefined,
        emailVerificationDoneText: undefined,
        initializeUserText: undefined,
        initializeDoneText: undefined,
        initMfaPromptText: undefined,
        initMfaOtpText: undefined,
        initMfaU2fText: undefined,
        initMfaDoneText: undefined,
        mfaProvidersText: undefined,
        verifyMfaOtpText: undefined,
        verifyMfaU2fText: undefined,
        passwordlessText: undefined,
        passwordChangeText: undefined,
        passwordChangeDoneText: undefined,
        passwordResetDoneText: undefined,
        registrationOptionText: undefined,
        registrationUserText: undefined,
        registrationOrgText: undefined,
        linkingUserDoneText: undefined,
        externalUserNotFoundText: undefined,
        successLoginText: undefined,
        logoutText: undefined,
        footerText: undefined,
        passwordlessPromptText: undefined,
        passwordlessRegistrationText: undefined,
        passwordlessRegistrationDoneText: undefined,
        externalRegistrationUserOverviewText: undefined,
        linkingUserPromptText: undefined,
    };
}
export const SetCustomLoginTextsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.selectAccountText !== undefined) {
            SelectAccountScreenText.encode(message.selectAccountText, writer.uint32(18).fork()).join();
        }
        if (message.loginText !== undefined) {
            LoginScreenText.encode(message.loginText, writer.uint32(26).fork()).join();
        }
        if (message.passwordText !== undefined) {
            PasswordScreenText.encode(message.passwordText, writer.uint32(34).fork()).join();
        }
        if (message.usernameChangeText !== undefined) {
            UsernameChangeScreenText.encode(message.usernameChangeText, writer.uint32(42).fork()).join();
        }
        if (message.usernameChangeDoneText !== undefined) {
            UsernameChangeDoneScreenText.encode(message.usernameChangeDoneText, writer.uint32(50).fork()).join();
        }
        if (message.initPasswordText !== undefined) {
            InitPasswordScreenText.encode(message.initPasswordText, writer.uint32(58).fork()).join();
        }
        if (message.initPasswordDoneText !== undefined) {
            InitPasswordDoneScreenText.encode(message.initPasswordDoneText, writer.uint32(66).fork()).join();
        }
        if (message.emailVerificationText !== undefined) {
            EmailVerificationScreenText.encode(message.emailVerificationText, writer.uint32(74).fork()).join();
        }
        if (message.emailVerificationDoneText !== undefined) {
            EmailVerificationDoneScreenText.encode(message.emailVerificationDoneText, writer.uint32(82).fork()).join();
        }
        if (message.initializeUserText !== undefined) {
            InitializeUserScreenText.encode(message.initializeUserText, writer.uint32(90).fork()).join();
        }
        if (message.initializeDoneText !== undefined) {
            InitializeUserDoneScreenText.encode(message.initializeDoneText, writer.uint32(98).fork()).join();
        }
        if (message.initMfaPromptText !== undefined) {
            InitMFAPromptScreenText.encode(message.initMfaPromptText, writer.uint32(106).fork()).join();
        }
        if (message.initMfaOtpText !== undefined) {
            InitMFAOTPScreenText.encode(message.initMfaOtpText, writer.uint32(114).fork()).join();
        }
        if (message.initMfaU2fText !== undefined) {
            InitMFAU2FScreenText.encode(message.initMfaU2fText, writer.uint32(122).fork()).join();
        }
        if (message.initMfaDoneText !== undefined) {
            InitMFADoneScreenText.encode(message.initMfaDoneText, writer.uint32(130).fork()).join();
        }
        if (message.mfaProvidersText !== undefined) {
            MFAProvidersText.encode(message.mfaProvidersText, writer.uint32(138).fork()).join();
        }
        if (message.verifyMfaOtpText !== undefined) {
            VerifyMFAOTPScreenText.encode(message.verifyMfaOtpText, writer.uint32(146).fork()).join();
        }
        if (message.verifyMfaU2fText !== undefined) {
            VerifyMFAU2FScreenText.encode(message.verifyMfaU2fText, writer.uint32(154).fork()).join();
        }
        if (message.passwordlessText !== undefined) {
            PasswordlessScreenText.encode(message.passwordlessText, writer.uint32(162).fork()).join();
        }
        if (message.passwordChangeText !== undefined) {
            PasswordChangeScreenText.encode(message.passwordChangeText, writer.uint32(170).fork()).join();
        }
        if (message.passwordChangeDoneText !== undefined) {
            PasswordChangeDoneScreenText.encode(message.passwordChangeDoneText, writer.uint32(178).fork()).join();
        }
        if (message.passwordResetDoneText !== undefined) {
            PasswordResetDoneScreenText.encode(message.passwordResetDoneText, writer.uint32(186).fork()).join();
        }
        if (message.registrationOptionText !== undefined) {
            RegistrationOptionScreenText.encode(message.registrationOptionText, writer.uint32(194).fork()).join();
        }
        if (message.registrationUserText !== undefined) {
            RegistrationUserScreenText.encode(message.registrationUserText, writer.uint32(202).fork()).join();
        }
        if (message.registrationOrgText !== undefined) {
            RegistrationOrgScreenText.encode(message.registrationOrgText, writer.uint32(210).fork()).join();
        }
        if (message.linkingUserDoneText !== undefined) {
            LinkingUserDoneScreenText.encode(message.linkingUserDoneText, writer.uint32(218).fork()).join();
        }
        if (message.externalUserNotFoundText !== undefined) {
            ExternalUserNotFoundScreenText.encode(message.externalUserNotFoundText, writer.uint32(226).fork()).join();
        }
        if (message.successLoginText !== undefined) {
            SuccessLoginScreenText.encode(message.successLoginText, writer.uint32(234).fork()).join();
        }
        if (message.logoutText !== undefined) {
            LogoutDoneScreenText.encode(message.logoutText, writer.uint32(242).fork()).join();
        }
        if (message.footerText !== undefined) {
            FooterText.encode(message.footerText, writer.uint32(250).fork()).join();
        }
        if (message.passwordlessPromptText !== undefined) {
            PasswordlessPromptScreenText.encode(message.passwordlessPromptText, writer.uint32(258).fork()).join();
        }
        if (message.passwordlessRegistrationText !== undefined) {
            PasswordlessRegistrationScreenText.encode(message.passwordlessRegistrationText, writer.uint32(266).fork()).join();
        }
        if (message.passwordlessRegistrationDoneText !== undefined) {
            PasswordlessRegistrationDoneScreenText.encode(message.passwordlessRegistrationDoneText, writer.uint32(274).fork())
                .join();
        }
        if (message.externalRegistrationUserOverviewText !== undefined) {
            ExternalRegistrationUserOverviewScreenText.encode(message.externalRegistrationUserOverviewText, writer.uint32(282).fork()).join();
        }
        if (message.linkingUserPromptText !== undefined) {
            LinkingUserPromptScreenText.encode(message.linkingUserPromptText, writer.uint32(290).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetCustomLoginTextsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.selectAccountText = SelectAccountScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.loginText = LoginScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.passwordText = PasswordScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.usernameChangeText = UsernameChangeScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.usernameChangeDoneText = UsernameChangeDoneScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.initPasswordText = InitPasswordScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.initPasswordDoneText = InitPasswordDoneScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.emailVerificationText = EmailVerificationScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.emailVerificationDoneText = EmailVerificationDoneScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.initializeUserText = InitializeUserScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.initializeDoneText = InitializeUserDoneScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.initMfaPromptText = InitMFAPromptScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.initMfaOtpText = InitMFAOTPScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.initMfaU2fText = InitMFAU2FScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.initMfaDoneText = InitMFADoneScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.mfaProvidersText = MFAProvidersText.decode(reader, reader.uint32());
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.verifyMfaOtpText = VerifyMFAOTPScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.verifyMfaU2fText = VerifyMFAU2FScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.passwordlessText = PasswordlessScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.passwordChangeText = PasswordChangeScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.passwordChangeDoneText = PasswordChangeDoneScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.passwordResetDoneText = PasswordResetDoneScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.registrationOptionText = RegistrationOptionScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.registrationUserText = RegistrationUserScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 26: {
                    if (tag !== 210) {
                        break;
                    }
                    message.registrationOrgText = RegistrationOrgScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 27: {
                    if (tag !== 218) {
                        break;
                    }
                    message.linkingUserDoneText = LinkingUserDoneScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 28: {
                    if (tag !== 226) {
                        break;
                    }
                    message.externalUserNotFoundText = ExternalUserNotFoundScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 29: {
                    if (tag !== 234) {
                        break;
                    }
                    message.successLoginText = SuccessLoginScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.logoutText = LogoutDoneScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 31: {
                    if (tag !== 250) {
                        break;
                    }
                    message.footerText = FooterText.decode(reader, reader.uint32());
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.passwordlessPromptText = PasswordlessPromptScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 33: {
                    if (tag !== 266) {
                        break;
                    }
                    message.passwordlessRegistrationText = PasswordlessRegistrationScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 34: {
                    if (tag !== 274) {
                        break;
                    }
                    message.passwordlessRegistrationDoneText = PasswordlessRegistrationDoneScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 35: {
                    if (tag !== 282) {
                        break;
                    }
                    message.externalRegistrationUserOverviewText = ExternalRegistrationUserOverviewScreenText.decode(reader, reader.uint32());
                    continue;
                }
                case 36: {
                    if (tag !== 290) {
                        break;
                    }
                    message.linkingUserPromptText = LinkingUserPromptScreenText.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            selectAccountText: isSet(object.selectAccountText)
                ? SelectAccountScreenText.fromJSON(object.selectAccountText)
                : undefined,
            loginText: isSet(object.loginText) ? LoginScreenText.fromJSON(object.loginText) : undefined,
            passwordText: isSet(object.passwordText) ? PasswordScreenText.fromJSON(object.passwordText) : undefined,
            usernameChangeText: isSet(object.usernameChangeText)
                ? UsernameChangeScreenText.fromJSON(object.usernameChangeText)
                : undefined,
            usernameChangeDoneText: isSet(object.usernameChangeDoneText)
                ? UsernameChangeDoneScreenText.fromJSON(object.usernameChangeDoneText)
                : undefined,
            initPasswordText: isSet(object.initPasswordText)
                ? InitPasswordScreenText.fromJSON(object.initPasswordText)
                : undefined,
            initPasswordDoneText: isSet(object.initPasswordDoneText)
                ? InitPasswordDoneScreenText.fromJSON(object.initPasswordDoneText)
                : undefined,
            emailVerificationText: isSet(object.emailVerificationText)
                ? EmailVerificationScreenText.fromJSON(object.emailVerificationText)
                : undefined,
            emailVerificationDoneText: isSet(object.emailVerificationDoneText)
                ? EmailVerificationDoneScreenText.fromJSON(object.emailVerificationDoneText)
                : undefined,
            initializeUserText: isSet(object.initializeUserText)
                ? InitializeUserScreenText.fromJSON(object.initializeUserText)
                : undefined,
            initializeDoneText: isSet(object.initializeDoneText)
                ? InitializeUserDoneScreenText.fromJSON(object.initializeDoneText)
                : undefined,
            initMfaPromptText: isSet(object.initMfaPromptText)
                ? InitMFAPromptScreenText.fromJSON(object.initMfaPromptText)
                : undefined,
            initMfaOtpText: isSet(object.initMfaOtpText) ? InitMFAOTPScreenText.fromJSON(object.initMfaOtpText) : undefined,
            initMfaU2fText: isSet(object.initMfaU2fText) ? InitMFAU2FScreenText.fromJSON(object.initMfaU2fText) : undefined,
            initMfaDoneText: isSet(object.initMfaDoneText)
                ? InitMFADoneScreenText.fromJSON(object.initMfaDoneText)
                : undefined,
            mfaProvidersText: isSet(object.mfaProvidersText) ? MFAProvidersText.fromJSON(object.mfaProvidersText) : undefined,
            verifyMfaOtpText: isSet(object.verifyMfaOtpText)
                ? VerifyMFAOTPScreenText.fromJSON(object.verifyMfaOtpText)
                : undefined,
            verifyMfaU2fText: isSet(object.verifyMfaU2fText)
                ? VerifyMFAU2FScreenText.fromJSON(object.verifyMfaU2fText)
                : undefined,
            passwordlessText: isSet(object.passwordlessText)
                ? PasswordlessScreenText.fromJSON(object.passwordlessText)
                : undefined,
            passwordChangeText: isSet(object.passwordChangeText)
                ? PasswordChangeScreenText.fromJSON(object.passwordChangeText)
                : undefined,
            passwordChangeDoneText: isSet(object.passwordChangeDoneText)
                ? PasswordChangeDoneScreenText.fromJSON(object.passwordChangeDoneText)
                : undefined,
            passwordResetDoneText: isSet(object.passwordResetDoneText)
                ? PasswordResetDoneScreenText.fromJSON(object.passwordResetDoneText)
                : undefined,
            registrationOptionText: isSet(object.registrationOptionText)
                ? RegistrationOptionScreenText.fromJSON(object.registrationOptionText)
                : undefined,
            registrationUserText: isSet(object.registrationUserText)
                ? RegistrationUserScreenText.fromJSON(object.registrationUserText)
                : undefined,
            registrationOrgText: isSet(object.registrationOrgText)
                ? RegistrationOrgScreenText.fromJSON(object.registrationOrgText)
                : undefined,
            linkingUserDoneText: isSet(object.linkingUserDoneText)
                ? LinkingUserDoneScreenText.fromJSON(object.linkingUserDoneText)
                : undefined,
            externalUserNotFoundText: isSet(object.externalUserNotFoundText)
                ? ExternalUserNotFoundScreenText.fromJSON(object.externalUserNotFoundText)
                : undefined,
            successLoginText: isSet(object.successLoginText)
                ? SuccessLoginScreenText.fromJSON(object.successLoginText)
                : undefined,
            logoutText: isSet(object.logoutText) ? LogoutDoneScreenText.fromJSON(object.logoutText) : undefined,
            footerText: isSet(object.footerText) ? FooterText.fromJSON(object.footerText) : undefined,
            passwordlessPromptText: isSet(object.passwordlessPromptText)
                ? PasswordlessPromptScreenText.fromJSON(object.passwordlessPromptText)
                : undefined,
            passwordlessRegistrationText: isSet(object.passwordlessRegistrationText)
                ? PasswordlessRegistrationScreenText.fromJSON(object.passwordlessRegistrationText)
                : undefined,
            passwordlessRegistrationDoneText: isSet(object.passwordlessRegistrationDoneText)
                ? PasswordlessRegistrationDoneScreenText.fromJSON(object.passwordlessRegistrationDoneText)
                : undefined,
            externalRegistrationUserOverviewText: isSet(object.externalRegistrationUserOverviewText)
                ? ExternalRegistrationUserOverviewScreenText.fromJSON(object.externalRegistrationUserOverviewText)
                : undefined,
            linkingUserPromptText: isSet(object.linkingUserPromptText)
                ? LinkingUserPromptScreenText.fromJSON(object.linkingUserPromptText)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.selectAccountText !== undefined) {
            obj.selectAccountText = SelectAccountScreenText.toJSON(message.selectAccountText);
        }
        if (message.loginText !== undefined) {
            obj.loginText = LoginScreenText.toJSON(message.loginText);
        }
        if (message.passwordText !== undefined) {
            obj.passwordText = PasswordScreenText.toJSON(message.passwordText);
        }
        if (message.usernameChangeText !== undefined) {
            obj.usernameChangeText = UsernameChangeScreenText.toJSON(message.usernameChangeText);
        }
        if (message.usernameChangeDoneText !== undefined) {
            obj.usernameChangeDoneText = UsernameChangeDoneScreenText.toJSON(message.usernameChangeDoneText);
        }
        if (message.initPasswordText !== undefined) {
            obj.initPasswordText = InitPasswordScreenText.toJSON(message.initPasswordText);
        }
        if (message.initPasswordDoneText !== undefined) {
            obj.initPasswordDoneText = InitPasswordDoneScreenText.toJSON(message.initPasswordDoneText);
        }
        if (message.emailVerificationText !== undefined) {
            obj.emailVerificationText = EmailVerificationScreenText.toJSON(message.emailVerificationText);
        }
        if (message.emailVerificationDoneText !== undefined) {
            obj.emailVerificationDoneText = EmailVerificationDoneScreenText.toJSON(message.emailVerificationDoneText);
        }
        if (message.initializeUserText !== undefined) {
            obj.initializeUserText = InitializeUserScreenText.toJSON(message.initializeUserText);
        }
        if (message.initializeDoneText !== undefined) {
            obj.initializeDoneText = InitializeUserDoneScreenText.toJSON(message.initializeDoneText);
        }
        if (message.initMfaPromptText !== undefined) {
            obj.initMfaPromptText = InitMFAPromptScreenText.toJSON(message.initMfaPromptText);
        }
        if (message.initMfaOtpText !== undefined) {
            obj.initMfaOtpText = InitMFAOTPScreenText.toJSON(message.initMfaOtpText);
        }
        if (message.initMfaU2fText !== undefined) {
            obj.initMfaU2fText = InitMFAU2FScreenText.toJSON(message.initMfaU2fText);
        }
        if (message.initMfaDoneText !== undefined) {
            obj.initMfaDoneText = InitMFADoneScreenText.toJSON(message.initMfaDoneText);
        }
        if (message.mfaProvidersText !== undefined) {
            obj.mfaProvidersText = MFAProvidersText.toJSON(message.mfaProvidersText);
        }
        if (message.verifyMfaOtpText !== undefined) {
            obj.verifyMfaOtpText = VerifyMFAOTPScreenText.toJSON(message.verifyMfaOtpText);
        }
        if (message.verifyMfaU2fText !== undefined) {
            obj.verifyMfaU2fText = VerifyMFAU2FScreenText.toJSON(message.verifyMfaU2fText);
        }
        if (message.passwordlessText !== undefined) {
            obj.passwordlessText = PasswordlessScreenText.toJSON(message.passwordlessText);
        }
        if (message.passwordChangeText !== undefined) {
            obj.passwordChangeText = PasswordChangeScreenText.toJSON(message.passwordChangeText);
        }
        if (message.passwordChangeDoneText !== undefined) {
            obj.passwordChangeDoneText = PasswordChangeDoneScreenText.toJSON(message.passwordChangeDoneText);
        }
        if (message.passwordResetDoneText !== undefined) {
            obj.passwordResetDoneText = PasswordResetDoneScreenText.toJSON(message.passwordResetDoneText);
        }
        if (message.registrationOptionText !== undefined) {
            obj.registrationOptionText = RegistrationOptionScreenText.toJSON(message.registrationOptionText);
        }
        if (message.registrationUserText !== undefined) {
            obj.registrationUserText = RegistrationUserScreenText.toJSON(message.registrationUserText);
        }
        if (message.registrationOrgText !== undefined) {
            obj.registrationOrgText = RegistrationOrgScreenText.toJSON(message.registrationOrgText);
        }
        if (message.linkingUserDoneText !== undefined) {
            obj.linkingUserDoneText = LinkingUserDoneScreenText.toJSON(message.linkingUserDoneText);
        }
        if (message.externalUserNotFoundText !== undefined) {
            obj.externalUserNotFoundText = ExternalUserNotFoundScreenText.toJSON(message.externalUserNotFoundText);
        }
        if (message.successLoginText !== undefined) {
            obj.successLoginText = SuccessLoginScreenText.toJSON(message.successLoginText);
        }
        if (message.logoutText !== undefined) {
            obj.logoutText = LogoutDoneScreenText.toJSON(message.logoutText);
        }
        if (message.footerText !== undefined) {
            obj.footerText = FooterText.toJSON(message.footerText);
        }
        if (message.passwordlessPromptText !== undefined) {
            obj.passwordlessPromptText = PasswordlessPromptScreenText.toJSON(message.passwordlessPromptText);
        }
        if (message.passwordlessRegistrationText !== undefined) {
            obj.passwordlessRegistrationText = PasswordlessRegistrationScreenText.toJSON(message.passwordlessRegistrationText);
        }
        if (message.passwordlessRegistrationDoneText !== undefined) {
            obj.passwordlessRegistrationDoneText = PasswordlessRegistrationDoneScreenText.toJSON(message.passwordlessRegistrationDoneText);
        }
        if (message.externalRegistrationUserOverviewText !== undefined) {
            obj.externalRegistrationUserOverviewText = ExternalRegistrationUserOverviewScreenText.toJSON(message.externalRegistrationUserOverviewText);
        }
        if (message.linkingUserPromptText !== undefined) {
            obj.linkingUserPromptText = LinkingUserPromptScreenText.toJSON(message.linkingUserPromptText);
        }
        return obj;
    },
    create(base) {
        return SetCustomLoginTextsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetCustomLoginTextsRequest();
        message.language = object.language ?? "";
        message.selectAccountText = (object.selectAccountText !== undefined && object.selectAccountText !== null)
            ? SelectAccountScreenText.fromPartial(object.selectAccountText)
            : undefined;
        message.loginText = (object.loginText !== undefined && object.loginText !== null)
            ? LoginScreenText.fromPartial(object.loginText)
            : undefined;
        message.passwordText = (object.passwordText !== undefined && object.passwordText !== null)
            ? PasswordScreenText.fromPartial(object.passwordText)
            : undefined;
        message.usernameChangeText = (object.usernameChangeText !== undefined && object.usernameChangeText !== null)
            ? UsernameChangeScreenText.fromPartial(object.usernameChangeText)
            : undefined;
        message.usernameChangeDoneText =
            (object.usernameChangeDoneText !== undefined && object.usernameChangeDoneText !== null)
                ? UsernameChangeDoneScreenText.fromPartial(object.usernameChangeDoneText)
                : undefined;
        message.initPasswordText = (object.initPasswordText !== undefined && object.initPasswordText !== null)
            ? InitPasswordScreenText.fromPartial(object.initPasswordText)
            : undefined;
        message.initPasswordDoneText = (object.initPasswordDoneText !== undefined && object.initPasswordDoneText !== null)
            ? InitPasswordDoneScreenText.fromPartial(object.initPasswordDoneText)
            : undefined;
        message.emailVerificationText =
            (object.emailVerificationText !== undefined && object.emailVerificationText !== null)
                ? EmailVerificationScreenText.fromPartial(object.emailVerificationText)
                : undefined;
        message.emailVerificationDoneText =
            (object.emailVerificationDoneText !== undefined && object.emailVerificationDoneText !== null)
                ? EmailVerificationDoneScreenText.fromPartial(object.emailVerificationDoneText)
                : undefined;
        message.initializeUserText = (object.initializeUserText !== undefined && object.initializeUserText !== null)
            ? InitializeUserScreenText.fromPartial(object.initializeUserText)
            : undefined;
        message.initializeDoneText = (object.initializeDoneText !== undefined && object.initializeDoneText !== null)
            ? InitializeUserDoneScreenText.fromPartial(object.initializeDoneText)
            : undefined;
        message.initMfaPromptText = (object.initMfaPromptText !== undefined && object.initMfaPromptText !== null)
            ? InitMFAPromptScreenText.fromPartial(object.initMfaPromptText)
            : undefined;
        message.initMfaOtpText = (object.initMfaOtpText !== undefined && object.initMfaOtpText !== null)
            ? InitMFAOTPScreenText.fromPartial(object.initMfaOtpText)
            : undefined;
        message.initMfaU2fText = (object.initMfaU2fText !== undefined && object.initMfaU2fText !== null)
            ? InitMFAU2FScreenText.fromPartial(object.initMfaU2fText)
            : undefined;
        message.initMfaDoneText = (object.initMfaDoneText !== undefined && object.initMfaDoneText !== null)
            ? InitMFADoneScreenText.fromPartial(object.initMfaDoneText)
            : undefined;
        message.mfaProvidersText = (object.mfaProvidersText !== undefined && object.mfaProvidersText !== null)
            ? MFAProvidersText.fromPartial(object.mfaProvidersText)
            : undefined;
        message.verifyMfaOtpText = (object.verifyMfaOtpText !== undefined && object.verifyMfaOtpText !== null)
            ? VerifyMFAOTPScreenText.fromPartial(object.verifyMfaOtpText)
            : undefined;
        message.verifyMfaU2fText = (object.verifyMfaU2fText !== undefined && object.verifyMfaU2fText !== null)
            ? VerifyMFAU2FScreenText.fromPartial(object.verifyMfaU2fText)
            : undefined;
        message.passwordlessText = (object.passwordlessText !== undefined && object.passwordlessText !== null)
            ? PasswordlessScreenText.fromPartial(object.passwordlessText)
            : undefined;
        message.passwordChangeText = (object.passwordChangeText !== undefined && object.passwordChangeText !== null)
            ? PasswordChangeScreenText.fromPartial(object.passwordChangeText)
            : undefined;
        message.passwordChangeDoneText =
            (object.passwordChangeDoneText !== undefined && object.passwordChangeDoneText !== null)
                ? PasswordChangeDoneScreenText.fromPartial(object.passwordChangeDoneText)
                : undefined;
        message.passwordResetDoneText =
            (object.passwordResetDoneText !== undefined && object.passwordResetDoneText !== null)
                ? PasswordResetDoneScreenText.fromPartial(object.passwordResetDoneText)
                : undefined;
        message.registrationOptionText =
            (object.registrationOptionText !== undefined && object.registrationOptionText !== null)
                ? RegistrationOptionScreenText.fromPartial(object.registrationOptionText)
                : undefined;
        message.registrationUserText = (object.registrationUserText !== undefined && object.registrationUserText !== null)
            ? RegistrationUserScreenText.fromPartial(object.registrationUserText)
            : undefined;
        message.registrationOrgText = (object.registrationOrgText !== undefined && object.registrationOrgText !== null)
            ? RegistrationOrgScreenText.fromPartial(object.registrationOrgText)
            : undefined;
        message.linkingUserDoneText = (object.linkingUserDoneText !== undefined && object.linkingUserDoneText !== null)
            ? LinkingUserDoneScreenText.fromPartial(object.linkingUserDoneText)
            : undefined;
        message.externalUserNotFoundText =
            (object.externalUserNotFoundText !== undefined && object.externalUserNotFoundText !== null)
                ? ExternalUserNotFoundScreenText.fromPartial(object.externalUserNotFoundText)
                : undefined;
        message.successLoginText = (object.successLoginText !== undefined && object.successLoginText !== null)
            ? SuccessLoginScreenText.fromPartial(object.successLoginText)
            : undefined;
        message.logoutText = (object.logoutText !== undefined && object.logoutText !== null)
            ? LogoutDoneScreenText.fromPartial(object.logoutText)
            : undefined;
        message.footerText = (object.footerText !== undefined && object.footerText !== null)
            ? FooterText.fromPartial(object.footerText)
            : undefined;
        message.passwordlessPromptText =
            (object.passwordlessPromptText !== undefined && object.passwordlessPromptText !== null)
                ? PasswordlessPromptScreenText.fromPartial(object.passwordlessPromptText)
                : undefined;
        message.passwordlessRegistrationText =
            (object.passwordlessRegistrationText !== undefined && object.passwordlessRegistrationText !== null)
                ? PasswordlessRegistrationScreenText.fromPartial(object.passwordlessRegistrationText)
                : undefined;
        message.passwordlessRegistrationDoneText =
            (object.passwordlessRegistrationDoneText !== undefined && object.passwordlessRegistrationDoneText !== null)
                ? PasswordlessRegistrationDoneScreenText.fromPartial(object.passwordlessRegistrationDoneText)
                : undefined;
        message.externalRegistrationUserOverviewText =
            (object.externalRegistrationUserOverviewText !== undefined &&
                object.externalRegistrationUserOverviewText !== null)
                ? ExternalRegistrationUserOverviewScreenText.fromPartial(object.externalRegistrationUserOverviewText)
                : undefined;
        message.linkingUserPromptText =
            (object.linkingUserPromptText !== undefined && object.linkingUserPromptText !== null)
                ? LinkingUserPromptScreenText.fromPartial(object.linkingUserPromptText)
                : undefined;
        return message;
    },
};
function createBaseSetCustomLoginTextsResponse() {
    return { details: undefined };
}
export const SetCustomLoginTextsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetCustomLoginTextsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetCustomLoginTextsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetCustomLoginTextsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomLoginTextsToDefaultRequest() {
    return { language: "" };
}
export const ResetCustomLoginTextsToDefaultRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomLoginTextsToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return ResetCustomLoginTextsToDefaultRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomLoginTextsToDefaultRequest();
        message.language = object.language ?? "";
        return message;
    },
};
function createBaseResetCustomLoginTextsToDefaultResponse() {
    return { details: undefined };
}
export const ResetCustomLoginTextsToDefaultResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomLoginTextsToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResetCustomLoginTextsToDefaultResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomLoginTextsToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddIAMMemberRequest() {
    return { userId: "", roles: [] };
}
export const AddIAMMemberRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        for (const v of message.roles) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddIAMMemberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.roles.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.roles?.length) {
            obj.roles = message.roles;
        }
        return obj;
    },
    create(base) {
        return AddIAMMemberRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddIAMMemberRequest();
        message.userId = object.userId ?? "";
        message.roles = object.roles?.map((e) => e) || [];
        return message;
    },
};
function createBaseAddIAMMemberResponse() {
    return { details: undefined };
}
export const AddIAMMemberResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddIAMMemberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddIAMMemberResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddIAMMemberResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateIAMMemberRequest() {
    return { userId: "", roles: [] };
}
export const UpdateIAMMemberRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        for (const v of message.roles) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIAMMemberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.roles.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.roles?.length) {
            obj.roles = message.roles;
        }
        return obj;
    },
    create(base) {
        return UpdateIAMMemberRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateIAMMemberRequest();
        message.userId = object.userId ?? "";
        message.roles = object.roles?.map((e) => e) || [];
        return message;
    },
};
function createBaseUpdateIAMMemberResponse() {
    return { details: undefined };
}
export const UpdateIAMMemberResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIAMMemberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateIAMMemberResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateIAMMemberResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveIAMMemberRequest() {
    return { userId: "" };
}
export const RemoveIAMMemberRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveIAMMemberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return RemoveIAMMemberRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveIAMMemberRequest();
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseRemoveIAMMemberResponse() {
    return { details: undefined };
}
export const RemoveIAMMemberResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveIAMMemberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveIAMMemberResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveIAMMemberResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListIAMMemberRolesRequest() {
    return {};
}
export const ListIAMMemberRolesRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListIAMMemberRolesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListIAMMemberRolesRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListIAMMemberRolesRequest();
        return message;
    },
};
function createBaseListIAMMemberRolesResponse() {
    return { details: undefined, roles: [] };
}
export const ListIAMMemberRolesResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.roles) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListIAMMemberRolesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.roles.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.roles?.length) {
            obj.roles = message.roles;
        }
        return obj;
    },
    create(base) {
        return ListIAMMemberRolesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListIAMMemberRolesResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.roles = object.roles?.map((e) => e) || [];
        return message;
    },
};
function createBaseListIAMMembersRequest() {
    return { query: undefined, queries: [] };
}
export const ListIAMMembersRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        for (const v of message.queries) {
            SearchQuery.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListIAMMembersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.queries.push(SearchQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
            queries: globalThis.Array.isArray(object?.queries) ? object.queries.map((e) => SearchQuery.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => SearchQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListIAMMembersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListIAMMembersRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        message.queries = object.queries?.map((e) => SearchQuery.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListIAMMembersResponse() {
    return { details: undefined, result: [] };
}
export const ListIAMMembersResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            Member.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListIAMMembersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(Member.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => Member.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => Member.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListIAMMembersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListIAMMembersResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => Member.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListViewsRequest() {
    return {};
}
export const ListViewsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListViewsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListViewsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListViewsRequest();
        return message;
    },
};
function createBaseListViewsResponse() {
    return { result: [] };
}
export const ListViewsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.result) {
            View.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListViewsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.result.push(View.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => View.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.result?.length) {
            obj.result = message.result.map((e) => View.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListViewsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListViewsResponse();
        message.result = object.result?.map((e) => View.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListFailedEventsRequest() {
    return {};
}
export const ListFailedEventsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFailedEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListFailedEventsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListFailedEventsRequest();
        return message;
    },
};
function createBaseListFailedEventsResponse() {
    return { result: [] };
}
export const ListFailedEventsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.result) {
            FailedEvent.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFailedEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.result.push(FailedEvent.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => FailedEvent.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result?.length) {
            obj.result = message.result.map((e) => FailedEvent.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListFailedEventsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListFailedEventsResponse();
        message.result = object.result?.map((e) => FailedEvent.fromPartial(e)) || [];
        return message;
    },
};
function createBaseRemoveFailedEventRequest() {
    return { database: "", viewName: "", failedSequence: Long.UZERO };
}
export const RemoveFailedEventRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.database !== "") {
            writer.uint32(10).string(message.database);
        }
        if (message.viewName !== "") {
            writer.uint32(18).string(message.viewName);
        }
        if (!message.failedSequence.equals(Long.UZERO)) {
            writer.uint32(24).uint64(message.failedSequence.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFailedEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.database = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.viewName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.failedSequence = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            database: isSet(object.database) ? globalThis.String(object.database) : "",
            viewName: isSet(object.viewName) ? globalThis.String(object.viewName) : "",
            failedSequence: isSet(object.failedSequence) ? Long.fromValue(object.failedSequence) : Long.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.database !== "") {
            obj.database = message.database;
        }
        if (message.viewName !== "") {
            obj.viewName = message.viewName;
        }
        if (!message.failedSequence.equals(Long.UZERO)) {
            obj.failedSequence = (message.failedSequence || Long.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return RemoveFailedEventRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveFailedEventRequest();
        message.database = object.database ?? "";
        message.viewName = object.viewName ?? "";
        message.failedSequence = (object.failedSequence !== undefined && object.failedSequence !== null)
            ? Long.fromValue(object.failedSequence)
            : Long.UZERO;
        return message;
    },
};
function createBaseRemoveFailedEventResponse() {
    return {};
}
export const RemoveFailedEventResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFailedEventResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RemoveFailedEventResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoveFailedEventResponse();
        return message;
    },
};
function createBaseView() {
    return {
        database: "",
        viewName: "",
        processedSequence: Long.UZERO,
        eventTimestamp: undefined,
        lastSuccessfulSpoolerRun: undefined,
    };
}
export const View = {
    encode(message, writer = new BinaryWriter()) {
        if (message.database !== "") {
            writer.uint32(10).string(message.database);
        }
        if (message.viewName !== "") {
            writer.uint32(18).string(message.viewName);
        }
        if (!message.processedSequence.equals(Long.UZERO)) {
            writer.uint32(24).uint64(message.processedSequence.toString());
        }
        if (message.eventTimestamp !== undefined) {
            Timestamp.encode(toTimestamp(message.eventTimestamp), writer.uint32(34).fork()).join();
        }
        if (message.lastSuccessfulSpoolerRun !== undefined) {
            Timestamp.encode(toTimestamp(message.lastSuccessfulSpoolerRun), writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseView();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.database = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.viewName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.processedSequence = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.eventTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.lastSuccessfulSpoolerRun = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            database: isSet(object.database) ? globalThis.String(object.database) : "",
            viewName: isSet(object.viewName) ? globalThis.String(object.viewName) : "",
            processedSequence: isSet(object.processedSequence) ? Long.fromValue(object.processedSequence) : Long.UZERO,
            eventTimestamp: isSet(object.eventTimestamp) ? fromJsonTimestamp(object.eventTimestamp) : undefined,
            lastSuccessfulSpoolerRun: isSet(object.lastSuccessfulSpoolerRun)
                ? fromJsonTimestamp(object.lastSuccessfulSpoolerRun)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.database !== "") {
            obj.database = message.database;
        }
        if (message.viewName !== "") {
            obj.viewName = message.viewName;
        }
        if (!message.processedSequence.equals(Long.UZERO)) {
            obj.processedSequence = (message.processedSequence || Long.UZERO).toString();
        }
        if (message.eventTimestamp !== undefined) {
            obj.eventTimestamp = message.eventTimestamp.toISOString();
        }
        if (message.lastSuccessfulSpoolerRun !== undefined) {
            obj.lastSuccessfulSpoolerRun = message.lastSuccessfulSpoolerRun.toISOString();
        }
        return obj;
    },
    create(base) {
        return View.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseView();
        message.database = object.database ?? "";
        message.viewName = object.viewName ?? "";
        message.processedSequence = (object.processedSequence !== undefined && object.processedSequence !== null)
            ? Long.fromValue(object.processedSequence)
            : Long.UZERO;
        message.eventTimestamp = object.eventTimestamp ?? undefined;
        message.lastSuccessfulSpoolerRun = object.lastSuccessfulSpoolerRun ?? undefined;
        return message;
    },
};
function createBaseFailedEvent() {
    return {
        database: "",
        viewName: "",
        failedSequence: Long.UZERO,
        failureCount: Long.UZERO,
        errorMessage: "",
        lastFailed: undefined,
    };
}
export const FailedEvent = {
    encode(message, writer = new BinaryWriter()) {
        if (message.database !== "") {
            writer.uint32(10).string(message.database);
        }
        if (message.viewName !== "") {
            writer.uint32(18).string(message.viewName);
        }
        if (!message.failedSequence.equals(Long.UZERO)) {
            writer.uint32(24).uint64(message.failedSequence.toString());
        }
        if (!message.failureCount.equals(Long.UZERO)) {
            writer.uint32(32).uint64(message.failureCount.toString());
        }
        if (message.errorMessage !== "") {
            writer.uint32(42).string(message.errorMessage);
        }
        if (message.lastFailed !== undefined) {
            Timestamp.encode(toTimestamp(message.lastFailed), writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFailedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.database = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.viewName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.failedSequence = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.failureCount = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.errorMessage = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.lastFailed = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            database: isSet(object.database) ? globalThis.String(object.database) : "",
            viewName: isSet(object.viewName) ? globalThis.String(object.viewName) : "",
            failedSequence: isSet(object.failedSequence) ? Long.fromValue(object.failedSequence) : Long.UZERO,
            failureCount: isSet(object.failureCount) ? Long.fromValue(object.failureCount) : Long.UZERO,
            errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
            lastFailed: isSet(object.lastFailed) ? fromJsonTimestamp(object.lastFailed) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.database !== "") {
            obj.database = message.database;
        }
        if (message.viewName !== "") {
            obj.viewName = message.viewName;
        }
        if (!message.failedSequence.equals(Long.UZERO)) {
            obj.failedSequence = (message.failedSequence || Long.UZERO).toString();
        }
        if (!message.failureCount.equals(Long.UZERO)) {
            obj.failureCount = (message.failureCount || Long.UZERO).toString();
        }
        if (message.errorMessage !== "") {
            obj.errorMessage = message.errorMessage;
        }
        if (message.lastFailed !== undefined) {
            obj.lastFailed = message.lastFailed.toISOString();
        }
        return obj;
    },
    create(base) {
        return FailedEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFailedEvent();
        message.database = object.database ?? "";
        message.viewName = object.viewName ?? "";
        message.failedSequence = (object.failedSequence !== undefined && object.failedSequence !== null)
            ? Long.fromValue(object.failedSequence)
            : Long.UZERO;
        message.failureCount = (object.failureCount !== undefined && object.failureCount !== null)
            ? Long.fromValue(object.failureCount)
            : Long.UZERO;
        message.errorMessage = object.errorMessage ?? "";
        message.lastFailed = object.lastFailed ?? undefined;
        return message;
    },
};
function createBaseImportDataRequest() {
    return {
        dataOrgs: undefined,
        dataOrgsv1: undefined,
        dataOrgsLocal: undefined,
        dataOrgsv1Local: undefined,
        dataOrgsS3: undefined,
        dataOrgsv1S3: undefined,
        dataOrgsGcs: undefined,
        dataOrgsv1Gcs: undefined,
        timeout: "",
    };
}
export const ImportDataRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.dataOrgs !== undefined) {
            ImportDataOrg.encode(message.dataOrgs, writer.uint32(10).fork()).join();
        }
        if (message.dataOrgsv1 !== undefined) {
            ImportDataOrg1.encode(message.dataOrgsv1, writer.uint32(18).fork()).join();
        }
        if (message.dataOrgsLocal !== undefined) {
            ImportDataRequest_LocalInput.encode(message.dataOrgsLocal, writer.uint32(26).fork()).join();
        }
        if (message.dataOrgsv1Local !== undefined) {
            ImportDataRequest_LocalInput.encode(message.dataOrgsv1Local, writer.uint32(34).fork()).join();
        }
        if (message.dataOrgsS3 !== undefined) {
            ImportDataRequest_S3Input.encode(message.dataOrgsS3, writer.uint32(42).fork()).join();
        }
        if (message.dataOrgsv1S3 !== undefined) {
            ImportDataRequest_S3Input.encode(message.dataOrgsv1S3, writer.uint32(50).fork()).join();
        }
        if (message.dataOrgsGcs !== undefined) {
            ImportDataRequest_GCSInput.encode(message.dataOrgsGcs, writer.uint32(58).fork()).join();
        }
        if (message.dataOrgsv1Gcs !== undefined) {
            ImportDataRequest_GCSInput.encode(message.dataOrgsv1Gcs, writer.uint32(66).fork()).join();
        }
        if (message.timeout !== "") {
            writer.uint32(74).string(message.timeout);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.dataOrgs = ImportDataOrg.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.dataOrgsv1 = ImportDataOrg1.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.dataOrgsLocal = ImportDataRequest_LocalInput.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.dataOrgsv1Local = ImportDataRequest_LocalInput.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.dataOrgsS3 = ImportDataRequest_S3Input.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.dataOrgsv1S3 = ImportDataRequest_S3Input.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.dataOrgsGcs = ImportDataRequest_GCSInput.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.dataOrgsv1Gcs = ImportDataRequest_GCSInput.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.timeout = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dataOrgs: isSet(object.dataOrgs) ? ImportDataOrg.fromJSON(object.dataOrgs) : undefined,
            dataOrgsv1: isSet(object.dataOrgsv1) ? ImportDataOrg1.fromJSON(object.dataOrgsv1) : undefined,
            dataOrgsLocal: isSet(object.dataOrgsLocal)
                ? ImportDataRequest_LocalInput.fromJSON(object.dataOrgsLocal)
                : undefined,
            dataOrgsv1Local: isSet(object.dataOrgsv1Local)
                ? ImportDataRequest_LocalInput.fromJSON(object.dataOrgsv1Local)
                : undefined,
            dataOrgsS3: isSet(object.dataOrgsS3) ? ImportDataRequest_S3Input.fromJSON(object.dataOrgsS3) : undefined,
            dataOrgsv1S3: isSet(object.dataOrgsv1S3) ? ImportDataRequest_S3Input.fromJSON(object.dataOrgsv1S3) : undefined,
            dataOrgsGcs: isSet(object.dataOrgsGcs) ? ImportDataRequest_GCSInput.fromJSON(object.dataOrgsGcs) : undefined,
            dataOrgsv1Gcs: isSet(object.dataOrgsv1Gcs)
                ? ImportDataRequest_GCSInput.fromJSON(object.dataOrgsv1Gcs)
                : undefined,
            timeout: isSet(object.timeout) ? globalThis.String(object.timeout) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dataOrgs !== undefined) {
            obj.dataOrgs = ImportDataOrg.toJSON(message.dataOrgs);
        }
        if (message.dataOrgsv1 !== undefined) {
            obj.dataOrgsv1 = ImportDataOrg1.toJSON(message.dataOrgsv1);
        }
        if (message.dataOrgsLocal !== undefined) {
            obj.dataOrgsLocal = ImportDataRequest_LocalInput.toJSON(message.dataOrgsLocal);
        }
        if (message.dataOrgsv1Local !== undefined) {
            obj.dataOrgsv1Local = ImportDataRequest_LocalInput.toJSON(message.dataOrgsv1Local);
        }
        if (message.dataOrgsS3 !== undefined) {
            obj.dataOrgsS3 = ImportDataRequest_S3Input.toJSON(message.dataOrgsS3);
        }
        if (message.dataOrgsv1S3 !== undefined) {
            obj.dataOrgsv1S3 = ImportDataRequest_S3Input.toJSON(message.dataOrgsv1S3);
        }
        if (message.dataOrgsGcs !== undefined) {
            obj.dataOrgsGcs = ImportDataRequest_GCSInput.toJSON(message.dataOrgsGcs);
        }
        if (message.dataOrgsv1Gcs !== undefined) {
            obj.dataOrgsv1Gcs = ImportDataRequest_GCSInput.toJSON(message.dataOrgsv1Gcs);
        }
        if (message.timeout !== "") {
            obj.timeout = message.timeout;
        }
        return obj;
    },
    create(base) {
        return ImportDataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataRequest();
        message.dataOrgs = (object.dataOrgs !== undefined && object.dataOrgs !== null)
            ? ImportDataOrg.fromPartial(object.dataOrgs)
            : undefined;
        message.dataOrgsv1 = (object.dataOrgsv1 !== undefined && object.dataOrgsv1 !== null)
            ? ImportDataOrg1.fromPartial(object.dataOrgsv1)
            : undefined;
        message.dataOrgsLocal = (object.dataOrgsLocal !== undefined && object.dataOrgsLocal !== null)
            ? ImportDataRequest_LocalInput.fromPartial(object.dataOrgsLocal)
            : undefined;
        message.dataOrgsv1Local = (object.dataOrgsv1Local !== undefined && object.dataOrgsv1Local !== null)
            ? ImportDataRequest_LocalInput.fromPartial(object.dataOrgsv1Local)
            : undefined;
        message.dataOrgsS3 = (object.dataOrgsS3 !== undefined && object.dataOrgsS3 !== null)
            ? ImportDataRequest_S3Input.fromPartial(object.dataOrgsS3)
            : undefined;
        message.dataOrgsv1S3 = (object.dataOrgsv1S3 !== undefined && object.dataOrgsv1S3 !== null)
            ? ImportDataRequest_S3Input.fromPartial(object.dataOrgsv1S3)
            : undefined;
        message.dataOrgsGcs = (object.dataOrgsGcs !== undefined && object.dataOrgsGcs !== null)
            ? ImportDataRequest_GCSInput.fromPartial(object.dataOrgsGcs)
            : undefined;
        message.dataOrgsv1Gcs = (object.dataOrgsv1Gcs !== undefined && object.dataOrgsv1Gcs !== null)
            ? ImportDataRequest_GCSInput.fromPartial(object.dataOrgsv1Gcs)
            : undefined;
        message.timeout = object.timeout ?? "";
        return message;
    },
};
function createBaseImportDataRequest_LocalInput() {
    return { path: "" };
}
export const ImportDataRequest_LocalInput = {
    encode(message, writer = new BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataRequest_LocalInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { path: isSet(object.path) ? globalThis.String(object.path) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        return obj;
    },
    create(base) {
        return ImportDataRequest_LocalInput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataRequest_LocalInput();
        message.path = object.path ?? "";
        return message;
    },
};
function createBaseImportDataRequest_S3Input() {
    return { path: "", endpoint: "", accessKeyId: "", secretAccessKey: "", ssl: false, bucket: "" };
}
export const ImportDataRequest_S3Input = {
    encode(message, writer = new BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        if (message.endpoint !== "") {
            writer.uint32(18).string(message.endpoint);
        }
        if (message.accessKeyId !== "") {
            writer.uint32(26).string(message.accessKeyId);
        }
        if (message.secretAccessKey !== "") {
            writer.uint32(34).string(message.secretAccessKey);
        }
        if (message.ssl !== false) {
            writer.uint32(40).bool(message.ssl);
        }
        if (message.bucket !== "") {
            writer.uint32(50).string(message.bucket);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataRequest_S3Input();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.accessKeyId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.secretAccessKey = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.ssl = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.bucket = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            path: isSet(object.path) ? globalThis.String(object.path) : "",
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
            accessKeyId: isSet(object.accessKeyId) ? globalThis.String(object.accessKeyId) : "",
            secretAccessKey: isSet(object.secretAccessKey) ? globalThis.String(object.secretAccessKey) : "",
            ssl: isSet(object.ssl) ? globalThis.Boolean(object.ssl) : false,
            bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.endpoint !== "") {
            obj.endpoint = message.endpoint;
        }
        if (message.accessKeyId !== "") {
            obj.accessKeyId = message.accessKeyId;
        }
        if (message.secretAccessKey !== "") {
            obj.secretAccessKey = message.secretAccessKey;
        }
        if (message.ssl !== false) {
            obj.ssl = message.ssl;
        }
        if (message.bucket !== "") {
            obj.bucket = message.bucket;
        }
        return obj;
    },
    create(base) {
        return ImportDataRequest_S3Input.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataRequest_S3Input();
        message.path = object.path ?? "";
        message.endpoint = object.endpoint ?? "";
        message.accessKeyId = object.accessKeyId ?? "";
        message.secretAccessKey = object.secretAccessKey ?? "";
        message.ssl = object.ssl ?? false;
        message.bucket = object.bucket ?? "";
        return message;
    },
};
function createBaseImportDataRequest_GCSInput() {
    return { bucket: "", serviceaccountJson: "", path: "" };
}
export const ImportDataRequest_GCSInput = {
    encode(message, writer = new BinaryWriter()) {
        if (message.bucket !== "") {
            writer.uint32(10).string(message.bucket);
        }
        if (message.serviceaccountJson !== "") {
            writer.uint32(18).string(message.serviceaccountJson);
        }
        if (message.path !== "") {
            writer.uint32(26).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataRequest_GCSInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.bucket = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.serviceaccountJson = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
            serviceaccountJson: isSet(object.serviceaccountJson) ? globalThis.String(object.serviceaccountJson) : "",
            path: isSet(object.path) ? globalThis.String(object.path) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bucket !== "") {
            obj.bucket = message.bucket;
        }
        if (message.serviceaccountJson !== "") {
            obj.serviceaccountJson = message.serviceaccountJson;
        }
        if (message.path !== "") {
            obj.path = message.path;
        }
        return obj;
    },
    create(base) {
        return ImportDataRequest_GCSInput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataRequest_GCSInput();
        message.bucket = object.bucket ?? "";
        message.serviceaccountJson = object.serviceaccountJson ?? "";
        message.path = object.path ?? "";
        return message;
    },
};
function createBaseImportDataOrg() {
    return { orgs: [] };
}
export const ImportDataOrg = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.orgs) {
            DataOrg.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataOrg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgs.push(DataOrg.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgs: globalThis.Array.isArray(object?.orgs) ? object.orgs.map((e) => DataOrg.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgs?.length) {
            obj.orgs = message.orgs.map((e) => DataOrg.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ImportDataOrg.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataOrg();
        message.orgs = object.orgs?.map((e) => DataOrg.fromPartial(e)) || [];
        return message;
    },
};
function createBaseDataOrg() {
    return {
        orgId: "",
        org: undefined,
        domainPolicy: undefined,
        labelPolicy: undefined,
        lockoutPolicy: undefined,
        loginPolicy: undefined,
        passwordComplexityPolicy: undefined,
        privacyPolicy: undefined,
        projects: [],
        projectRoles: [],
        apiApps: [],
        oidcApps: [],
        humanUsers: [],
        machineUsers: [],
        triggerActions: [],
        actions: [],
        projectGrants: [],
        userGrants: [],
        orgMembers: [],
        projectMembers: [],
        projectGrantMembers: [],
        userMetadata: [],
        loginTexts: [],
        initMessages: [],
        passwordResetMessages: [],
        verifyEmailMessages: [],
        verifyPhoneMessages: [],
        domainClaimedMessages: [],
        passwordlessRegistrationMessages: [],
        oidcIdps: [],
        jwtIdps: [],
        userLinks: [],
        domains: [],
        appKeys: [],
        machineKeys: [],
        verifySmsOtpMessages: [],
        verifyEmailOtpMessages: [],
        inviteUserMessages: [],
    };
}
export const DataOrg = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        if (message.org !== undefined) {
            AddOrgRequest.encode(message.org, writer.uint32(26).fork()).join();
        }
        if (message.domainPolicy !== undefined) {
            AddCustomDomainPolicyRequest.encode(message.domainPolicy, writer.uint32(34).fork()).join();
        }
        if (message.labelPolicy !== undefined) {
            AddCustomLabelPolicyRequest.encode(message.labelPolicy, writer.uint32(42).fork()).join();
        }
        if (message.lockoutPolicy !== undefined) {
            AddCustomLockoutPolicyRequest.encode(message.lockoutPolicy, writer.uint32(50).fork()).join();
        }
        if (message.loginPolicy !== undefined) {
            AddCustomLoginPolicyRequest.encode(message.loginPolicy, writer.uint32(58).fork()).join();
        }
        if (message.passwordComplexityPolicy !== undefined) {
            AddCustomPasswordComplexityPolicyRequest.encode(message.passwordComplexityPolicy, writer.uint32(66).fork())
                .join();
        }
        if (message.privacyPolicy !== undefined) {
            AddCustomPrivacyPolicyRequest.encode(message.privacyPolicy, writer.uint32(74).fork()).join();
        }
        for (const v of message.projects) {
            DataProject.encode(v, writer.uint32(82).fork()).join();
        }
        for (const v of message.projectRoles) {
            AddProjectRoleRequest.encode(v, writer.uint32(90).fork()).join();
        }
        for (const v of message.apiApps) {
            DataAPIApplication.encode(v, writer.uint32(98).fork()).join();
        }
        for (const v of message.oidcApps) {
            DataOIDCApplication.encode(v, writer.uint32(106).fork()).join();
        }
        for (const v of message.humanUsers) {
            DataHumanUser.encode(v, writer.uint32(114).fork()).join();
        }
        for (const v of message.machineUsers) {
            DataMachineUser.encode(v, writer.uint32(122).fork()).join();
        }
        for (const v of message.triggerActions) {
            SetTriggerActionsRequest.encode(v, writer.uint32(130).fork()).join();
        }
        for (const v of message.actions) {
            DataAction.encode(v, writer.uint32(138).fork()).join();
        }
        for (const v of message.projectGrants) {
            DataProjectGrant.encode(v, writer.uint32(146).fork()).join();
        }
        for (const v of message.userGrants) {
            AddUserGrantRequest.encode(v, writer.uint32(154).fork()).join();
        }
        for (const v of message.orgMembers) {
            AddOrgMemberRequest.encode(v, writer.uint32(162).fork()).join();
        }
        for (const v of message.projectMembers) {
            AddProjectMemberRequest.encode(v, writer.uint32(170).fork()).join();
        }
        for (const v of message.projectGrantMembers) {
            AddProjectGrantMemberRequest.encode(v, writer.uint32(178).fork()).join();
        }
        for (const v of message.userMetadata) {
            SetUserMetadataRequest.encode(v, writer.uint32(186).fork()).join();
        }
        for (const v of message.loginTexts) {
            SetCustomLoginTextsRequest2.encode(v, writer.uint32(194).fork()).join();
        }
        for (const v of message.initMessages) {
            SetCustomInitMessageTextRequest.encode(v, writer.uint32(202).fork()).join();
        }
        for (const v of message.passwordResetMessages) {
            SetCustomPasswordResetMessageTextRequest.encode(v, writer.uint32(210).fork()).join();
        }
        for (const v of message.verifyEmailMessages) {
            SetCustomVerifyEmailMessageTextRequest.encode(v, writer.uint32(218).fork()).join();
        }
        for (const v of message.verifyPhoneMessages) {
            SetCustomVerifyPhoneMessageTextRequest.encode(v, writer.uint32(226).fork()).join();
        }
        for (const v of message.domainClaimedMessages) {
            SetCustomDomainClaimedMessageTextRequest.encode(v, writer.uint32(234).fork()).join();
        }
        for (const v of message.passwordlessRegistrationMessages) {
            SetCustomPasswordlessRegistrationMessageTextRequest.encode(v, writer.uint32(242).fork()).join();
        }
        for (const v of message.oidcIdps) {
            DataOIDCIDP.encode(v, writer.uint32(250).fork()).join();
        }
        for (const v of message.jwtIdps) {
            DataJWTIDP.encode(v, writer.uint32(258).fork()).join();
        }
        for (const v of message.userLinks) {
            IDPUserLink.encode(v, writer.uint32(266).fork()).join();
        }
        for (const v of message.domains) {
            Domain3.encode(v, writer.uint32(274).fork()).join();
        }
        for (const v of message.appKeys) {
            DataAppKey.encode(v, writer.uint32(282).fork()).join();
        }
        for (const v of message.machineKeys) {
            DataMachineKey.encode(v, writer.uint32(290).fork()).join();
        }
        for (const v of message.verifySmsOtpMessages) {
            SetCustomVerifySMSOTPMessageTextRequest.encode(v, writer.uint32(298).fork()).join();
        }
        for (const v of message.verifyEmailOtpMessages) {
            SetCustomVerifyEmailOTPMessageTextRequest.encode(v, writer.uint32(306).fork()).join();
        }
        for (const v of message.inviteUserMessages) {
            SetCustomInviteUserMessageTextRequest.encode(v, writer.uint32(314).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataOrg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.org = AddOrgRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.domainPolicy = AddCustomDomainPolicyRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.labelPolicy = AddCustomLabelPolicyRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.lockoutPolicy = AddCustomLockoutPolicyRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.loginPolicy = AddCustomLoginPolicyRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.passwordComplexityPolicy = AddCustomPasswordComplexityPolicyRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.privacyPolicy = AddCustomPrivacyPolicyRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.projects.push(DataProject.decode(reader, reader.uint32()));
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.projectRoles.push(AddProjectRoleRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.apiApps.push(DataAPIApplication.decode(reader, reader.uint32()));
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.oidcApps.push(DataOIDCApplication.decode(reader, reader.uint32()));
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.humanUsers.push(DataHumanUser.decode(reader, reader.uint32()));
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.machineUsers.push(DataMachineUser.decode(reader, reader.uint32()));
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.triggerActions.push(SetTriggerActionsRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.actions.push(DataAction.decode(reader, reader.uint32()));
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.projectGrants.push(DataProjectGrant.decode(reader, reader.uint32()));
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.userGrants.push(AddUserGrantRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.orgMembers.push(AddOrgMemberRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.projectMembers.push(AddProjectMemberRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.projectGrantMembers.push(AddProjectGrantMemberRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.userMetadata.push(SetUserMetadataRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.loginTexts.push(SetCustomLoginTextsRequest2.decode(reader, reader.uint32()));
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.initMessages.push(SetCustomInitMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 26: {
                    if (tag !== 210) {
                        break;
                    }
                    message.passwordResetMessages.push(SetCustomPasswordResetMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 27: {
                    if (tag !== 218) {
                        break;
                    }
                    message.verifyEmailMessages.push(SetCustomVerifyEmailMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 28: {
                    if (tag !== 226) {
                        break;
                    }
                    message.verifyPhoneMessages.push(SetCustomVerifyPhoneMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 29: {
                    if (tag !== 234) {
                        break;
                    }
                    message.domainClaimedMessages.push(SetCustomDomainClaimedMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.passwordlessRegistrationMessages.push(SetCustomPasswordlessRegistrationMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 31: {
                    if (tag !== 250) {
                        break;
                    }
                    message.oidcIdps.push(DataOIDCIDP.decode(reader, reader.uint32()));
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.jwtIdps.push(DataJWTIDP.decode(reader, reader.uint32()));
                    continue;
                }
                case 33: {
                    if (tag !== 266) {
                        break;
                    }
                    message.userLinks.push(IDPUserLink.decode(reader, reader.uint32()));
                    continue;
                }
                case 34: {
                    if (tag !== 274) {
                        break;
                    }
                    message.domains.push(Domain3.decode(reader, reader.uint32()));
                    continue;
                }
                case 35: {
                    if (tag !== 282) {
                        break;
                    }
                    message.appKeys.push(DataAppKey.decode(reader, reader.uint32()));
                    continue;
                }
                case 36: {
                    if (tag !== 290) {
                        break;
                    }
                    message.machineKeys.push(DataMachineKey.decode(reader, reader.uint32()));
                    continue;
                }
                case 37: {
                    if (tag !== 298) {
                        break;
                    }
                    message.verifySmsOtpMessages.push(SetCustomVerifySMSOTPMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 38: {
                    if (tag !== 306) {
                        break;
                    }
                    message.verifyEmailOtpMessages.push(SetCustomVerifyEmailOTPMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 39: {
                    if (tag !== 314) {
                        break;
                    }
                    message.inviteUserMessages.push(SetCustomInviteUserMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            org: isSet(object.org) ? AddOrgRequest.fromJSON(object.org) : undefined,
            domainPolicy: isSet(object.domainPolicy) ? AddCustomDomainPolicyRequest.fromJSON(object.domainPolicy) : undefined,
            labelPolicy: isSet(object.labelPolicy) ? AddCustomLabelPolicyRequest.fromJSON(object.labelPolicy) : undefined,
            lockoutPolicy: isSet(object.lockoutPolicy)
                ? AddCustomLockoutPolicyRequest.fromJSON(object.lockoutPolicy)
                : undefined,
            loginPolicy: isSet(object.loginPolicy) ? AddCustomLoginPolicyRequest.fromJSON(object.loginPolicy) : undefined,
            passwordComplexityPolicy: isSet(object.passwordComplexityPolicy)
                ? AddCustomPasswordComplexityPolicyRequest.fromJSON(object.passwordComplexityPolicy)
                : undefined,
            privacyPolicy: isSet(object.privacyPolicy)
                ? AddCustomPrivacyPolicyRequest.fromJSON(object.privacyPolicy)
                : undefined,
            projects: globalThis.Array.isArray(object?.projects)
                ? object.projects.map((e) => DataProject.fromJSON(e))
                : [],
            projectRoles: globalThis.Array.isArray(object?.projectRoles)
                ? object.projectRoles.map((e) => AddProjectRoleRequest.fromJSON(e))
                : [],
            apiApps: globalThis.Array.isArray(object?.apiApps)
                ? object.apiApps.map((e) => DataAPIApplication.fromJSON(e))
                : [],
            oidcApps: globalThis.Array.isArray(object?.oidcApps)
                ? object.oidcApps.map((e) => DataOIDCApplication.fromJSON(e))
                : [],
            humanUsers: globalThis.Array.isArray(object?.humanUsers)
                ? object.humanUsers.map((e) => DataHumanUser.fromJSON(e))
                : [],
            machineUsers: globalThis.Array.isArray(object?.machineUsers)
                ? object.machineUsers.map((e) => DataMachineUser.fromJSON(e))
                : [],
            triggerActions: globalThis.Array.isArray(object?.triggerActions)
                ? object.triggerActions.map((e) => SetTriggerActionsRequest.fromJSON(e))
                : [],
            actions: globalThis.Array.isArray(object?.actions)
                ? object.actions.map((e) => DataAction.fromJSON(e))
                : [],
            projectGrants: globalThis.Array.isArray(object?.projectGrants)
                ? object.projectGrants.map((e) => DataProjectGrant.fromJSON(e))
                : [],
            userGrants: globalThis.Array.isArray(object?.userGrants)
                ? object.userGrants.map((e) => AddUserGrantRequest.fromJSON(e))
                : [],
            orgMembers: globalThis.Array.isArray(object?.orgMembers)
                ? object.orgMembers.map((e) => AddOrgMemberRequest.fromJSON(e))
                : [],
            projectMembers: globalThis.Array.isArray(object?.projectMembers)
                ? object.projectMembers.map((e) => AddProjectMemberRequest.fromJSON(e))
                : [],
            projectGrantMembers: globalThis.Array.isArray(object?.projectGrantMembers)
                ? object.projectGrantMembers.map((e) => AddProjectGrantMemberRequest.fromJSON(e))
                : [],
            userMetadata: globalThis.Array.isArray(object?.userMetadata)
                ? object.userMetadata.map((e) => SetUserMetadataRequest.fromJSON(e))
                : [],
            loginTexts: globalThis.Array.isArray(object?.loginTexts)
                ? object.loginTexts.map((e) => SetCustomLoginTextsRequest2.fromJSON(e))
                : [],
            initMessages: globalThis.Array.isArray(object?.initMessages)
                ? object.initMessages.map((e) => SetCustomInitMessageTextRequest.fromJSON(e))
                : [],
            passwordResetMessages: globalThis.Array.isArray(object?.passwordResetMessages)
                ? object.passwordResetMessages.map((e) => SetCustomPasswordResetMessageTextRequest.fromJSON(e))
                : [],
            verifyEmailMessages: globalThis.Array.isArray(object?.verifyEmailMessages)
                ? object.verifyEmailMessages.map((e) => SetCustomVerifyEmailMessageTextRequest.fromJSON(e))
                : [],
            verifyPhoneMessages: globalThis.Array.isArray(object?.verifyPhoneMessages)
                ? object.verifyPhoneMessages.map((e) => SetCustomVerifyPhoneMessageTextRequest.fromJSON(e))
                : [],
            domainClaimedMessages: globalThis.Array.isArray(object?.domainClaimedMessages)
                ? object.domainClaimedMessages.map((e) => SetCustomDomainClaimedMessageTextRequest.fromJSON(e))
                : [],
            passwordlessRegistrationMessages: globalThis.Array.isArray(object?.passwordlessRegistrationMessages)
                ? object.passwordlessRegistrationMessages.map((e) => SetCustomPasswordlessRegistrationMessageTextRequest.fromJSON(e))
                : [],
            oidcIdps: globalThis.Array.isArray(object?.oidcIdps)
                ? object.oidcIdps.map((e) => DataOIDCIDP.fromJSON(e))
                : [],
            jwtIdps: globalThis.Array.isArray(object?.jwtIdps) ? object.jwtIdps.map((e) => DataJWTIDP.fromJSON(e)) : [],
            userLinks: globalThis.Array.isArray(object?.userLinks)
                ? object.userLinks.map((e) => IDPUserLink.fromJSON(e))
                : [],
            domains: globalThis.Array.isArray(object?.domains) ? object.domains.map((e) => Domain3.fromJSON(e)) : [],
            appKeys: globalThis.Array.isArray(object?.appKeys) ? object.appKeys.map((e) => DataAppKey.fromJSON(e)) : [],
            machineKeys: globalThis.Array.isArray(object?.machineKeys)
                ? object.machineKeys.map((e) => DataMachineKey.fromJSON(e))
                : [],
            verifySmsOtpMessages: globalThis.Array.isArray(object?.verifySmsOtpMessages)
                ? object.verifySmsOtpMessages.map((e) => SetCustomVerifySMSOTPMessageTextRequest.fromJSON(e))
                : [],
            verifyEmailOtpMessages: globalThis.Array.isArray(object?.verifyEmailOtpMessages)
                ? object.verifyEmailOtpMessages.map((e) => SetCustomVerifyEmailOTPMessageTextRequest.fromJSON(e))
                : [],
            inviteUserMessages: globalThis.Array.isArray(object?.inviteUserMessages)
                ? object.inviteUserMessages.map((e) => SetCustomInviteUserMessageTextRequest.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.org !== undefined) {
            obj.org = AddOrgRequest.toJSON(message.org);
        }
        if (message.domainPolicy !== undefined) {
            obj.domainPolicy = AddCustomDomainPolicyRequest.toJSON(message.domainPolicy);
        }
        if (message.labelPolicy !== undefined) {
            obj.labelPolicy = AddCustomLabelPolicyRequest.toJSON(message.labelPolicy);
        }
        if (message.lockoutPolicy !== undefined) {
            obj.lockoutPolicy = AddCustomLockoutPolicyRequest.toJSON(message.lockoutPolicy);
        }
        if (message.loginPolicy !== undefined) {
            obj.loginPolicy = AddCustomLoginPolicyRequest.toJSON(message.loginPolicy);
        }
        if (message.passwordComplexityPolicy !== undefined) {
            obj.passwordComplexityPolicy = AddCustomPasswordComplexityPolicyRequest.toJSON(message.passwordComplexityPolicy);
        }
        if (message.privacyPolicy !== undefined) {
            obj.privacyPolicy = AddCustomPrivacyPolicyRequest.toJSON(message.privacyPolicy);
        }
        if (message.projects?.length) {
            obj.projects = message.projects.map((e) => DataProject.toJSON(e));
        }
        if (message.projectRoles?.length) {
            obj.projectRoles = message.projectRoles.map((e) => AddProjectRoleRequest.toJSON(e));
        }
        if (message.apiApps?.length) {
            obj.apiApps = message.apiApps.map((e) => DataAPIApplication.toJSON(e));
        }
        if (message.oidcApps?.length) {
            obj.oidcApps = message.oidcApps.map((e) => DataOIDCApplication.toJSON(e));
        }
        if (message.humanUsers?.length) {
            obj.humanUsers = message.humanUsers.map((e) => DataHumanUser.toJSON(e));
        }
        if (message.machineUsers?.length) {
            obj.machineUsers = message.machineUsers.map((e) => DataMachineUser.toJSON(e));
        }
        if (message.triggerActions?.length) {
            obj.triggerActions = message.triggerActions.map((e) => SetTriggerActionsRequest.toJSON(e));
        }
        if (message.actions?.length) {
            obj.actions = message.actions.map((e) => DataAction.toJSON(e));
        }
        if (message.projectGrants?.length) {
            obj.projectGrants = message.projectGrants.map((e) => DataProjectGrant.toJSON(e));
        }
        if (message.userGrants?.length) {
            obj.userGrants = message.userGrants.map((e) => AddUserGrantRequest.toJSON(e));
        }
        if (message.orgMembers?.length) {
            obj.orgMembers = message.orgMembers.map((e) => AddOrgMemberRequest.toJSON(e));
        }
        if (message.projectMembers?.length) {
            obj.projectMembers = message.projectMembers.map((e) => AddProjectMemberRequest.toJSON(e));
        }
        if (message.projectGrantMembers?.length) {
            obj.projectGrantMembers = message.projectGrantMembers.map((e) => AddProjectGrantMemberRequest.toJSON(e));
        }
        if (message.userMetadata?.length) {
            obj.userMetadata = message.userMetadata.map((e) => SetUserMetadataRequest.toJSON(e));
        }
        if (message.loginTexts?.length) {
            obj.loginTexts = message.loginTexts.map((e) => SetCustomLoginTextsRequest2.toJSON(e));
        }
        if (message.initMessages?.length) {
            obj.initMessages = message.initMessages.map((e) => SetCustomInitMessageTextRequest.toJSON(e));
        }
        if (message.passwordResetMessages?.length) {
            obj.passwordResetMessages = message.passwordResetMessages.map((e) => SetCustomPasswordResetMessageTextRequest.toJSON(e));
        }
        if (message.verifyEmailMessages?.length) {
            obj.verifyEmailMessages = message.verifyEmailMessages.map((e) => SetCustomVerifyEmailMessageTextRequest.toJSON(e));
        }
        if (message.verifyPhoneMessages?.length) {
            obj.verifyPhoneMessages = message.verifyPhoneMessages.map((e) => SetCustomVerifyPhoneMessageTextRequest.toJSON(e));
        }
        if (message.domainClaimedMessages?.length) {
            obj.domainClaimedMessages = message.domainClaimedMessages.map((e) => SetCustomDomainClaimedMessageTextRequest.toJSON(e));
        }
        if (message.passwordlessRegistrationMessages?.length) {
            obj.passwordlessRegistrationMessages = message.passwordlessRegistrationMessages.map((e) => SetCustomPasswordlessRegistrationMessageTextRequest.toJSON(e));
        }
        if (message.oidcIdps?.length) {
            obj.oidcIdps = message.oidcIdps.map((e) => DataOIDCIDP.toJSON(e));
        }
        if (message.jwtIdps?.length) {
            obj.jwtIdps = message.jwtIdps.map((e) => DataJWTIDP.toJSON(e));
        }
        if (message.userLinks?.length) {
            obj.userLinks = message.userLinks.map((e) => IDPUserLink.toJSON(e));
        }
        if (message.domains?.length) {
            obj.domains = message.domains.map((e) => Domain3.toJSON(e));
        }
        if (message.appKeys?.length) {
            obj.appKeys = message.appKeys.map((e) => DataAppKey.toJSON(e));
        }
        if (message.machineKeys?.length) {
            obj.machineKeys = message.machineKeys.map((e) => DataMachineKey.toJSON(e));
        }
        if (message.verifySmsOtpMessages?.length) {
            obj.verifySmsOtpMessages = message.verifySmsOtpMessages.map((e) => SetCustomVerifySMSOTPMessageTextRequest.toJSON(e));
        }
        if (message.verifyEmailOtpMessages?.length) {
            obj.verifyEmailOtpMessages = message.verifyEmailOtpMessages.map((e) => SetCustomVerifyEmailOTPMessageTextRequest.toJSON(e));
        }
        if (message.inviteUserMessages?.length) {
            obj.inviteUserMessages = message.inviteUserMessages.map((e) => SetCustomInviteUserMessageTextRequest.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return DataOrg.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDataOrg();
        message.orgId = object.orgId ?? "";
        message.org = (object.org !== undefined && object.org !== null) ? AddOrgRequest.fromPartial(object.org) : undefined;
        message.domainPolicy = (object.domainPolicy !== undefined && object.domainPolicy !== null)
            ? AddCustomDomainPolicyRequest.fromPartial(object.domainPolicy)
            : undefined;
        message.labelPolicy = (object.labelPolicy !== undefined && object.labelPolicy !== null)
            ? AddCustomLabelPolicyRequest.fromPartial(object.labelPolicy)
            : undefined;
        message.lockoutPolicy = (object.lockoutPolicy !== undefined && object.lockoutPolicy !== null)
            ? AddCustomLockoutPolicyRequest.fromPartial(object.lockoutPolicy)
            : undefined;
        message.loginPolicy = (object.loginPolicy !== undefined && object.loginPolicy !== null)
            ? AddCustomLoginPolicyRequest.fromPartial(object.loginPolicy)
            : undefined;
        message.passwordComplexityPolicy =
            (object.passwordComplexityPolicy !== undefined && object.passwordComplexityPolicy !== null)
                ? AddCustomPasswordComplexityPolicyRequest.fromPartial(object.passwordComplexityPolicy)
                : undefined;
        message.privacyPolicy = (object.privacyPolicy !== undefined && object.privacyPolicy !== null)
            ? AddCustomPrivacyPolicyRequest.fromPartial(object.privacyPolicy)
            : undefined;
        message.projects = object.projects?.map((e) => DataProject.fromPartial(e)) || [];
        message.projectRoles = object.projectRoles?.map((e) => AddProjectRoleRequest.fromPartial(e)) || [];
        message.apiApps = object.apiApps?.map((e) => DataAPIApplication.fromPartial(e)) || [];
        message.oidcApps = object.oidcApps?.map((e) => DataOIDCApplication.fromPartial(e)) || [];
        message.humanUsers = object.humanUsers?.map((e) => DataHumanUser.fromPartial(e)) || [];
        message.machineUsers = object.machineUsers?.map((e) => DataMachineUser.fromPartial(e)) || [];
        message.triggerActions = object.triggerActions?.map((e) => SetTriggerActionsRequest.fromPartial(e)) || [];
        message.actions = object.actions?.map((e) => DataAction.fromPartial(e)) || [];
        message.projectGrants = object.projectGrants?.map((e) => DataProjectGrant.fromPartial(e)) || [];
        message.userGrants = object.userGrants?.map((e) => AddUserGrantRequest.fromPartial(e)) || [];
        message.orgMembers = object.orgMembers?.map((e) => AddOrgMemberRequest.fromPartial(e)) || [];
        message.projectMembers = object.projectMembers?.map((e) => AddProjectMemberRequest.fromPartial(e)) || [];
        message.projectGrantMembers = object.projectGrantMembers?.map((e) => AddProjectGrantMemberRequest.fromPartial(e)) ||
            [];
        message.userMetadata = object.userMetadata?.map((e) => SetUserMetadataRequest.fromPartial(e)) || [];
        message.loginTexts = object.loginTexts?.map((e) => SetCustomLoginTextsRequest2.fromPartial(e)) || [];
        message.initMessages = object.initMessages?.map((e) => SetCustomInitMessageTextRequest.fromPartial(e)) || [];
        message.passwordResetMessages =
            object.passwordResetMessages?.map((e) => SetCustomPasswordResetMessageTextRequest.fromPartial(e)) || [];
        message.verifyEmailMessages =
            object.verifyEmailMessages?.map((e) => SetCustomVerifyEmailMessageTextRequest.fromPartial(e)) || [];
        message.verifyPhoneMessages =
            object.verifyPhoneMessages?.map((e) => SetCustomVerifyPhoneMessageTextRequest.fromPartial(e)) || [];
        message.domainClaimedMessages =
            object.domainClaimedMessages?.map((e) => SetCustomDomainClaimedMessageTextRequest.fromPartial(e)) || [];
        message.passwordlessRegistrationMessages =
            object.passwordlessRegistrationMessages?.map((e) => SetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(e)) || [];
        message.oidcIdps = object.oidcIdps?.map((e) => DataOIDCIDP.fromPartial(e)) || [];
        message.jwtIdps = object.jwtIdps?.map((e) => DataJWTIDP.fromPartial(e)) || [];
        message.userLinks = object.userLinks?.map((e) => IDPUserLink.fromPartial(e)) || [];
        message.domains = object.domains?.map((e) => Domain3.fromPartial(e)) || [];
        message.appKeys = object.appKeys?.map((e) => DataAppKey.fromPartial(e)) || [];
        message.machineKeys = object.machineKeys?.map((e) => DataMachineKey.fromPartial(e)) || [];
        message.verifySmsOtpMessages =
            object.verifySmsOtpMessages?.map((e) => SetCustomVerifySMSOTPMessageTextRequest.fromPartial(e)) || [];
        message.verifyEmailOtpMessages =
            object.verifyEmailOtpMessages?.map((e) => SetCustomVerifyEmailOTPMessageTextRequest.fromPartial(e)) || [];
        message.inviteUserMessages =
            object.inviteUserMessages?.map((e) => SetCustomInviteUserMessageTextRequest.fromPartial(e)) || [];
        return message;
    },
};
function createBaseImportDataResponse() {
    return { errors: [], success: undefined };
}
export const ImportDataResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.errors) {
            ImportDataError.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.success !== undefined) {
            ImportDataSuccess.encode(message.success, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.errors.push(ImportDataError.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.success = ImportDataSuccess.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            errors: globalThis.Array.isArray(object?.errors)
                ? object.errors.map((e) => ImportDataError.fromJSON(e))
                : [],
            success: isSet(object.success) ? ImportDataSuccess.fromJSON(object.success) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.errors?.length) {
            obj.errors = message.errors.map((e) => ImportDataError.toJSON(e));
        }
        if (message.success !== undefined) {
            obj.success = ImportDataSuccess.toJSON(message.success);
        }
        return obj;
    },
    create(base) {
        return ImportDataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataResponse();
        message.errors = object.errors?.map((e) => ImportDataError.fromPartial(e)) || [];
        message.success = (object.success !== undefined && object.success !== null)
            ? ImportDataSuccess.fromPartial(object.success)
            : undefined;
        return message;
    },
};
function createBaseImportDataError() {
    return { type: "", id: "", message: "" };
}
export const ImportDataError = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.message !== "") {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            message: isSet(object.message) ? globalThis.String(object.message) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return ImportDataError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataError();
        message.type = object.type ?? "";
        message.id = object.id ?? "";
        message.message = object.message ?? "";
        return message;
    },
};
function createBaseImportDataSuccess() {
    return { orgs: [] };
}
export const ImportDataSuccess = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.orgs) {
            ImportDataSuccessOrg.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccess();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgs.push(ImportDataSuccessOrg.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgs: globalThis.Array.isArray(object?.orgs) ? object.orgs.map((e) => ImportDataSuccessOrg.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgs?.length) {
            obj.orgs = message.orgs.map((e) => ImportDataSuccessOrg.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ImportDataSuccess.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataSuccess();
        message.orgs = object.orgs?.map((e) => ImportDataSuccessOrg.fromPartial(e)) || [];
        return message;
    },
};
function createBaseImportDataSuccessOrg() {
    return {
        orgId: "",
        projectIds: [],
        projectRoles: [],
        oidcAppIds: [],
        apiAppIds: [],
        humanUserIds: [],
        machineUserIds: [],
        actionIds: [],
        triggerActions: [],
        projectGrants: [],
        userGrants: [],
        orgMembers: [],
        projectMembers: [],
        projectGrantMembers: [],
        oidcIpds: [],
        jwtIdps: [],
        idpLinks: [],
        userLinks: [],
        userMetadata: [],
        domains: [],
        appKeys: [],
        machineKeys: [],
    };
}
export const ImportDataSuccessOrg = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        for (const v of message.projectIds) {
            writer.uint32(18).string(v);
        }
        for (const v of message.projectRoles) {
            writer.uint32(26).string(v);
        }
        for (const v of message.oidcAppIds) {
            writer.uint32(34).string(v);
        }
        for (const v of message.apiAppIds) {
            writer.uint32(42).string(v);
        }
        for (const v of message.humanUserIds) {
            writer.uint32(50).string(v);
        }
        for (const v of message.machineUserIds) {
            writer.uint32(58).string(v);
        }
        for (const v of message.actionIds) {
            writer.uint32(66).string(v);
        }
        for (const v of message.triggerActions) {
            SetTriggerActionsRequest.encode(v, writer.uint32(74).fork()).join();
        }
        for (const v of message.projectGrants) {
            ImportDataSuccessProjectGrant.encode(v, writer.uint32(82).fork()).join();
        }
        for (const v of message.userGrants) {
            ImportDataSuccessUserGrant.encode(v, writer.uint32(90).fork()).join();
        }
        for (const v of message.orgMembers) {
            writer.uint32(98).string(v);
        }
        for (const v of message.projectMembers) {
            ImportDataSuccessProjectMember.encode(v, writer.uint32(106).fork()).join();
        }
        for (const v of message.projectGrantMembers) {
            ImportDataSuccessProjectGrantMember.encode(v, writer.uint32(114).fork()).join();
        }
        for (const v of message.oidcIpds) {
            writer.uint32(122).string(v);
        }
        for (const v of message.jwtIdps) {
            writer.uint32(130).string(v);
        }
        for (const v of message.idpLinks) {
            writer.uint32(138).string(v);
        }
        for (const v of message.userLinks) {
            ImportDataSuccessUserLinks.encode(v, writer.uint32(146).fork()).join();
        }
        for (const v of message.userMetadata) {
            ImportDataSuccessUserMetadata.encode(v, writer.uint32(154).fork()).join();
        }
        for (const v of message.domains) {
            writer.uint32(162).string(v);
        }
        for (const v of message.appKeys) {
            writer.uint32(170).string(v);
        }
        for (const v of message.machineKeys) {
            writer.uint32(178).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessOrg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.projectIds.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.projectRoles.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.oidcAppIds.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.apiAppIds.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.humanUserIds.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.machineUserIds.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.actionIds.push(reader.string());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.triggerActions.push(SetTriggerActionsRequest.decode(reader, reader.uint32()));
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.projectGrants.push(ImportDataSuccessProjectGrant.decode(reader, reader.uint32()));
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.userGrants.push(ImportDataSuccessUserGrant.decode(reader, reader.uint32()));
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.orgMembers.push(reader.string());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.projectMembers.push(ImportDataSuccessProjectMember.decode(reader, reader.uint32()));
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.projectGrantMembers.push(ImportDataSuccessProjectGrantMember.decode(reader, reader.uint32()));
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.oidcIpds.push(reader.string());
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.jwtIdps.push(reader.string());
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.idpLinks.push(reader.string());
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.userLinks.push(ImportDataSuccessUserLinks.decode(reader, reader.uint32()));
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.userMetadata.push(ImportDataSuccessUserMetadata.decode(reader, reader.uint32()));
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.domains.push(reader.string());
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.appKeys.push(reader.string());
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.machineKeys.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            projectIds: globalThis.Array.isArray(object?.projectIds)
                ? object.projectIds.map((e) => globalThis.String(e))
                : [],
            projectRoles: globalThis.Array.isArray(object?.projectRoles)
                ? object.projectRoles.map((e) => globalThis.String(e))
                : [],
            oidcAppIds: globalThis.Array.isArray(object?.oidcAppIds)
                ? object.oidcAppIds.map((e) => globalThis.String(e))
                : [],
            apiAppIds: globalThis.Array.isArray(object?.apiAppIds)
                ? object.apiAppIds.map((e) => globalThis.String(e))
                : [],
            humanUserIds: globalThis.Array.isArray(object?.humanUserIds)
                ? object.humanUserIds.map((e) => globalThis.String(e))
                : [],
            machineUserIds: globalThis.Array.isArray(object?.machineUserIds)
                ? object.machineUserIds.map((e) => globalThis.String(e))
                : [],
            actionIds: globalThis.Array.isArray(object?.actionIds)
                ? object.actionIds.map((e) => globalThis.String(e))
                : [],
            triggerActions: globalThis.Array.isArray(object?.triggerActions)
                ? object.triggerActions.map((e) => SetTriggerActionsRequest.fromJSON(e))
                : [],
            projectGrants: globalThis.Array.isArray(object?.projectGrants)
                ? object.projectGrants.map((e) => ImportDataSuccessProjectGrant.fromJSON(e))
                : [],
            userGrants: globalThis.Array.isArray(object?.userGrants)
                ? object.userGrants.map((e) => ImportDataSuccessUserGrant.fromJSON(e))
                : [],
            orgMembers: globalThis.Array.isArray(object?.orgMembers)
                ? object.orgMembers.map((e) => globalThis.String(e))
                : [],
            projectMembers: globalThis.Array.isArray(object?.projectMembers)
                ? object.projectMembers.map((e) => ImportDataSuccessProjectMember.fromJSON(e))
                : [],
            projectGrantMembers: globalThis.Array.isArray(object?.projectGrantMembers)
                ? object.projectGrantMembers.map((e) => ImportDataSuccessProjectGrantMember.fromJSON(e))
                : [],
            oidcIpds: globalThis.Array.isArray(object?.oidcIpds) ? object.oidcIpds.map((e) => globalThis.String(e)) : [],
            jwtIdps: globalThis.Array.isArray(object?.jwtIdps) ? object.jwtIdps.map((e) => globalThis.String(e)) : [],
            idpLinks: globalThis.Array.isArray(object?.idpLinks) ? object.idpLinks.map((e) => globalThis.String(e)) : [],
            userLinks: globalThis.Array.isArray(object?.userLinks)
                ? object.userLinks.map((e) => ImportDataSuccessUserLinks.fromJSON(e))
                : [],
            userMetadata: globalThis.Array.isArray(object?.userMetadata)
                ? object.userMetadata.map((e) => ImportDataSuccessUserMetadata.fromJSON(e))
                : [],
            domains: globalThis.Array.isArray(object?.domains)
                ? object.domains.map((e) => globalThis.String(e))
                : [],
            appKeys: globalThis.Array.isArray(object?.appKeys) ? object.appKeys.map((e) => globalThis.String(e)) : [],
            machineKeys: globalThis.Array.isArray(object?.machineKeys)
                ? object.machineKeys.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.projectIds?.length) {
            obj.projectIds = message.projectIds;
        }
        if (message.projectRoles?.length) {
            obj.projectRoles = message.projectRoles;
        }
        if (message.oidcAppIds?.length) {
            obj.oidcAppIds = message.oidcAppIds;
        }
        if (message.apiAppIds?.length) {
            obj.apiAppIds = message.apiAppIds;
        }
        if (message.humanUserIds?.length) {
            obj.humanUserIds = message.humanUserIds;
        }
        if (message.machineUserIds?.length) {
            obj.machineUserIds = message.machineUserIds;
        }
        if (message.actionIds?.length) {
            obj.actionIds = message.actionIds;
        }
        if (message.triggerActions?.length) {
            obj.triggerActions = message.triggerActions.map((e) => SetTriggerActionsRequest.toJSON(e));
        }
        if (message.projectGrants?.length) {
            obj.projectGrants = message.projectGrants.map((e) => ImportDataSuccessProjectGrant.toJSON(e));
        }
        if (message.userGrants?.length) {
            obj.userGrants = message.userGrants.map((e) => ImportDataSuccessUserGrant.toJSON(e));
        }
        if (message.orgMembers?.length) {
            obj.orgMembers = message.orgMembers;
        }
        if (message.projectMembers?.length) {
            obj.projectMembers = message.projectMembers.map((e) => ImportDataSuccessProjectMember.toJSON(e));
        }
        if (message.projectGrantMembers?.length) {
            obj.projectGrantMembers = message.projectGrantMembers.map((e) => ImportDataSuccessProjectGrantMember.toJSON(e));
        }
        if (message.oidcIpds?.length) {
            obj.oidcIpds = message.oidcIpds;
        }
        if (message.jwtIdps?.length) {
            obj.jwtIdps = message.jwtIdps;
        }
        if (message.idpLinks?.length) {
            obj.idpLinks = message.idpLinks;
        }
        if (message.userLinks?.length) {
            obj.userLinks = message.userLinks.map((e) => ImportDataSuccessUserLinks.toJSON(e));
        }
        if (message.userMetadata?.length) {
            obj.userMetadata = message.userMetadata.map((e) => ImportDataSuccessUserMetadata.toJSON(e));
        }
        if (message.domains?.length) {
            obj.domains = message.domains;
        }
        if (message.appKeys?.length) {
            obj.appKeys = message.appKeys;
        }
        if (message.machineKeys?.length) {
            obj.machineKeys = message.machineKeys;
        }
        return obj;
    },
    create(base) {
        return ImportDataSuccessOrg.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataSuccessOrg();
        message.orgId = object.orgId ?? "";
        message.projectIds = object.projectIds?.map((e) => e) || [];
        message.projectRoles = object.projectRoles?.map((e) => e) || [];
        message.oidcAppIds = object.oidcAppIds?.map((e) => e) || [];
        message.apiAppIds = object.apiAppIds?.map((e) => e) || [];
        message.humanUserIds = object.humanUserIds?.map((e) => e) || [];
        message.machineUserIds = object.machineUserIds?.map((e) => e) || [];
        message.actionIds = object.actionIds?.map((e) => e) || [];
        message.triggerActions = object.triggerActions?.map((e) => SetTriggerActionsRequest.fromPartial(e)) || [];
        message.projectGrants = object.projectGrants?.map((e) => ImportDataSuccessProjectGrant.fromPartial(e)) || [];
        message.userGrants = object.userGrants?.map((e) => ImportDataSuccessUserGrant.fromPartial(e)) || [];
        message.orgMembers = object.orgMembers?.map((e) => e) || [];
        message.projectMembers = object.projectMembers?.map((e) => ImportDataSuccessProjectMember.fromPartial(e)) || [];
        message.projectGrantMembers =
            object.projectGrantMembers?.map((e) => ImportDataSuccessProjectGrantMember.fromPartial(e)) || [];
        message.oidcIpds = object.oidcIpds?.map((e) => e) || [];
        message.jwtIdps = object.jwtIdps?.map((e) => e) || [];
        message.idpLinks = object.idpLinks?.map((e) => e) || [];
        message.userLinks = object.userLinks?.map((e) => ImportDataSuccessUserLinks.fromPartial(e)) || [];
        message.userMetadata = object.userMetadata?.map((e) => ImportDataSuccessUserMetadata.fromPartial(e)) || [];
        message.domains = object.domains?.map((e) => e) || [];
        message.appKeys = object.appKeys?.map((e) => e) || [];
        message.machineKeys = object.machineKeys?.map((e) => e) || [];
        return message;
    },
};
function createBaseImportDataSuccessProjectGrant() {
    return { grantId: "", projectId: "", orgId: "" };
}
export const ImportDataSuccessProjectGrant = {
    encode(message, writer = new BinaryWriter()) {
        if (message.grantId !== "") {
            writer.uint32(10).string(message.grantId);
        }
        if (message.projectId !== "") {
            writer.uint32(18).string(message.projectId);
        }
        if (message.orgId !== "") {
            writer.uint32(26).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessProjectGrant();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.grantId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.projectId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            grantId: isSet(object.grantId) ? globalThis.String(object.grantId) : "",
            projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.grantId !== "") {
            obj.grantId = message.grantId;
        }
        if (message.projectId !== "") {
            obj.projectId = message.projectId;
        }
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return ImportDataSuccessProjectGrant.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataSuccessProjectGrant();
        message.grantId = object.grantId ?? "";
        message.projectId = object.projectId ?? "";
        message.orgId = object.orgId ?? "";
        return message;
    },
};
function createBaseImportDataSuccessUserGrant() {
    return { projectId: "", userId: "" };
}
export const ImportDataSuccessUserGrant = {
    encode(message, writer = new BinaryWriter()) {
        if (message.projectId !== "") {
            writer.uint32(10).string(message.projectId);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessUserGrant();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.projectId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.projectId !== "") {
            obj.projectId = message.projectId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return ImportDataSuccessUserGrant.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataSuccessUserGrant();
        message.projectId = object.projectId ?? "";
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseImportDataSuccessProjectMember() {
    return { projectId: "", userId: "" };
}
export const ImportDataSuccessProjectMember = {
    encode(message, writer = new BinaryWriter()) {
        if (message.projectId !== "") {
            writer.uint32(10).string(message.projectId);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessProjectMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.projectId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.projectId !== "") {
            obj.projectId = message.projectId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return ImportDataSuccessProjectMember.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataSuccessProjectMember();
        message.projectId = object.projectId ?? "";
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseImportDataSuccessProjectGrantMember() {
    return { projectId: "", grantId: "", userId: "" };
}
export const ImportDataSuccessProjectGrantMember = {
    encode(message, writer = new BinaryWriter()) {
        if (message.projectId !== "") {
            writer.uint32(10).string(message.projectId);
        }
        if (message.grantId !== "") {
            writer.uint32(18).string(message.grantId);
        }
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessProjectGrantMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.projectId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.grantId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
            grantId: isSet(object.grantId) ? globalThis.String(object.grantId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.projectId !== "") {
            obj.projectId = message.projectId;
        }
        if (message.grantId !== "") {
            obj.grantId = message.grantId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return ImportDataSuccessProjectGrantMember.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataSuccessProjectGrantMember();
        message.projectId = object.projectId ?? "";
        message.grantId = object.grantId ?? "";
        message.userId = object.userId ?? "";
        return message;
    },
};
function createBaseImportDataSuccessUserLinks() {
    return { userId: "", externalUserId: "", displayName: "", idpId: "" };
}
export const ImportDataSuccessUserLinks = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.externalUserId !== "") {
            writer.uint32(18).string(message.externalUserId);
        }
        if (message.displayName !== "") {
            writer.uint32(26).string(message.displayName);
        }
        if (message.idpId !== "") {
            writer.uint32(34).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessUserLinks();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.externalUserId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            externalUserId: isSet(object.externalUserId) ? globalThis.String(object.externalUserId) : "",
            displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
            idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.externalUserId !== "") {
            obj.externalUserId = message.externalUserId;
        }
        if (message.displayName !== "") {
            obj.displayName = message.displayName;
        }
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return ImportDataSuccessUserLinks.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataSuccessUserLinks();
        message.userId = object.userId ?? "";
        message.externalUserId = object.externalUserId ?? "";
        message.displayName = object.displayName ?? "";
        message.idpId = object.idpId ?? "";
        return message;
    },
};
function createBaseImportDataSuccessUserMetadata() {
    return { userId: "", key: "" };
}
export const ImportDataSuccessUserMetadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.key !== "") {
            writer.uint32(18).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessUserMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            key: isSet(object.key) ? globalThis.String(object.key) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.key !== "") {
            obj.key = message.key;
        }
        return obj;
    },
    create(base) {
        return ImportDataSuccessUserMetadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImportDataSuccessUserMetadata();
        message.userId = object.userId ?? "";
        message.key = object.key ?? "";
        return message;
    },
};
function createBaseExportDataRequest() {
    return {
        orgIds: [],
        excludedOrgIds: [],
        withPasswords: false,
        withOtp: false,
        responseOutput: false,
        localOutput: undefined,
        s3Output: undefined,
        gcsOutput: undefined,
        timeout: "",
    };
}
export const ExportDataRequest = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.orgIds) {
            writer.uint32(10).string(v);
        }
        for (const v of message.excludedOrgIds) {
            writer.uint32(18).string(v);
        }
        if (message.withPasswords !== false) {
            writer.uint32(24).bool(message.withPasswords);
        }
        if (message.withOtp !== false) {
            writer.uint32(32).bool(message.withOtp);
        }
        if (message.responseOutput !== false) {
            writer.uint32(40).bool(message.responseOutput);
        }
        if (message.localOutput !== undefined) {
            ExportDataRequest_LocalOutput.encode(message.localOutput, writer.uint32(50).fork()).join();
        }
        if (message.s3Output !== undefined) {
            ExportDataRequest_S3Output.encode(message.s3Output, writer.uint32(58).fork()).join();
        }
        if (message.gcsOutput !== undefined) {
            ExportDataRequest_GCSOutput.encode(message.gcsOutput, writer.uint32(66).fork()).join();
        }
        if (message.timeout !== "") {
            writer.uint32(74).string(message.timeout);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgIds.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.excludedOrgIds.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.withPasswords = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.withOtp = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.responseOutput = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.localOutput = ExportDataRequest_LocalOutput.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.s3Output = ExportDataRequest_S3Output.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.gcsOutput = ExportDataRequest_GCSOutput.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.timeout = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgIds: globalThis.Array.isArray(object?.orgIds) ? object.orgIds.map((e) => globalThis.String(e)) : [],
            excludedOrgIds: globalThis.Array.isArray(object?.excludedOrgIds)
                ? object.excludedOrgIds.map((e) => globalThis.String(e))
                : [],
            withPasswords: isSet(object.withPasswords) ? globalThis.Boolean(object.withPasswords) : false,
            withOtp: isSet(object.withOtp) ? globalThis.Boolean(object.withOtp) : false,
            responseOutput: isSet(object.responseOutput) ? globalThis.Boolean(object.responseOutput) : false,
            localOutput: isSet(object.localOutput) ? ExportDataRequest_LocalOutput.fromJSON(object.localOutput) : undefined,
            s3Output: isSet(object.s3Output) ? ExportDataRequest_S3Output.fromJSON(object.s3Output) : undefined,
            gcsOutput: isSet(object.gcsOutput) ? ExportDataRequest_GCSOutput.fromJSON(object.gcsOutput) : undefined,
            timeout: isSet(object.timeout) ? globalThis.String(object.timeout) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgIds?.length) {
            obj.orgIds = message.orgIds;
        }
        if (message.excludedOrgIds?.length) {
            obj.excludedOrgIds = message.excludedOrgIds;
        }
        if (message.withPasswords !== false) {
            obj.withPasswords = message.withPasswords;
        }
        if (message.withOtp !== false) {
            obj.withOtp = message.withOtp;
        }
        if (message.responseOutput !== false) {
            obj.responseOutput = message.responseOutput;
        }
        if (message.localOutput !== undefined) {
            obj.localOutput = ExportDataRequest_LocalOutput.toJSON(message.localOutput);
        }
        if (message.s3Output !== undefined) {
            obj.s3Output = ExportDataRequest_S3Output.toJSON(message.s3Output);
        }
        if (message.gcsOutput !== undefined) {
            obj.gcsOutput = ExportDataRequest_GCSOutput.toJSON(message.gcsOutput);
        }
        if (message.timeout !== "") {
            obj.timeout = message.timeout;
        }
        return obj;
    },
    create(base) {
        return ExportDataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExportDataRequest();
        message.orgIds = object.orgIds?.map((e) => e) || [];
        message.excludedOrgIds = object.excludedOrgIds?.map((e) => e) || [];
        message.withPasswords = object.withPasswords ?? false;
        message.withOtp = object.withOtp ?? false;
        message.responseOutput = object.responseOutput ?? false;
        message.localOutput = (object.localOutput !== undefined && object.localOutput !== null)
            ? ExportDataRequest_LocalOutput.fromPartial(object.localOutput)
            : undefined;
        message.s3Output = (object.s3Output !== undefined && object.s3Output !== null)
            ? ExportDataRequest_S3Output.fromPartial(object.s3Output)
            : undefined;
        message.gcsOutput = (object.gcsOutput !== undefined && object.gcsOutput !== null)
            ? ExportDataRequest_GCSOutput.fromPartial(object.gcsOutput)
            : undefined;
        message.timeout = object.timeout ?? "";
        return message;
    },
};
function createBaseExportDataRequest_LocalOutput() {
    return { path: "" };
}
export const ExportDataRequest_LocalOutput = {
    encode(message, writer = new BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportDataRequest_LocalOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { path: isSet(object.path) ? globalThis.String(object.path) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        return obj;
    },
    create(base) {
        return ExportDataRequest_LocalOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExportDataRequest_LocalOutput();
        message.path = object.path ?? "";
        return message;
    },
};
function createBaseExportDataRequest_S3Output() {
    return { path: "", endpoint: "", accessKeyId: "", secretAccessKey: "", ssl: false, bucket: "" };
}
export const ExportDataRequest_S3Output = {
    encode(message, writer = new BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        if (message.endpoint !== "") {
            writer.uint32(18).string(message.endpoint);
        }
        if (message.accessKeyId !== "") {
            writer.uint32(26).string(message.accessKeyId);
        }
        if (message.secretAccessKey !== "") {
            writer.uint32(34).string(message.secretAccessKey);
        }
        if (message.ssl !== false) {
            writer.uint32(40).bool(message.ssl);
        }
        if (message.bucket !== "") {
            writer.uint32(50).string(message.bucket);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportDataRequest_S3Output();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.accessKeyId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.secretAccessKey = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.ssl = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.bucket = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            path: isSet(object.path) ? globalThis.String(object.path) : "",
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
            accessKeyId: isSet(object.accessKeyId) ? globalThis.String(object.accessKeyId) : "",
            secretAccessKey: isSet(object.secretAccessKey) ? globalThis.String(object.secretAccessKey) : "",
            ssl: isSet(object.ssl) ? globalThis.Boolean(object.ssl) : false,
            bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.endpoint !== "") {
            obj.endpoint = message.endpoint;
        }
        if (message.accessKeyId !== "") {
            obj.accessKeyId = message.accessKeyId;
        }
        if (message.secretAccessKey !== "") {
            obj.secretAccessKey = message.secretAccessKey;
        }
        if (message.ssl !== false) {
            obj.ssl = message.ssl;
        }
        if (message.bucket !== "") {
            obj.bucket = message.bucket;
        }
        return obj;
    },
    create(base) {
        return ExportDataRequest_S3Output.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExportDataRequest_S3Output();
        message.path = object.path ?? "";
        message.endpoint = object.endpoint ?? "";
        message.accessKeyId = object.accessKeyId ?? "";
        message.secretAccessKey = object.secretAccessKey ?? "";
        message.ssl = object.ssl ?? false;
        message.bucket = object.bucket ?? "";
        return message;
    },
};
function createBaseExportDataRequest_GCSOutput() {
    return { bucket: "", serviceaccountJson: "", path: "" };
}
export const ExportDataRequest_GCSOutput = {
    encode(message, writer = new BinaryWriter()) {
        if (message.bucket !== "") {
            writer.uint32(10).string(message.bucket);
        }
        if (message.serviceaccountJson !== "") {
            writer.uint32(18).string(message.serviceaccountJson);
        }
        if (message.path !== "") {
            writer.uint32(26).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportDataRequest_GCSOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.bucket = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.serviceaccountJson = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
            serviceaccountJson: isSet(object.serviceaccountJson) ? globalThis.String(object.serviceaccountJson) : "",
            path: isSet(object.path) ? globalThis.String(object.path) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bucket !== "") {
            obj.bucket = message.bucket;
        }
        if (message.serviceaccountJson !== "") {
            obj.serviceaccountJson = message.serviceaccountJson;
        }
        if (message.path !== "") {
            obj.path = message.path;
        }
        return obj;
    },
    create(base) {
        return ExportDataRequest_GCSOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExportDataRequest_GCSOutput();
        message.bucket = object.bucket ?? "";
        message.serviceaccountJson = object.serviceaccountJson ?? "";
        message.path = object.path ?? "";
        return message;
    },
};
function createBaseExportDataResponse() {
    return { orgs: [] };
}
export const ExportDataResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.orgs) {
            DataOrg.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgs.push(DataOrg.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgs: globalThis.Array.isArray(object?.orgs) ? object.orgs.map((e) => DataOrg.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgs?.length) {
            obj.orgs = message.orgs.map((e) => DataOrg.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ExportDataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExportDataResponse();
        message.orgs = object.orgs?.map((e) => DataOrg.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListEventsRequest() {
    return {
        sequence: Long.UZERO,
        limit: 0,
        asc: false,
        editorUserId: "",
        eventTypes: [],
        aggregateId: "",
        aggregateTypes: [],
        resourceOwner: "",
        creationDate: undefined,
        range: undefined,
        from: undefined,
    };
}
export const ListEventsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.sequence.equals(Long.UZERO)) {
            writer.uint32(8).uint64(message.sequence.toString());
        }
        if (message.limit !== 0) {
            writer.uint32(16).uint32(message.limit);
        }
        if (message.asc !== false) {
            writer.uint32(24).bool(message.asc);
        }
        if (message.editorUserId !== "") {
            writer.uint32(34).string(message.editorUserId);
        }
        for (const v of message.eventTypes) {
            writer.uint32(42).string(v);
        }
        if (message.aggregateId !== "") {
            writer.uint32(50).string(message.aggregateId);
        }
        for (const v of message.aggregateTypes) {
            writer.uint32(58).string(v);
        }
        if (message.resourceOwner !== "") {
            writer.uint32(66).string(message.resourceOwner);
        }
        if (message.creationDate !== undefined) {
            Timestamp.encode(toTimestamp(message.creationDate), writer.uint32(74).fork()).join();
        }
        if (message.range !== undefined) {
            ListEventsRequest_creationDateRange.encode(message.range, writer.uint32(82).fork()).join();
        }
        if (message.from !== undefined) {
            Timestamp.encode(toTimestamp(message.from), writer.uint32(90).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.sequence = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.limit = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.asc = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.editorUserId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.eventTypes.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.aggregateId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.aggregateTypes.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.resourceOwner = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.creationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.range = ListEventsRequest_creationDateRange.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.from = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sequence: isSet(object.sequence) ? Long.fromValue(object.sequence) : Long.UZERO,
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
            asc: isSet(object.asc) ? globalThis.Boolean(object.asc) : false,
            editorUserId: isSet(object.editorUserId) ? globalThis.String(object.editorUserId) : "",
            eventTypes: globalThis.Array.isArray(object?.eventTypes)
                ? object.eventTypes.map((e) => globalThis.String(e))
                : [],
            aggregateId: isSet(object.aggregateId) ? globalThis.String(object.aggregateId) : "",
            aggregateTypes: globalThis.Array.isArray(object?.aggregateTypes)
                ? object.aggregateTypes.map((e) => globalThis.String(e))
                : [],
            resourceOwner: isSet(object.resourceOwner) ? globalThis.String(object.resourceOwner) : "",
            creationDate: isSet(object.creationDate) ? fromJsonTimestamp(object.creationDate) : undefined,
            range: isSet(object.range) ? ListEventsRequest_creationDateRange.fromJSON(object.range) : undefined,
            from: isSet(object.from) ? fromJsonTimestamp(object.from) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.sequence.equals(Long.UZERO)) {
            obj.sequence = (message.sequence || Long.UZERO).toString();
        }
        if (message.limit !== 0) {
            obj.limit = Math.round(message.limit);
        }
        if (message.asc !== false) {
            obj.asc = message.asc;
        }
        if (message.editorUserId !== "") {
            obj.editorUserId = message.editorUserId;
        }
        if (message.eventTypes?.length) {
            obj.eventTypes = message.eventTypes;
        }
        if (message.aggregateId !== "") {
            obj.aggregateId = message.aggregateId;
        }
        if (message.aggregateTypes?.length) {
            obj.aggregateTypes = message.aggregateTypes;
        }
        if (message.resourceOwner !== "") {
            obj.resourceOwner = message.resourceOwner;
        }
        if (message.creationDate !== undefined) {
            obj.creationDate = message.creationDate.toISOString();
        }
        if (message.range !== undefined) {
            obj.range = ListEventsRequest_creationDateRange.toJSON(message.range);
        }
        if (message.from !== undefined) {
            obj.from = message.from.toISOString();
        }
        return obj;
    },
    create(base) {
        return ListEventsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListEventsRequest();
        message.sequence = (object.sequence !== undefined && object.sequence !== null)
            ? Long.fromValue(object.sequence)
            : Long.UZERO;
        message.limit = object.limit ?? 0;
        message.asc = object.asc ?? false;
        message.editorUserId = object.editorUserId ?? "";
        message.eventTypes = object.eventTypes?.map((e) => e) || [];
        message.aggregateId = object.aggregateId ?? "";
        message.aggregateTypes = object.aggregateTypes?.map((e) => e) || [];
        message.resourceOwner = object.resourceOwner ?? "";
        message.creationDate = object.creationDate ?? undefined;
        message.range = (object.range !== undefined && object.range !== null)
            ? ListEventsRequest_creationDateRange.fromPartial(object.range)
            : undefined;
        message.from = object.from ?? undefined;
        return message;
    },
};
function createBaseListEventsRequest_creationDateRange() {
    return { since: undefined, until: undefined };
}
export const ListEventsRequest_creationDateRange = {
    encode(message, writer = new BinaryWriter()) {
        if (message.since !== undefined) {
            Timestamp.encode(toTimestamp(message.since), writer.uint32(10).fork()).join();
        }
        if (message.until !== undefined) {
            Timestamp.encode(toTimestamp(message.until), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEventsRequest_creationDateRange();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.since = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.until = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            since: isSet(object.since) ? fromJsonTimestamp(object.since) : undefined,
            until: isSet(object.until) ? fromJsonTimestamp(object.until) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.since !== undefined) {
            obj.since = message.since.toISOString();
        }
        if (message.until !== undefined) {
            obj.until = message.until.toISOString();
        }
        return obj;
    },
    create(base) {
        return ListEventsRequest_creationDateRange.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListEventsRequest_creationDateRange();
        message.since = object.since ?? undefined;
        message.until = object.until ?? undefined;
        return message;
    },
};
function createBaseListEventsResponse() {
    return { events: [] };
}
export const ListEventsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.events) {
            Event.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.events.push(Event.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => Event.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.events?.length) {
            obj.events = message.events.map((e) => Event.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListEventsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListEventsResponse();
        message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListEventTypesRequest() {
    return {};
}
export const ListEventTypesRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEventTypesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListEventTypesRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListEventTypesRequest();
        return message;
    },
};
function createBaseListEventTypesResponse() {
    return { eventTypes: [] };
}
export const ListEventTypesResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.eventTypes) {
            EventType.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEventTypesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.eventTypes.push(EventType.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventTypes: globalThis.Array.isArray(object?.eventTypes)
                ? object.eventTypes.map((e) => EventType.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.eventTypes?.length) {
            obj.eventTypes = message.eventTypes.map((e) => EventType.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListEventTypesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListEventTypesResponse();
        message.eventTypes = object.eventTypes?.map((e) => EventType.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListAggregateTypesRequest() {
    return {};
}
export const ListAggregateTypesRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAggregateTypesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListAggregateTypesRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListAggregateTypesRequest();
        return message;
    },
};
function createBaseListAggregateTypesResponse() {
    return { aggregateTypes: [] };
}
export const ListAggregateTypesResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.aggregateTypes) {
            AggregateType.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAggregateTypesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.aggregateTypes.push(AggregateType.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            aggregateTypes: globalThis.Array.isArray(object?.aggregateTypes)
                ? object.aggregateTypes.map((e) => AggregateType.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.aggregateTypes?.length) {
            obj.aggregateTypes = message.aggregateTypes.map((e) => AggregateType.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListAggregateTypesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListAggregateTypesResponse();
        message.aggregateTypes = object.aggregateTypes?.map((e) => AggregateType.fromPartial(e)) || [];
        return message;
    },
};
function createBaseActivateFeatureLoginDefaultOrgRequest() {
    return {};
}
export const ActivateFeatureLoginDefaultOrgRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateFeatureLoginDefaultOrgRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ActivateFeatureLoginDefaultOrgRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseActivateFeatureLoginDefaultOrgRequest();
        return message;
    },
};
function createBaseActivateFeatureLoginDefaultOrgResponse() {
    return { details: undefined };
}
export const ActivateFeatureLoginDefaultOrgResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateFeatureLoginDefaultOrgResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ActivateFeatureLoginDefaultOrgResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseActivateFeatureLoginDefaultOrgResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListMilestonesRequest() {
    return { query: undefined, sortingColumn: 0, queries: [] };
}
export const ListMilestonesRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.queries) {
            MilestoneQuery.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMilestonesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.queries.push(MilestoneQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? milestoneFieldNameFromJSON(object.sortingColumn) : 0,
            queries: globalThis.Array.isArray(object?.queries)
                ? object.queries.map((e) => MilestoneQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = milestoneFieldNameToJSON(message.sortingColumn);
        }
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => MilestoneQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMilestonesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMilestonesRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        message.sortingColumn = object.sortingColumn ?? 0;
        message.queries = object.queries?.map((e) => MilestoneQuery.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListMilestonesResponse() {
    return { details: undefined, result: [] };
}
export const ListMilestonesResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            Milestone.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMilestonesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(Milestone.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => Milestone.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => Milestone.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMilestonesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMilestonesResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => Milestone.fromPartial(e)) || [];
        return message;
    },
};
function createBaseSetRestrictionsRequest() {
    return { disallowPublicOrgRegistration: undefined, allowedLanguages: undefined };
}
export const SetRestrictionsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.disallowPublicOrgRegistration !== undefined) {
            writer.uint32(8).bool(message.disallowPublicOrgRegistration);
        }
        if (message.allowedLanguages !== undefined) {
            SelectLanguages.encode(message.allowedLanguages, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetRestrictionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.disallowPublicOrgRegistration = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.allowedLanguages = SelectLanguages.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            disallowPublicOrgRegistration: isSet(object.disallowPublicOrgRegistration)
                ? globalThis.Boolean(object.disallowPublicOrgRegistration)
                : undefined,
            allowedLanguages: isSet(object.allowedLanguages) ? SelectLanguages.fromJSON(object.allowedLanguages) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.disallowPublicOrgRegistration !== undefined) {
            obj.disallowPublicOrgRegistration = message.disallowPublicOrgRegistration;
        }
        if (message.allowedLanguages !== undefined) {
            obj.allowedLanguages = SelectLanguages.toJSON(message.allowedLanguages);
        }
        return obj;
    },
    create(base) {
        return SetRestrictionsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetRestrictionsRequest();
        message.disallowPublicOrgRegistration = object.disallowPublicOrgRegistration ?? undefined;
        message.allowedLanguages = (object.allowedLanguages !== undefined && object.allowedLanguages !== null)
            ? SelectLanguages.fromPartial(object.allowedLanguages)
            : undefined;
        return message;
    },
};
function createBaseSelectLanguages() {
    return { list: [] };
}
export const SelectLanguages = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.list) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSelectLanguages();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.list.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { list: globalThis.Array.isArray(object?.list) ? object.list.map((e) => globalThis.String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.list?.length) {
            obj.list = message.list;
        }
        return obj;
    },
    create(base) {
        return SelectLanguages.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSelectLanguages();
        message.list = object.list?.map((e) => e) || [];
        return message;
    },
};
function createBaseSetRestrictionsResponse() {
    return { details: undefined };
}
export const SetRestrictionsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetRestrictionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetRestrictionsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetRestrictionsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetRestrictionsRequest() {
    return {};
}
export const GetRestrictionsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetRestrictionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetRestrictionsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetRestrictionsRequest();
        return message;
    },
};
function createBaseGetRestrictionsResponse() {
    return { details: undefined, disallowPublicOrgRegistration: false, allowedLanguages: [] };
}
export const GetRestrictionsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.disallowPublicOrgRegistration !== false) {
            writer.uint32(16).bool(message.disallowPublicOrgRegistration);
        }
        for (const v of message.allowedLanguages) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetRestrictionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.disallowPublicOrgRegistration = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.allowedLanguages.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            disallowPublicOrgRegistration: isSet(object.disallowPublicOrgRegistration)
                ? globalThis.Boolean(object.disallowPublicOrgRegistration)
                : false,
            allowedLanguages: globalThis.Array.isArray(object?.allowedLanguages)
                ? object.allowedLanguages.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.disallowPublicOrgRegistration !== false) {
            obj.disallowPublicOrgRegistration = message.disallowPublicOrgRegistration;
        }
        if (message.allowedLanguages?.length) {
            obj.allowedLanguages = message.allowedLanguages;
        }
        return obj;
    },
    create(base) {
        return GetRestrictionsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetRestrictionsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.disallowPublicOrgRegistration = object.disallowPublicOrgRegistration ?? false;
        message.allowedLanguages = object.allowedLanguages?.map((e) => e) || [];
        return message;
    },
};
export const AdminServiceDefinition = {
    name: "AdminService",
    fullName: "zitadel.admin.v1.AdminService",
    methods: {
        healthz: {
            name: "Healthz",
            requestType: HealthzRequest,
            requestStream: false,
            responseType: HealthzResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            210,
                            1,
                            10,
                            7,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            18,
                            7,
                            72,
                            101,
                            97,
                            108,
                            116,
                            104,
                            122,
                            26,
                            126,
                            84,
                            104,
                            101,
                            32,
                            104,
                            101,
                            97,
                            108,
                            116,
                            104,
                            32,
                            101,
                            110,
                            100,
                            112,
                            111,
                            105,
                            110,
                            116,
                            32,
                            97,
                            108,
                            108,
                            111,
                            119,
                            115,
                            32,
                            97,
                            110,
                            32,
                            101,
                            120,
                            116,
                            101,
                            114,
                            110,
                            97,
                            108,
                            32,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            32,
                            116,
                            111,
                            32,
                            112,
                            114,
                            111,
                            98,
                            101,
                            32,
                            105,
                            102,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            32,
                            65,
                            80,
                            73,
                            32,
                            105,
                            115,
                            32,
                            97,
                            108,
                            105,
                            118,
                            101,
                            46,
                            32,
                            82,
                            101,
                            115,
                            112,
                            111,
                            110,
                            115,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            111,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            76,
                            69,
                            32,
                            105,
                            115,
                            32,
                            114,
                            117,
                            110,
                            110,
                            105,
                            110,
                            103,
                            46,
                            74,
                            24,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            17,
                            10,
                            15,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            116,
                            97,
                            114,
                            116,
                            101,
                            100,
                            74,
                            36,
                            10,
                            7,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            18,
                            25,
                            10,
                            23,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            78,
                            79,
                            84,
                            32,
                            115,
                            116,
                            97,
                            114,
                            116,
                            101,
                            100,
                            32,
                            121,
                            101,
                            116,
                        ]),
                    ],
                    578365826: [Buffer.from([10, 18, 8, 47, 104, 101, 97, 108, 116, 104, 122])],
                },
            },
        },
        getSupportedLanguages: {
            name: "GetSupportedLanguages",
            requestType: GetSupportedLanguagesRequest,
            requestStream: false,
            responseType: GetSupportedLanguagesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            124,
                            10,
                            7,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            18,
                            19,
                            83,
                            117,
                            112,
                            112,
                            111,
                            114,
                            116,
                            101,
                            100,
                            32,
                            76,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            26,
                            92,
                            84,
                            104,
                            101,
                            32,
                            115,
                            117,
                            112,
                            112,
                            111,
                            114,
                            116,
                            101,
                            100,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            32,
                            97,
                            98,
                            98,
                            114,
                            101,
                            118,
                            105,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [Buffer.from([12, 18, 10, 47, 108, 97, 110, 103, 117, 97, 103, 101, 115])],
                },
            },
        },
        getAllowedLanguages: {
            name: "GetAllowedLanguages",
            requestType: GetAllowedLanguagesRequest,
            requestStream: false,
            responseType: GetAllowedLanguagesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            136,
                            1,
                            10,
                            12,
                            82,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            17,
                            65,
                            108,
                            108,
                            111,
                            119,
                            101,
                            100,
                            32,
                            76,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            26,
                            101,
                            73,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            101,
                            100,
                            44,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            116,
                            104,
                            111,
                            115,
                            101,
                            32,
                            97,
                            114,
                            101,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            101,
                            100,
                            46,
                            32,
                            69,
                            108,
                            115,
                            101,
                            44,
                            32,
                            97,
                            108,
                            108,
                            32,
                            115,
                            117,
                            112,
                            112,
                            111,
                            114,
                            116,
                            101,
                            100,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            20,
                            18,
                            18,
                            47,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            47,
                            97,
                            108,
                            108,
                            111,
                            119,
                            101,
                            100,
                        ]),
                    ],
                },
            },
        },
        setDefaultLanguage: {
            name: "SetDefaultLanguage",
            requestType: SetDefaultLanguageRequest,
            requestStream: false,
            responseType: SetDefaultLanguageResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            155,
                            1,
                            10,
                            7,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            18,
                            21,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            76,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            26,
                            121,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            32,
                            102,
                            97,
                            108,
                            108,
                            98,
                            97,
                            99,
                            107,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            115,
                            111,
                            109,
                            101,
                            116,
                            104,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            31,
                            26,
                            29,
                            47,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultLanguage: {
            name: "GetDefaultLanguage",
            requestType: GetDefaultLanguageRequest,
            requestStream: false,
            responseType: GetDefaultLanguageResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            159,
                            1,
                            10,
                            7,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            18,
                            21,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            76,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            26,
                            125,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            32,
                            102,
                            97,
                            108,
                            108,
                            98,
                            97,
                            99,
                            107,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            115,
                            111,
                            109,
                            101,
                            116,
                            104,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            20,
                            18,
                            18,
                            47,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                        ]),
                    ],
                },
            },
        },
        getMyInstance: {
            name: "GetMyInstance",
            requestType: GetMyInstanceRequest,
            requestStream: false,
            responseType: GetMyInstanceResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            116,
                            10,
                            8,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            18,
                            15,
                            71,
                            101,
                            116,
                            32,
                            77,
                            121,
                            32,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            26,
                            87,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            116,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            98,
                            111,
                            117,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            115,
                            117,
                            99,
                            104,
                            32,
                            97,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            97,
                            109,
                            101,
                            44,
                            32,
                            118,
                            101,
                            114,
                            115,
                            105,
                            111,
                            110,
                            44,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([15, 18, 13, 47, 105, 110, 115, 116, 97, 110, 99, 101, 115, 47, 109, 101])],
                },
            },
        },
        listInstanceDomains: {
            name: "ListInstanceDomains",
            requestType: ListInstanceDomainsRequest,
            requestStream: false,
            responseType: ListInstanceDomainsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            160,
                            1,
                            10,
                            8,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            18,
                            21,
                            76,
                            105,
                            115,
                            116,
                            32,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            26,
                            125,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            97,
                            114,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            115,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            82,
                            76,
                            115,
                            32,
                            119,
                            104,
                            101,
                            114,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            115,
                            32,
                            114,
                            117,
                            110,
                            110,
                            105,
                            110,
                            103,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([18, 34, 16, 47, 100, 111, 109, 97, 105, 110, 115, 47, 95, 115, 101, 97, 114, 99, 104]),
                    ],
                },
            },
        },
        listInstanceTrustedDomains: {
            name: "ListInstanceTrustedDomains",
            requestType: ListInstanceTrustedDomainsRequest,
            requestStream: false,
            responseType: ListInstanceTrustedDomainsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            169,
                            1,
                            10,
                            8,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            18,
                            29,
                            76,
                            105,
                            115,
                            116,
                            32,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            84,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            26,
                            126,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            97,
                            114,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            115,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            116,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            112,
                            117,
                            98,
                            108,
                            105,
                            99,
                            32,
                            104,
                            111,
                            115,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            26,
                            34,
                            24,
                            47,
                            116,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            95,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        addInstanceTrustedDomain: {
            name: "AddInstanceTrustedDomain",
            requestType: AddInstanceTrustedDomainRequest,
            requestStream: false,
            responseType: AddInstanceTrustedDomainResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            170,
                            1,
                            10,
                            8,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            18,
                            30,
                            65,
                            100,
                            100,
                            32,
                            97,
                            110,
                            32,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            84,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            26,
                            126,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            97,
                            114,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            115,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            116,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            112,
                            117,
                            98,
                            108,
                            105,
                            99,
                            32,
                            104,
                            111,
                            115,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            34,
                            16,
                            47,
                            116,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            95,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                        ]),
                    ],
                },
            },
        },
        removeInstanceTrustedDomain: {
            name: "RemoveInstanceTrustedDomain",
            requestType: RemoveInstanceTrustedDomainRequest,
            requestStream: false,
            responseType: RemoveInstanceTrustedDomainResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            173,
                            1,
                            10,
                            8,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            18,
                            33,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            97,
                            110,
                            32,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            84,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            26,
                            126,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            97,
                            114,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            115,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            116,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            112,
                            117,
                            98,
                            108,
                            105,
                            99,
                            32,
                            104,
                            111,
                            115,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            42,
                            25,
                            47,
                            116,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            95,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            47,
                            123,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            125,
                        ]),
                    ],
                },
            },
        },
        listSecretGenerators: {
            name: "ListSecretGenerators",
            requestType: ListSecretGeneratorsRequest,
            requestStream: false,
            responseType: ListSecretGeneratorsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            212,
                            1,
                            10,
                            7,
                            83,
                            101,
                            99,
                            114,
                            101,
                            116,
                            115,
                            18,
                            22,
                            76,
                            105,
                            115,
                            116,
                            32,
                            83,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            26,
                            176,
                            1,
                            76,
                            105,
                            115,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            104,
                            111,
                            119,
                            32,
                            97,
                            32,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            69,
                            46,
                            103,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            99,
                            111,
                            100,
                            101,
                            44,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            99,
                            111,
                            100,
                            101,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            30,
                            58,
                            1,
                            42,
                            34,
                            25,
                            47,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        getSecretGenerator: {
            name: "GetSecretGenerator",
            requestType: GetSecretGeneratorRequest,
            requestStream: false,
            responseType: GetSecretGeneratorResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            175,
                            1,
                            10,
                            7,
                            83,
                            101,
                            99,
                            114,
                            101,
                            116,
                            115,
                            18,
                            20,
                            71,
                            101,
                            116,
                            32,
                            83,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            26,
                            141,
                            1,
                            71,
                            101,
                            116,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            82,
                            101,
                            115,
                            101,
                            116,
                            67,
                            111,
                            100,
                            101,
                            41,
                            46,
                            32,
                            65,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            104,
                            111,
                            119,
                            32,
                            97,
                            32,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            105,
                            110,
                            103,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            36,
                            18,
                            34,
                            47,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            47,
                            123,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            95,
                            116,
                            121,
                            112,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        updateSecretGenerator: {
            name: "UpdateSecretGenerator",
            requestType: UpdateSecretGeneratorRequest,
            requestStream: false,
            responseType: UpdateSecretGeneratorResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            195,
                            1,
                            10,
                            7,
                            83,
                            101,
                            99,
                            114,
                            101,
                            116,
                            115,
                            18,
                            23,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            83,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            26,
                            158,
                            1,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            82,
                            101,
                            115,
                            101,
                            116,
                            67,
                            111,
                            100,
                            101,
                            41,
                            46,
                            32,
                            65,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            104,
                            111,
                            119,
                            32,
                            97,
                            32,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            105,
                            110,
                            103,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            39,
                            58,
                            1,
                            42,
                            26,
                            34,
                            47,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            47,
                            123,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            95,
                            116,
                            121,
                            112,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        /**
         * Deprecated: Get active SMTP Configuration
         *
         * Returns the active SMTP configuration from the system. This is used to send E-Mails to the users.
         *
         * Deprecated: please move to the new endpoint GetEmailProvider.
         */
        getSMTPConfig: {
            name: "GetSMTPConfig",
            requestType: GetSMTPConfigRequest,
            requestStream: false,
            responseType: GetSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([7, 18, 5, 47, 115, 109, 116, 112])],
                },
            },
        },
        /**
         * Deprecated: Get SMTP provider configuration by its id
         *
         * Get a specific SMTP provider configuration by its ID.
         *
         * Deprecated: please move to the new endpoint GetEmailProviderById.
         */
        getSMTPConfigById: {
            name: "GetSMTPConfigById",
            requestType: GetSMTPConfigByIdRequest,
            requestStream: false,
            responseType: GetSMTPConfigByIdResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([12, 18, 10, 47, 115, 109, 116, 112, 47, 123, 105, 100, 125])],
                },
            },
        },
        /**
         * Deprecated: Add SMTP Configuration
         *
         * Add a new SMTP configuration if nothing is set yet.
         *
         * Deprecated: please move to the new endpoint AddEmailProviderSMTP.
         */
        addSMTPConfig: {
            name: "AddSMTPConfig",
            requestType: AddSMTPConfigRequest,
            requestStream: false,
            responseType: AddSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([10, 58, 1, 42, 34, 5, 47, 115, 109, 116, 112])],
                },
            },
        },
        /**
         * Deprecated: Update SMTP Configuration
         *
         * Update the SMTP configuration, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.
         *
         * Deprecated: please move to the new endpoint UpdateEmailProviderSMTP.
         */
        updateSMTPConfig: {
            name: "UpdateSMTPConfig",
            requestType: UpdateSMTPConfigRequest,
            requestStream: false,
            responseType: UpdateSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([15, 58, 1, 42, 26, 10, 47, 115, 109, 116, 112, 47, 123, 105, 100, 125])],
                },
            },
        },
        /**
         * Deprecated: Update SMTP Password
         *
         * Update the SMTP password that is used for the host, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.
         *
         * Deprecated: please move to the new endpoint UpdateEmailProviderSMTPPassword.
         */
        updateSMTPConfigPassword: {
            name: "UpdateSMTPConfigPassword",
            requestType: UpdateSMTPConfigPasswordRequest,
            requestStream: false,
            responseType: UpdateSMTPConfigPasswordResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            24,
                            58,
                            1,
                            42,
                            26,
                            19,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                        ]),
                    ],
                },
            },
        },
        /**
         * Deprecated: Activate SMTP Provider
         *
         * Activate an SMTP provider.
         *
         * Deprecated: please move to the new endpoint ActivateEmailProvider.
         */
        activateSMTPConfig: {
            name: "ActivateSMTPConfig",
            requestType: ActivateSMTPConfigRequest,
            requestStream: false,
            responseType: ActivateSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            68,
                            10,
                            12,
                            83,
                            77,
                            84,
                            80,
                            32,
                            67,
                            111,
                            110,
                            102,
                            105,
                            103,
                            115,
                            18,
                            22,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            26,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            25,
                            58,
                            1,
                            42,
                            34,
                            20,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        /**
         * Deprecated: Deactivate SMTP Provider
         *
         * Deactivate an SMTP provider. After deactivating the provider, the users will not be able to receive SMTP notifications from that provider anymore.
         *
         * Deprecated: please move to the new endpoint DeactivateEmailProvider.
         */
        deactivateSMTPConfig: {
            name: "DeactivateSMTPConfig",
            requestType: DeactivateSMTPConfigRequest,
            requestStream: false,
            responseType: DeactivateSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            34,
                            22,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        /**
         * Deprecated: Remove SMTP Configuration
         *
         * Remove the SMTP configuration, be aware that the users will not get an E-Mail if no SMTP is set.
         *
         * Deprecated: please move to the new endpoint RemoveEmailProvider.
         */
        removeSMTPConfig: {
            name: "RemoveSMTPConfig",
            requestType: RemoveSMTPConfigRequest,
            requestStream: false,
            responseType: RemoveSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([12, 42, 10, 47, 115, 109, 116, 112, 47, 123, 105, 100, 125])],
                },
            },
        },
        /**
         * Deprecated: Test SMTP Provider
         *
         * Test an SMTP provider identified by its ID. After testing the provider, the users will receive information about the test results.
         *
         * Deprecated: please move to the new endpoint TestEmailProviderSMTPById.
         */
        testSMTPConfigById: {
            name: "TestSMTPConfigById",
            requestType: TestSMTPConfigByIdRequest,
            requestStream: false,
            responseType: TestSMTPConfigByIdResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            34,
                            16,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            116,
                            101,
                            115,
                            116,
                        ]),
                    ],
                },
            },
        },
        /**
         * Deprecated: Test SMTP Provider
         *
         * Test an SMTP provider. After testing the provider, the users will receive information about the test results.
         *
         * Deprecated: please move to the new endpoint TestEmailProviderSMTP.
         */
        testSMTPConfig: {
            name: "TestSMTPConfig",
            requestType: TestSMTPConfigRequest,
            requestStream: false,
            responseType: TestSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 115, 109, 116, 112, 47, 95, 116, 101, 115, 116])],
                },
            },
        },
        /**
         * Deprecated: List SMTP Configs
         *
         * Returns a list of SMTP configurations.
         *
         * Deprecated: please move to the new endpoint ListEmailProviders.
         */
        listSMTPConfigs: {
            name: "ListSMTPConfigs",
            requestType: ListSMTPConfigsRequest,
            requestStream: false,
            responseType: ListSMTPConfigsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([18, 58, 1, 42, 34, 13, 47, 115, 109, 116, 112, 47, 95, 115, 101, 97, 114, 99, 104])],
                },
            },
        },
        listEmailProviders: {
            name: "ListEmailProviders",
            requestType: ListEmailProvidersRequest,
            requestStream: false,
            responseType: ListEmailProvidersResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            74,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            20,
                            76,
                            105,
                            115,
                            116,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            26,
                            34,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([19, 58, 1, 42, 34, 14, 47, 101, 109, 97, 105, 108, 47, 95, 115, 101, 97, 114, 99, 104]),
                    ],
                },
            },
        },
        getEmailProvider: {
            name: "GetEmailProvider",
            requestType: GetEmailProviderRequest,
            requestStream: false,
            responseType: GetEmailProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            138,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            25,
                            71,
                            101,
                            116,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            93,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            69,
                            45,
                            77,
                            97,
                            105,
                            108,
                            115,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([8, 18, 6, 47, 101, 109, 97, 105, 108])],
                },
            },
        },
        getEmailProviderById: {
            name: "GetEmailProviderById",
            requestType: GetEmailProviderByIdRequest,
            requestStream: false,
            responseType: GetEmailProviderByIdResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            88,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            28,
                            71,
                            101,
                            116,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            105,
                            100,
                            26,
                            40,
                            71,
                            101,
                            116,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            73,
                            68,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([13, 18, 11, 47, 101, 109, 97, 105, 108, 47, 123, 105, 100, 125])],
                },
            },
        },
        addEmailProviderSMTP: {
            name: "AddEmailProviderSMTP",
            requestType: AddEmailProviderSMTPRequest,
            requestStream: false,
            responseType: AddEmailProviderSMTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            95,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            23,
                            65,
                            100,
                            100,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            52,
                            65,
                            100,
                            100,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            116,
                            104,
                            105,
                            110,
                            103,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            116,
                            32,
                            121,
                            101,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 101, 109, 97, 105, 108, 47, 115, 109, 116, 112])],
                },
            },
        },
        updateEmailProviderSMTP: {
            name: "UpdateEmailProviderSMTP",
            requestType: UpdateEmailProviderSMTPRequest,
            requestStream: false,
            responseType: UpdateEmailProviderSMTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            207,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            26,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            160,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            98,
                            101,
                            32,
                            97,
                            119,
                            97,
                            114,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            115,
                            111,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            97,
                            118,
                            101,
                            100,
                            46,
                            32,
                            83,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            103,
                            101,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            101,
                            119,
                            108,
                            121,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            83,
                            77,
                            84,
                            80,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        addEmailProviderHTTP: {
            name: "AddEmailProviderHTTP",
            requestType: AddEmailProviderHTTPRequest,
            requestStream: false,
            responseType: AddEmailProviderHTTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            95,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            23,
                            65,
                            100,
                            100,
                            32,
                            72,
                            84,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            52,
                            65,
                            100,
                            100,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            72,
                            84,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            116,
                            104,
                            105,
                            110,
                            103,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            116,
                            32,
                            121,
                            101,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 101, 109, 97, 105, 108, 47, 104, 116, 116, 112])],
                },
            },
        },
        updateEmailProviderHTTP: {
            name: "UpdateEmailProviderHTTP",
            requestType: UpdateEmailProviderHTTPRequest,
            requestStream: false,
            responseType: UpdateEmailProviderHTTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            207,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            26,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            72,
                            84,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            160,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            72,
                            84,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            98,
                            101,
                            32,
                            97,
                            119,
                            97,
                            114,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            115,
                            111,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            97,
                            118,
                            101,
                            100,
                            46,
                            32,
                            83,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            103,
                            101,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            101,
                            119,
                            108,
                            121,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            72,
                            84,
                            84,
                            80,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            104,
                            116,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        updateEmailProviderSMTPPassword: {
            name: "UpdateEmailProviderSMTPPassword",
            requestType: UpdateEmailProviderSMTPPasswordRequest,
            requestStream: false,
            responseType: UpdateEmailProviderSMTPPasswordResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            221,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            20,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            26,
                            180,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            104,
                            111,
                            115,
                            116,
                            44,
                            32,
                            98,
                            101,
                            32,
                            97,
                            119,
                            97,
                            114,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            115,
                            111,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            97,
                            118,
                            101,
                            100,
                            46,
                            32,
                            83,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            103,
                            101,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            101,
                            119,
                            108,
                            121,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            83,
                            77,
                            84,
                            80,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            30,
                            58,
                            1,
                            42,
                            26,
                            25,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                        ]),
                    ],
                },
            },
        },
        activateEmailProvider: {
            name: "ActivateEmailProvider",
            requestType: ActivateEmailProviderRequest,
            requestStream: false,
            responseType: ActivateEmailProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            70,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            23,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            27,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            26,
                            58,
                            1,
                            42,
                            34,
                            21,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        deactivateEmailProvider: {
            name: "DeactivateEmailProvider",
            requestType: DeactivateEmailProviderRequest,
            requestStream: false,
            responseType: DeactivateEmailProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            194,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            25,
                            68,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            148,
                            1,
                            68,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            65,
                            102,
                            116,
                            101,
                            114,
                            32,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            99,
                            101,
                            105,
                            118,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            97,
                            110,
                            121,
                            109,
                            111,
                            114,
                            101,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            28,
                            58,
                            1,
                            42,
                            34,
                            23,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        removeEmailProvider: {
            name: "RemoveEmailProvider",
            requestType: RemoveEmailProviderRequest,
            requestStream: false,
            responseType: RemoveEmailProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            137,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            21,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            96,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            98,
                            101,
                            32,
                            97,
                            119,
                            97,
                            114,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            103,
                            101,
                            116,
                            32,
                            97,
                            110,
                            32,
                            69,
                            45,
                            77,
                            97,
                            105,
                            108,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([13, 42, 11, 47, 101, 109, 97, 105, 108, 47, 123, 105, 100, 125])],
                },
            },
        },
        testEmailProviderSMTPById: {
            name: "TestEmailProviderSMTPById",
            requestType: TestEmailProviderSMTPByIdRequest,
            requestStream: false,
            responseType: TestEmailProviderSMTPByIdResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            181,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            24,
                            84,
                            101,
                            115,
                            116,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            136,
                            1,
                            84,
                            101,
                            115,
                            116,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            73,
                            68,
                            46,
                            32,
                            65,
                            102,
                            116,
                            101,
                            114,
                            32,
                            116,
                            101,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            114,
                            101,
                            99,
                            101,
                            105,
                            118,
                            101,
                            32,
                            105,
                            110,
                            102,
                            111,
                            114,
                            109,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            98,
                            111,
                            117,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            115,
                            116,
                            32,
                            114,
                            101,
                            115,
                            117,
                            108,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            34,
                            22,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            116,
                            101,
                            115,
                            116,
                        ]),
                    ],
                },
            },
        },
        testEmailProviderSMTP: {
            name: "TestEmailProviderSMTP",
            requestType: TestEmailProviderSMTPRequest,
            requestStream: false,
            responseType: TestEmailProviderSMTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            159,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            24,
                            84,
                            101,
                            115,
                            116,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            115,
                            84,
                            101,
                            115,
                            116,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            65,
                            102,
                            116,
                            101,
                            114,
                            32,
                            116,
                            101,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            114,
                            101,
                            99,
                            101,
                            105,
                            118,
                            101,
                            32,
                            105,
                            110,
                            102,
                            111,
                            114,
                            109,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            98,
                            111,
                            117,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            115,
                            116,
                            32,
                            114,
                            101,
                            115,
                            117,
                            108,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            58,
                            1,
                            42,
                            34,
                            17,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            95,
                            116,
                            101,
                            115,
                            116,
                        ]),
                    ],
                },
            },
        },
        listSMSProviders: {
            name: "ListSMSProviders",
            requestType: ListSMSProvidersRequest,
            requestStream: false,
            responseType: ListSMSProvidersResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            79,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            18,
                            76,
                            105,
                            115,
                            116,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            26,
                            43,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 115, 109, 115, 47, 95, 115, 101, 97, 114, 99, 104])],
                },
            },
        },
        getSMSProvider: {
            name: "GetSMSProvider",
            requestType: GetSMSProviderRequest,
            requestStream: false,
            responseType: GetSMSProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            72,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            16,
                            71,
                            101,
                            116,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            38,
                            71,
                            101,
                            116,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            73,
                            68,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([11, 18, 9, 47, 115, 109, 115, 47, 123, 105, 100, 125])],
                },
            },
        },
        addSMSProviderTwilio: {
            name: "AddSMSProviderTwilio",
            requestType: AddSMSProviderTwilioRequest,
            requestStream: false,
            responseType: AddSMSProviderTwilioResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            154,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            23,
                            65,
                            100,
                            100,
                            32,
                            84,
                            119,
                            105,
                            108,
                            105,
                            111,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            113,
                            67,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            84,
                            119,
                            105,
                            108,
                            105,
                            111,
                            46,
                            32,
                            65,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 115, 109, 115, 47, 116, 119, 105, 108, 105, 111])],
                },
            },
        },
        updateSMSProviderTwilio: {
            name: "UpdateSMSProviderTwilio",
            requestType: UpdateSMSProviderTwilioRequest,
            requestStream: false,
            responseType: UpdateSMSProviderTwilioResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            174,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            26,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            84,
                            119,
                            105,
                            108,
                            105,
                            111,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            129,
                            1,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            84,
                            119,
                            105,
                            108,
                            105,
                            111,
                            46,
                            32,
                            32,
                            65,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            115,
                            109,
                            115,
                            47,
                            116,
                            119,
                            105,
                            108,
                            105,
                            111,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        updateSMSProviderTwilioToken: {
            name: "UpdateSMSProviderTwilioToken",
            requestType: UpdateSMSProviderTwilioTokenRequest,
            requestStream: false,
            responseType: UpdateSMSProviderTwilioTokenResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            106,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            84,
                            119,
                            105,
                            108,
                            105,
                            111,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            84,
                            111,
                            107,
                            101,
                            110,
                            26,
                            56,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            84,
                            119,
                            105,
                            108,
                            105,
                            111,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            26,
                            22,
                            47,
                            115,
                            109,
                            115,
                            47,
                            116,
                            119,
                            105,
                            108,
                            105,
                            111,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            116,
                            111,
                            107,
                            101,
                            110,
                        ]),
                    ],
                },
            },
        },
        addSMSProviderHTTP: {
            name: "AddSMSProviderHTTP",
            requestType: AddSMSProviderHTTPRequest,
            requestStream: false,
            responseType: AddSMSProviderHTTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            150,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            21,
                            65,
                            100,
                            100,
                            32,
                            72,
                            84,
                            84,
                            80,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            111,
                            67,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            72,
                            84,
                            84,
                            80,
                            46,
                            32,
                            65,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([14, 58, 1, 42, 34, 9, 47, 115, 109, 115, 47, 104, 116, 116, 112])],
                },
            },
        },
        updateSMSProviderHTTP: {
            name: "UpdateSMSProviderHTTP",
            requestType: UpdateSMSProviderHTTPRequest,
            requestStream: false,
            responseType: UpdateSMSProviderHTTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            168,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            24,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            72,
                            84,
                            84,
                            80,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            126,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            72,
                            84,
                            84,
                            80,
                            46,
                            32,
                            65,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([19, 58, 1, 42, 26, 14, 47, 115, 109, 115, 47, 104, 116, 116, 112, 47, 123, 105, 100, 125]),
                    ],
                },
            },
        },
        activateSMSProvider: {
            name: "ActivateSMSProvider",
            requestType: ActivateSMSProviderRequest,
            requestStream: false,
            responseType: ActivateSMSProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            146,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            21,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            107,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            65,
                            102,
                            116,
                            101,
                            114,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            105,
                            110,
                            103,
                            32,
                            97,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            99,
                            101,
                            105,
                            118,
                            101,
                            32,
                            83,
                            77,
                            83,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            24,
                            58,
                            1,
                            42,
                            34,
                            19,
                            47,
                            115,
                            109,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        deactivateSMSProvider: {
            name: "DeactivateSMSProvider",
            requestType: DeactivateSMSProviderRequest,
            requestStream: false,
            responseType: DeactivateSMSProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            254,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            23,
                            68,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            212,
                            1,
                            68,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            65,
                            102,
                            116,
                            101,
                            114,
                            32,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            99,
                            101,
                            105,
                            118,
                            101,
                            32,
                            83,
                            77,
                            83,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            97,
                            110,
                            121,
                            109,
                            111,
                            114,
                            101,
                            46,
                            32,
                            73,
                            102,
                            32,
                            105,
                            116,
                            32,
                            119,
                            97,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            115,
                            116,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            116,
                            104,
                            101,
                            121,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            103,
                            101,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            97,
                            116,
                            32,
                            97,
                            108,
                            108,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            26,
                            58,
                            1,
                            42,
                            34,
                            21,
                            47,
                            115,
                            109,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        removeSMSProvider: {
            name: "RemoveSMSProvider",
            requestType: RemoveSMSProviderRequest,
            requestStream: false,
            responseType: RemoveSMSProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            162,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            19,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            125,
                            68,
                            101,
                            108,
                            101,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            73,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            119,
                            97,
                            115,
                            32,
                            115,
                            116,
                            105,
                            108,
                            108,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            114,
                            101,
                            99,
                            101,
                            105,
                            118,
                            101,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            97,
                            110,
                            121,
                            109,
                            111,
                            114,
                            101,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([11, 42, 9, 47, 115, 109, 115, 47, 123, 105, 100, 125])],
                },
            },
        },
        getOIDCSettings: {
            name: "GetOIDCSettings",
            requestType: GetOIDCSettingsRequest,
            requestStream: false,
            responseType: GetOIDCSettingsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            102,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            17,
                            71,
                            101,
                            116,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            71,
                            84,
                            104,
                            101,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            102,
                            101,
                            116,
                            105,
                            109,
                            101,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            32,
                            105,
                            110,
                            32,
                            79,
                            73,
                            68,
                            67,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([16, 18, 14, 47, 115, 101, 116, 116, 105, 110, 103, 115, 47, 111, 105, 100, 99])],
                },
            },
        },
        addOIDCSettings: {
            name: "AddOIDCSettings",
            requestType: AddOIDCSettingsRequest,
            requestStream: false,
            responseType: AddOIDCSettingsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            188,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            17,
                            65,
                            100,
                            100,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            156,
                            1,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            32,
                            110,
                            101,
                            119,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            102,
                            101,
                            116,
                            105,
                            109,
                            101,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            32,
                            105,
                            110,
                            32,
                            79,
                            73,
                            68,
                            67,
                            46,
                            32,
                            84,
                            104,
                            101,
                            115,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            99,
                            108,
                            105,
                            101,
                            110,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([19, 58, 1, 42, 34, 14, 47, 115, 101, 116, 116, 105, 110, 103, 115, 47, 111, 105, 100, 99]),
                    ],
                },
            },
        },
        updateOIDCSettings: {
            name: "UpdateOIDCSettings",
            requestType: UpdateOIDCSettingsRequest,
            requestStream: false,
            responseType: UpdateOIDCSettingsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            193,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            17,
                            65,
                            100,
                            100,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            161,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            102,
                            101,
                            116,
                            105,
                            109,
                            101,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            32,
                            105,
                            110,
                            32,
                            79,
                            73,
                            68,
                            67,
                            46,
                            32,
                            84,
                            104,
                            101,
                            115,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            99,
                            108,
                            105,
                            101,
                            110,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([19, 58, 1, 42, 26, 14, 47, 115, 101, 116, 116, 105, 110, 103, 115, 47, 111, 105, 100, 99]),
                    ],
                },
            },
        },
        getFileSystemNotificationProvider: {
            name: "GetFileSystemNotificationProvider",
            requestType: GetFileSystemNotificationProviderRequest,
            requestStream: false,
            responseType: GetFileSystemNotificationProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            224,
                            1,
                            10,
                            22,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            36,
                            71,
                            101,
                            116,
                            32,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            70,
                            105,
                            108,
                            101,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            26,
                            159,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            102,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            101,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            112,
                            117,
                            114,
                            112,
                            111,
                            115,
                            101,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            29,
                            18,
                            27,
                            47,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            47,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            47,
                            102,
                            105,
                            108,
                            101,
                        ]),
                    ],
                },
            },
        },
        getLogNotificationProvider: {
            name: "GetLogNotificationProvider",
            requestType: GetLogNotificationProviderRequest,
            requestStream: false,
            responseType: GetLogNotificationProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            204,
                            1,
                            10,
                            22,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            29,
                            71,
                            101,
                            116,
                            32,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            76,
                            111,
                            103,
                            26,
                            146,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            111,
                            103,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            102,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            101,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            112,
                            117,
                            114,
                            112,
                            111,
                            115,
                            101,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            28,
                            18,
                            26,
                            47,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            47,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            47,
                            108,
                            111,
                            103,
                        ]),
                    ],
                },
            },
        },
        getSecurityPolicy: {
            name: "GetSecurityPolicy",
            requestType: GetSecurityPolicyRequest,
            requestStream: false,
            responseType: GetSecurityPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            89,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            21,
                            71,
                            101,
                            116,
                            32,
                            83,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            54,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            20,
                            18,
                            18,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                        ]),
                    ],
                },
            },
        },
        setSecurityPolicy: {
            name: "SetSecurityPolicy",
            requestType: SetSecurityPolicyRequest,
            requestStream: false,
            responseType: SetSecurityPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            85,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            21,
                            83,
                            101,
                            116,
                            32,
                            83,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            50,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            23,
                            58,
                            1,
                            42,
                            26,
                            18,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                        ]),
                    ],
                },
            },
        },
        getOrgByID: {
            name: "GetOrgByID",
            requestType: GetOrgByIDRequest,
            requestStream: false,
            responseType: GetOrgByIDResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            172,
                            1,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            22,
                            71,
                            101,
                            116,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            66,
                            121,
                            32,
                            73,
                            68,
                            26,
                            101,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            110,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            73,
                            68,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            115,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            99,
                            101,
                            115,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            28,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            21,
                            10,
                            19,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            101,
                            100,
                            32,
                            111,
                            114,
                            103,
                            32,
                            102,
                            111,
                            117,
                            110,
                            100,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([12, 18, 10, 47, 111, 114, 103, 115, 47, 123, 105, 100, 125])],
                },
            },
        },
        isOrgUnique: {
            name: "IsOrgUnique",
            requestType: IsOrgUniqueRequest,
            requestStream: false,
            responseType: IsOrgUniqueResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            182,
                            1,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            22,
                            73,
                            115,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            85,
                            110,
                            105,
                            113,
                            117,
                            101,
                            26,
                            77,
                            67,
                            104,
                            101,
                            99,
                            107,
                            115,
                            32,
                            105,
                            102,
                            32,
                            97,
                            110,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                            101,
                            100,
                            32,
                            112,
                            97,
                            114,
                            97,
                            109,
                            101,
                            116,
                            101,
                            114,
                            115,
                            32,
                            97,
                            108,
                            114,
                            101,
                            97,
                            100,
                            121,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            115,
                            32,
                            111,
                            114,
                            32,
                            110,
                            111,
                            116,
                            46,
                            74,
                            24,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            17,
                            10,
                            15,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            116,
                            97,
                            114,
                            116,
                            101,
                            100,
                            74,
                            36,
                            10,
                            7,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            18,
                            25,
                            10,
                            23,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            78,
                            79,
                            84,
                            32,
                            115,
                            116,
                            97,
                            114,
                            116,
                            101,
                            100,
                            32,
                            121,
                            101,
                            116,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([18, 18, 16, 47, 111, 114, 103, 115, 47, 95, 105, 115, 95, 117, 110, 105, 113, 117, 101]),
                    ],
                },
            },
        },
        setDefaultOrg: {
            name: "SetDefaultOrg",
            requestType: SetDefaultOrgRequest,
            requestStream: false,
            responseType: SetDefaultOrgResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            222,
                            1,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            24,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            168,
                            1,
                            83,
                            101,
                            116,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            102,
                            32,
                            110,
                            111,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            115,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            102,
                            111,
                            114,
                            109,
                            44,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            24,
                            26,
                            22,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultOrg: {
            name: "GetDefaultOrg",
            requestType: GetDefaultOrgRequest,
            requestStream: false,
            responseType: GetDefaultOrgResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            221,
                            1,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            24,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            167,
                            1,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            102,
                            32,
                            110,
                            111,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            115,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            102,
                            111,
                            114,
                            109,
                            44,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([15, 18, 13, 47, 111, 114, 103, 115, 47, 100, 101, 102, 97, 117, 108, 116])],
                },
            },
        },
        listOrgs: {
            name: "ListOrgs",
            requestType: ListOrgsRequest,
            requestStream: false,
            responseType: ListOrgsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            132,
                            2,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            19,
                            83,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            113,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            109,
                            97,
                            116,
                            99,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            102,
                            105,
                            108,
                            116,
                            101,
                            114,
                            115,
                            46,
                            32,
                            65,
                            108,
                            108,
                            32,
                            102,
                            105,
                            108,
                            116,
                            101,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            97,
                            112,
                            112,
                            108,
                            105,
                            101,
                            100,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            97,
                            110,
                            32,
                            65,
                            78,
                            68,
                            32,
                            99,
                            111,
                            110,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            49,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            42,
                            10,
                            40,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            109,
                            97,
                            116,
                            99,
                            104,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            113,
                            117,
                            101,
                            114,
                            121,
                            74,
                            56,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            49,
                            10,
                            18,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            113,
                            117,
                            101,
                            114,
                            121,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([18, 58, 1, 42, 34, 13, 47, 111, 114, 103, 115, 47, 95, 115, 101, 97, 114, 99, 104])],
                },
            },
        },
        setUpOrg: {
            name: "SetUpOrg",
            requestType: SetUpOrgRequest,
            requestStream: false,
            responseType: SetUpOrgResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            177,
                            2,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            18,
                            83,
                            101,
                            116,
                            117,
                            112,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            142,
                            1,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            118,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            73,
                            102,
                            32,
                            110,
                            111,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            105,
                            114,
                            115,
                            116,
                            32,
                            117,
                            115,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            103,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            111,
                            108,
                            101,
                            32,
                            79,
                            82,
                            71,
                            95,
                            79,
                            87,
                            78,
                            69,
                            82,
                            46,
                            74,
                            64,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            57,
                            10,
                            55,
                            111,
                            114,
                            103,
                            44,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            110,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            104,
                            105,
                            112,
                            32,
                            119,
                            101,
                            114,
                            101,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                            74,
                            57,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            50,
                            10,
                            19,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            111,
                            114,
                            103,
                            32,
                            111,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 111, 114, 103, 115, 47, 95, 115, 101, 116, 117, 112])],
                },
            },
        },
        removeOrg: {
            name: "RemoveOrg",
            requestType: RemoveOrgRequest,
            requestStream: false,
            responseType: RemoveOrgResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            145,
                            2,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            19,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            148,
                            1,
                            68,
                            101,
                            108,
                            101,
                            116,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            108,
                            108,
                            32,
                            105,
                            116,
                            115,
                            32,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            32,
                            40,
                            85,
                            115,
                            101,
                            114,
                            115,
                            44,
                            32,
                            80,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            115,
                            44,
                            32,
                            71,
                            114,
                            97,
                            110,
                            116,
                            115,
                            32,
                            116,
                            111,
                            32,
                            97,
                            110,
                            100,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            41,
                            46,
                            32,
                            85,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            46,
                            74,
                            33,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            26,
                            10,
                            24,
                            111,
                            114,
                            103,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                            74,
                            49,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            42,
                            10,
                            11,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            111,
                            114,
                            103,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 42, 14, 47, 111, 114, 103, 115, 47, 123, 111, 114, 103, 95, 105, 100, 125])],
                },
            },
        },
        getIDPByID: {
            name: "GetIDPByID",
            requestType: GetIDPByIDRequest,
            requestStream: false,
            responseType: GetIDPByIDResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            237,
                            1,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            45,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            71,
                            101,
                            116,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            32,
                            98,
                            121,
                            32,
                            73,
                            68,
                            26,
                            90,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            110,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            115,
                            111,
                            99,
                            105,
                            97,
                            108,
                            47,
                            101,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            41,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            73,
                            68,
                            32,
                            101,
                            46,
                            103,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            44,
                            32,
                            65,
                            122,
                            117,
                            114,
                            101,
                            65,
                            68,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            74,
                            18,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            11,
                            10,
                            9,
                            73,
                            68,
                            80,
                            32,
                            102,
                            111,
                            117,
                            110,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 105, 97, 109, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([12, 18, 10, 47, 105, 100, 112, 115, 47, 123, 105, 100, 125])],
                },
            },
        },
        listIDPs: {
            name: "ListIDPs",
            requestType: ListIDPsRequest,
            requestStream: false,
            responseType: ListIDPsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            136,
                            2,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            43,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            83,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            121,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            40,
                            115,
                            111,
                            99,
                            105,
                            97,
                            108,
                            47,
                            101,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            41,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            101,
                            46,
                            103,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            44,
                            32,
                            65,
                            122,
                            117,
                            114,
                            101,
                            65,
                            68,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            74,
                            19,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            12,
                            10,
                            10,
                            105,
                            100,
                            112,
                            115,
                            32,
                            102,
                            111,
                            117,
                            110,
                            100,
                            74,
                            51,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            44,
                            10,
                            13,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            113,
                            117,
                            101,
                            114,
                            121,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 105, 97, 109, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([18, 58, 1, 42, 34, 13, 47, 105, 100, 112, 115, 47, 95, 115, 101, 97, 114, 99, 104])],
                },
            },
        },
        addOIDCIDP: {
            name: "AddOIDCIDP",
            requestType: AddOIDCIDPRequest,
            requestStream: false,
            responseType: AddOIDCIDPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            165,
                            2,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            44,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            65,
                            100,
                            100,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            144,
                            1,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            101,
                            110,
                            97,
                            98,
                            108,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            115,
                            111,
                            99,
                            105,
                            97,
                            108,
                            47,
                            101,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            105,
                            97,
                            110,
                            116,
                            46,
                            74,
                            20,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            13,
                            10,
                            11,
                            105,
                            100,
                            112,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([15, 58, 1, 42, 34, 10, 47, 105, 100, 112, 115, 47, 111, 105, 100, 99])],
                },
            },
        },
        addJWTIDP: {
            name: "AddJWTIDP",
            requestType: AddJWTIDPRequest,
            requestStream: false,
            responseType: AddJWTIDPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            194,
                            3,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            43,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            65,
                            100,
                            100,
                            32,
                            74,
                            87,
                            84,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            174,
                            2,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            101,
                            110,
                            97,
                            98,
                            108,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            115,
                            111,
                            99,
                            105,
                            97,
                            108,
                            47,
                            101,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            46,
                            32,
                            74,
                            83,
                            79,
                            78,
                            32,
                            87,
                            101,
                            98,
                            32,
                            84,
                            111,
                            107,
                            101,
                            110,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            74,
                            87,
                            84,
                            32,
                            73,
                            68,
                            80,
                            41,
                            32,
                            103,
                            105,
                            118,
                            101,
                            115,
                            32,
                            121,
                            111,
                            117,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            105,
                            108,
                            105,
                            116,
                            121,
                            32,
                            116,
                            111,
                            32,
                            117,
                            115,
                            101,
                            32,
                            97,
                            110,
                            32,
                            40,
                            101,
                            120,
                            105,
                            115,
                            116,
                            105,
                            110,
                            103,
                            41,
                            32,
                            74,
                            87,
                            84,
                            32,
                            97,
                            115,
                            32,
                            97,
                            32,
                            102,
                            101,
                            100,
                            101,
                            114,
                            97,
                            116,
                            101,
                            100,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            46,
                            32,
                            89,
                            111,
                            117,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            116,
                            111,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            32,
                            97,
                            110,
                            32,
                            101,
                            110,
                            100,
                            112,
                            111,
                            105,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            114,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            99,
                            97,
                            110,
                            32,
                            103,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            74,
                            87,
                            84,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            46,
                            74,
                            20,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            13,
                            10,
                            11,
                            105,
                            100,
                            112,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([14, 58, 1, 42, 34, 9, 47, 105, 100, 112, 115, 47, 106, 119, 116])],
                },
            },
        },
        updateIDP: {
            name: "UpdateIDP",
            requestType: UpdateIDPRequest,
            requestStream: false,
            responseType: UpdateIDPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            132,
                            2,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            42,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            114,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            73,
                            68,
                            80,
                            46,
                            32,
                            65,
                            108,
                            108,
                            32,
                            102,
                            105,
                            101,
                            108,
                            100,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            46,
                            32,
                            73,
                            102,
                            32,
                            121,
                            111,
                            117,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            97,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            32,
                            105,
                            110,
                            32,
                            97,
                            32,
                            102,
                            105,
                            101,
                            108,
                            100,
                            44,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            101,
                            109,
                            112,
                            116,
                            121,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            74,
                            20,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            13,
                            10,
                            11,
                            105,
                            100,
                            112,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([19, 58, 1, 42, 26, 14, 47, 105, 100, 112, 115, 47, 123, 105, 100, 112, 95, 105, 100, 125]),
                    ],
                },
            },
        },
        deactivateIDP: {
            name: "DeactivateIDP",
            requestType: DeactivateIDPRequest,
            requestStream: false,
            responseType: DeactivateIDPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            157,
                            3,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            46,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            68,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            250,
                            1,
                            83,
                            101,
                            116,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            116,
                            97,
                            116,
                            101,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            116,
                            111,
                            32,
                            105,
                            110,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            99,
                            97,
                            110,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            116,
                            97,
                            116,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            46,
                            32,
                            85,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            32,
                            73,
                            116,
                            32,
                            109,
                            105,
                            103,
                            104,
                            116,
                            32,
                            99,
                            97,
                            117,
                            115,
                            101,
                            32,
                            116,
                            114,
                            111,
                            117,
                            98,
                            108,
                            101,
                            115,
                            32,
                            105,
                            102,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            109,
                            101,
                            116,
                            104,
                            111,
                            100,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            74,
                            24,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            17,
                            10,
                            15,
                            105,
                            100,
                            112,
                            32,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            74,
                            62,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            55,
                            10,
                            24,
                            85,
                            110,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            73,
                            68,
                            80,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            28,
                            34,
                            26,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            123,
                            105,
                            100,
                            112,
                            95,
                            105,
                            100,
                            125,
                            47,
                            95,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        reactivateIDP: {
            name: "ReactivateIDP",
            requestType: ReactivateIDPRequest,
            requestStream: false,
            responseType: ReactivateIDPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            201,
                            2,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            46,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            82,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            166,
                            1,
                            83,
                            101,
                            116,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            116,
                            97,
                            116,
                            101,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            99,
                            97,
                            110,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            116,
                            97,
                            116,
                            101,
                            32,
                            105,
                            110,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            46,
                            32,
                            85,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            32,
                            97,
                            103,
                            97,
                            105,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            74,
                            24,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            17,
                            10,
                            15,
                            105,
                            100,
                            112,
                            32,
                            114,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            74,
                            62,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            55,
                            10,
                            24,
                            117,
                            110,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            73,
                            68,
                            80,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            28,
                            34,
                            26,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            123,
                            105,
                            100,
                            112,
                            95,
                            105,
                            100,
                            125,
                            47,
                            95,
                            114,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        removeIDP: {
            name: "RemoveIDP",
            requestType: RemoveIDPRequest,
            requestStream: false,
            responseType: RemoveIDPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            131,
                            3,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            42,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            236,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            112,
                            101,
                            114,
                            109,
                            97,
                            110,
                            101,
                            110,
                            116,
                            108,
                            121,
                            46,
                            32,
                            65,
                            108,
                            108,
                            32,
                            108,
                            105,
                            110,
                            107,
                            115,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            73,
                            68,
                            80,
                            32,
                            111,
                            110,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            100,
                            101,
                            108,
                            101,
                            116,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            119,
                            101,
                            108,
                            108,
                            46,
                            32,
                            84,
                            104,
                            101,
                            121,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            32,
                            73,
                            102,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            116,
                            104,
                            101,
                            105,
                            114,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            105,
                            108,
                            105,
                            116,
                            121,
                            32,
                            105,
                            116,
                            32,
                            109,
                            105,
                            103,
                            104,
                            116,
                            32,
                            99,
                            97,
                            117,
                            115,
                            101,
                            32,
                            112,
                            114,
                            111,
                            98,
                            108,
                            101,
                            109,
                            115,
                            46,
                            74,
                            20,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            13,
                            10,
                            11,
                            105,
                            100,
                            112,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            74,
                            58,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            51,
                            10,
                            20,
                            117,
                            110,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            73,
                            68,
                            80,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 42, 14, 47, 105, 100, 112, 115, 47, 123, 105, 100, 112, 95, 105, 100, 125])],
                },
            },
        },
        updateIDPOIDCConfig: {
            name: "UpdateIDPOIDCConfig",
            requestType: UpdateIDPOIDCConfigRequest,
            requestStream: false,
            responseType: UpdateIDPOIDCConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            234,
                            2,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            47,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            143,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            79,
                            73,
                            68,
                            67,
                            45,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            97,
                            110,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            65,
                            108,
                            108,
                            32,
                            102,
                            105,
                            101,
                            108,
                            100,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            46,
                            32,
                            73,
                            102,
                            32,
                            97,
                            32,
                            102,
                            105,
                            101,
                            108,
                            100,
                            32,
                            104,
                            97,
                            115,
                            32,
                            110,
                            111,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            101,
                            109,
                            112,
                            116,
                            121,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            74,
                            28,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            21,
                            10,
                            19,
                            79,
                            73,
                            68,
                            67,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            74,
                            57,
                            10,
                            3,
                            52,
                            48,
                            57,
                            18,
                            50,
                            10,
                            19,
                            112,
                            114,
                            101,
                            99,
                            111,
                            110,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            31,
                            58,
                            1,
                            42,
                            26,
                            26,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            123,
                            105,
                            100,
                            112,
                            95,
                            105,
                            100,
                            125,
                            47,
                            111,
                            105,
                            100,
                            99,
                            95,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                        ]),
                    ],
                },
            },
        },
        updateIDPJWTConfig: {
            name: "UpdateIDPJWTConfig",
            requestType: UpdateIDPJWTConfigRequest,
            requestStream: false,
            responseType: UpdateIDPJWTConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            231,
                            2,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            46,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            74,
                            87,
                            84,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            142,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            74,
                            87,
                            84,
                            45,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            97,
                            110,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            65,
                            108,
                            108,
                            32,
                            102,
                            105,
                            101,
                            108,
                            100,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            46,
                            32,
                            73,
                            102,
                            32,
                            97,
                            32,
                            102,
                            105,
                            101,
                            108,
                            100,
                            32,
                            104,
                            97,
                            115,
                            32,
                            110,
                            111,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            101,
                            109,
                            112,
                            116,
                            121,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            74,
                            27,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            20,
                            10,
                            18,
                            74,
                            87,
                            84,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            74,
                            57,
                            10,
                            3,
                            52,
                            48,
                            57,
                            18,
                            50,
                            10,
                            19,
                            112,
                            114,
                            101,
                            99,
                            111,
                            110,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            30,
                            58,
                            1,
                            42,
                            26,
                            25,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            123,
                            105,
                            100,
                            112,
                            95,
                            105,
                            100,
                            125,
                            47,
                            106,
                            119,
                            116,
                            95,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                        ]),
                    ],
                },
            },
        },
        /**
         * Returns all identity providers, which match the query
         * Limit should always be set, there is a default limit set by the service
         */
        listProviders: {
            name: "ListProviders",
            requestType: ListProvidersRequest,
            requestStream: false,
            responseType: ListProvidersResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            168,
                            1,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            23,
                            76,
                            105,
                            115,
                            116,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            26,
                            121,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            40,
                            115,
                            111,
                            99,
                            105,
                            97,
                            108,
                            47,
                            101,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            41,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            101,
                            46,
                            103,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            44,
                            32,
                            65,
                            122,
                            117,
                            114,
                            101,
                            65,
                            68,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 111, 114, 103, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            28,
                            58,
                            1,
                            42,
                            34,
                            23,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            116,
                            101,
                            109,
                            112,
                            108,
                            97,
                            116,
                            101,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        /** Returns an identity provider of the instance */
        getProviderByID: {
            name: "GetProviderByID",
            requestType: GetProviderByIDRequest,
            requestStream: false,
            responseType: GetProviderByIDResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            49,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            27,
                            71,
                            101,
                            116,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            66,
                            121,
                            32,
                            73,
                            68,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 111, 114, 103, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            22,
                            18,
                            20,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            116,
                            101,
                            109,
                            112,
                            108,
                            97,
                            116,
                            101,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /** Add a new OAuth2 identity provider on the instance */
        addGenericOAuthProvider: {
            name: "AddGenericOAuthProvider",
            requestType: AddGenericOAuthProviderRequest,
            requestStream: false,
            responseType: AddGenericOAuthProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            57,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            35,
                            65,
                            100,
                            100,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            32,
                            79,
                            65,
                            117,
                            116,
                            104,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 105, 100, 112, 115, 47, 111, 97, 117, 116, 104])],
                },
            },
        },
        /** Change an existing OAuth2 identity provider on the instance */
        updateGenericOAuthProvider: {
            name: "UpdateGenericOAuthProvider",
            requestType: UpdateGenericOAuthProviderRequest,
            requestStream: false,
            responseType: UpdateGenericOAuthProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            60,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            38,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            32,
                            79,
                            65,
                            117,
                            116,
                            104,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            111,
                            97,
                            117,
                            116,
                            104,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /** Add a new OIDC identity provider on the instance */
        addGenericOIDCProvider: {
            name: "AddGenericOIDCProvider",
            requestType: AddGenericOIDCProviderRequest,
            requestStream: false,
            responseType: AddGenericOIDCProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            56,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            34,
                            65,
                            100,
                            100,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            23,
                            58,
                            1,
                            42,
                            34,
                            18,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            95,
                            111,
                            105,
                            100,
                            99,
                        ]),
                    ],
                },
            },
        },
        /** Change an existing OIDC identity provider on the instance */
        updateGenericOIDCProvider: {
            name: "UpdateGenericOIDCProvider",
            requestType: UpdateGenericOIDCProviderRequest,
            requestStream: false,
            responseType: UpdateGenericOIDCProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            59,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            37,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            28,
                            58,
                            1,
                            42,
                            26,
                            23,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            95,
                            111,
                            105,
                            100,
                            99,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /** Migrate an existing OIDC identity provider on the instance */
        migrateGenericOIDCProvider: {
            name: "MigrateGenericOIDCProvider",
            requestType: MigrateGenericOIDCProviderRequest,
            requestStream: false,
            responseType: MigrateGenericOIDCProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            60,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            38,
                            77,
                            105,
                            103,
                            114,
                            97,
                            116,
                            101,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            37,
                            58,
                            1,
                            42,
                            34,
                            32,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            95,
                            111,
                            105,
                            100,
                            99,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            109,
                            105,
                            103,
                            114,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        /** Add a new JWT identity provider on the instance */
        addJWTProvider: {
            name: "AddJWTProvider",
            requestType: AddJWTProviderRequest,
            requestStream: false,
            responseType: AddJWTProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            47,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            25,
                            65,
                            100,
                            100,
                            32,
                            74,
                            87,
                            84,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            58,
                            1,
                            42,
                            34,
                            17,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            95,
                            106,
                            119,
                            116,
                        ]),
                    ],
                },
            },
        },
        /** Change an existing JWT identity provider on the instance */
        updateJWTProvider: {
            name: "UpdateJWTProvider",
            requestType: UpdateJWTProviderRequest,
            requestStream: false,
            responseType: UpdateJWTProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            50,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            28,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            74,
                            87,
                            84,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            26,
                            22,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            95,
                            106,
                            119,
                            116,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /** Add a new Azure AD identity provider on the instance */
        addAzureADProvider: {
            name: "AddAzureADProvider",
            requestType: AddAzureADProviderRequest,
            requestStream: false,
            responseType: AddAzureADProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            51,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            29,
                            65,
                            100,
                            100,
                            32,
                            65,
                            122,
                            117,
                            114,
                            101,
                            65,
                            68,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 105, 100, 112, 115, 47, 97, 122, 117, 114, 101])],
                },
            },
        },
        /** Change an existing Azure AD identity provider on the instance */
        updateAzureADProvider: {
            name: "UpdateAzureADProvider",
            requestType: UpdateAzureADProviderRequest,
            requestStream: false,
            responseType: UpdateAzureADProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            54,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            65,
                            122,
                            117,
                            114,
                            101,
                            65,
                            68,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            97,
                            122,
                            117,
                            114,
                            101,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /** Add a new GitHub identity provider on the instance */
        addGitHubProvider: {
            name: "AddGitHubProvider",
            requestType: AddGitHubProviderRequest,
            requestStream: false,
            responseType: AddGitHubProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            50,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            28,
                            65,
                            100,
                            100,
                            32,
                            71,
                            105,
                            116,
                            72,
                            117,
                            98,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 105, 100, 112, 115, 47, 103, 105, 116, 104, 117, 98])],
                },
            },
        },
        /** Change an existing GitHub identity provider on the instance */
        updateGitHubProvider: {
            name: "UpdateGitHubProvider",
            requestType: UpdateGitHubProviderRequest,
            requestStream: false,
            responseType: UpdateGitHubProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            53,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            31,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            105,
                            116,
                            72,
                            117,
                            98,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            58,
                            1,
                            42,
                            26,
                            17,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            105,
                            116,
                            104,
                            117,
                            98,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /** Add a new GitHub Enterprise Server identity provider on the instance */
        addGitHubEnterpriseServerProvider: {
            name: "AddGitHubEnterpriseServerProvider",
            requestType: AddGitHubEnterpriseServerProviderRequest,
            requestStream: false,
            responseType: AddGitHubEnterpriseServerProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            61,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            39,
                            65,
                            100,
                            100,
                            32,
                            71,
                            105,
                            116,
                            72,
                            117,
                            98,
                            32,
                            69,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([20, 58, 1, 42, 34, 15, 47, 105, 100, 112, 115, 47, 103, 105, 116, 104, 117, 98, 95, 101, 115]),
                    ],
                },
            },
        },
        /** Change an existing GitHub Enterprise Server identity provider on the instance */
        updateGitHubEnterpriseServerProvider: {
            name: "UpdateGitHubEnterpriseServerProvider",
            requestType: UpdateGitHubEnterpriseServerProviderRequest,
            requestStream: false,
            responseType: UpdateGitHubEnterpriseServerProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            64,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            42,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            105,
                            116,
                            72,
                            117,
                            98,
                            32,
                            69,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            25,
                            58,
                            1,
                            42,
                            26,
                            20,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            105,
                            116,
                            104,
                            117,
                            98,
                            95,
                            101,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /** Add a new GitLab identity provider on the instance */
        addGitLabProvider: {
            name: "AddGitLabProvider",
            requestType: AddGitLabProviderRequest,
            requestStream: false,
            responseType: AddGitLabProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            50,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            28,
                            65,
                            100,
                            100,
                            32,
                            71,
                            105,
                            116,
                            76,
                            97,
                            98,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 105, 100, 112, 115, 47, 103, 105, 116, 108, 97, 98])],
                },
            },
        },
        /** Change an existing GitLab identity provider on the instance */
        updateGitLabProvider: {
            name: "UpdateGitLabProvider",
            requestType: UpdateGitLabProviderRequest,
            requestStream: false,
            responseType: UpdateGitLabProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            53,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            31,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            105,
                            116,
                            76,
                            97,
                            98,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            58,
                            1,
                            42,
                            34,
                            17,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            105,
                            116,
                            108,
                            97,
                            98,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /** Add a new self hosted GitLab identity provider on the instance */
        addGitLabSelfHostedProvider: {
            name: "AddGitLabSelfHostedProvider",
            requestType: AddGitLabSelfHostedProviderRequest,
            requestStream: false,
            responseType: AddGitLabSelfHostedProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            59,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            37,
                            65,
                            100,
                            100,
                            32,
                            71,
                            105,
                            116,
                            76,
                            97,
                            98,
                            32,
                            83,
                            101,
                            108,
                            102,
                            104,
                            111,
                            115,
                            116,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            29,
                            58,
                            1,
                            42,
                            34,
                            24,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            105,
                            116,
                            108,
                            97,
                            98,
                            95,
                            115,
                            101,
                            108,
                            102,
                            95,
                            104,
                            111,
                            115,
                            116,
                            101,
                            100,
                        ]),
                    ],
                },
            },
        },
        /** Change an existing self hosted GitLab identity provider on the instance */
        updateGitLabSelfHostedProvider: {
            name: "UpdateGitLabSelfHostedProvider",
            requestType: UpdateGitLabSelfHostedProviderRequest,
            requestStream: false,
            responseType: UpdateGitLabSelfHostedProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            62,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            40,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            105,
                            116,
                            76,
                            97,
                            98,
                            32,
                            83,
                            101,
                            108,
                            102,
                            104,
                            111,
                            115,
                            116,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            34,
                            58,
                            1,
                            42,
                            34,
                            29,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            105,
                            116,
                            108,
                            97,
                            98,
                            95,
                            115,
                            101,
                            108,
                            102,
                            95,
                            104,
                            111,
                            115,
                            116,
                            101,
                            100,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /** Add a new Google identity provider on the instance */
        addGoogleProvider: {
            name: "AddGoogleProvider",
            requestType: AddGoogleProviderRequest,
            requestStream: false,
            responseType: AddGoogleProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            50,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            28,
                            65,
                            100,
                            100,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 105, 100, 112, 115, 47, 103, 111, 111, 103, 108, 101])],
                },
            },
        },
        /** Change an existing Google identity provider on the instance */
        updateGoogleProvider: {
            name: "UpdateGoogleProvider",
            requestType: UpdateGoogleProviderRequest,
            requestStream: false,
            responseType: UpdateGoogleProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            53,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            31,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            58,
                            1,
                            42,
                            26,
                            17,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            111,
                            111,
                            103,
                            108,
                            101,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /** Add a new LDAP identity provider on the instance */
        addLDAPProvider: {
            name: "AddLDAPProvider",
            requestType: AddLDAPProviderRequest,
            requestStream: false,
            responseType: AddLDAPProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            48,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            26,
                            65,
                            100,
                            100,
                            32,
                            76,
                            68,
                            65,
                            80,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([15, 58, 1, 42, 34, 10, 47, 105, 100, 112, 115, 47, 108, 100, 97, 112])],
                },
            },
        },
        /** Change an existing LDAP identity provider on the instance */
        updateLDAPProvider: {
            name: "UpdateLDAPProvider",
            requestType: UpdateLDAPProviderRequest,
            requestStream: false,
            responseType: UpdateLDAPProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            51,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            29,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            76,
                            68,
                            65,
                            80,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([20, 58, 1, 42, 26, 15, 47, 105, 100, 112, 115, 47, 108, 100, 97, 112, 47, 123, 105, 100, 125]),
                    ],
                },
            },
        },
        /** Add a new Apple identity provider on the instance */
        addAppleProvider: {
            name: "AddAppleProvider",
            requestType: AddAppleProviderRequest,
            requestStream: false,
            responseType: AddAppleProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            49,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            27,
                            65,
                            100,
                            100,
                            32,
                            65,
                            112,
                            112,
                            108,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 105, 100, 112, 115, 47, 97, 112, 112, 108, 101])],
                },
            },
        },
        /** Change an existing Apple identity provider on the instance */
        updateAppleProvider: {
            name: "UpdateAppleProvider",
            requestType: UpdateAppleProviderRequest,
            requestStream: false,
            responseType: UpdateAppleProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            52,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            30,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            65,
                            112,
                            112,
                            108,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            97,
                            112,
                            112,
                            108,
                            101,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /** Add a new SAML identity provider on the instance */
        addSAMLProvider: {
            name: "AddSAMLProvider",
            requestType: AddSAMLProviderRequest,
            requestStream: false,
            responseType: AddSAMLProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            48,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            26,
                            65,
                            100,
                            100,
                            32,
                            83,
                            65,
                            77,
                            76,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([15, 58, 1, 42, 34, 10, 47, 105, 100, 112, 115, 47, 115, 97, 109, 108])],
                },
            },
        },
        /** Change an existing SAML identity provider on the instance */
        updateSAMLProvider: {
            name: "UpdateSAMLProvider",
            requestType: UpdateSAMLProviderRequest,
            requestStream: false,
            responseType: UpdateSAMLProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            51,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            29,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            83,
                            65,
                            77,
                            76,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([20, 58, 1, 42, 26, 15, 47, 105, 100, 112, 115, 47, 115, 97, 109, 108, 47, 123, 105, 100, 125]),
                    ],
                },
            },
        },
        /** Regenerate certificate for an existing SAML identity provider in the organization */
        regenerateSAMLProviderCertificate: {
            name: "RegenerateSAMLProviderCertificate",
            requestType: RegenerateSAMLProviderCertificateRequest,
            requestStream: false,
            responseType: RegenerateSAMLProviderCertificateResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            67,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            45,
                            82,
                            101,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            101,
                            32,
                            83,
                            65,
                            77,
                            76,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            67,
                            101,
                            114,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            101,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            42,
                            58,
                            1,
                            42,
                            34,
                            37,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            115,
                            97,
                            109,
                            108,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            101,
                            95,
                            99,
                            101,
                            114,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        /**
         * Remove an identity provider
         * Will remove all linked providers of this configuration on the users
         */
        deleteProvider: {
            name: "DeleteProvider",
            requestType: DeleteProviderRequest,
            requestStream: false,
            responseType: DeleteProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            46,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            24,
                            68,
                            101,
                            108,
                            101,
                            116,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            42,
                            20,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            116,
                            101,
                            109,
                            112,
                            108,
                            97,
                            116,
                            101,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        getOrgIAMPolicy: {
            name: "GetOrgIAMPolicy",
            requestType: GetOrgIAMPolicyRequest,
            requestStream: false,
            responseType: GetOrgIAMPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            82,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            18,
                            71,
                            101,
                            116,
                            32,
                            79,
                            114,
                            103,
                            32,
                            73,
                            65,
                            77,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            31,
                            85,
                            115,
                            101,
                            32,
                            71,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            105,
                            110,
                            115,
                            116,
                            101,
                            97,
                            100,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([18, 18, 16, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 111, 114, 103, 105, 97, 109]),
                    ],
                },
            },
        },
        updateOrgIAMPolicy: {
            name: "UpdateOrgIAMPolicy",
            requestType: UpdateOrgIAMPolicyRequest,
            requestStream: false,
            responseType: UpdateOrgIAMPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            88,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            21,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            79,
                            114,
                            103,
                            32,
                            73,
                            65,
                            77,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            34,
                            85,
                            115,
                            101,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            105,
                            110,
                            115,
                            116,
                            101,
                            97,
                            100,
                            88,
                            1,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            111,
                            114,
                            103,
                            105,
                            97,
                            109,
                        ]),
                    ],
                },
            },
        },
        getCustomOrgIAMPolicy: {
            name: "GetCustomOrgIAMPolicy",
            requestType: GetCustomOrgIAMPolicyRequest,
            requestStream: false,
            responseType: GetCustomOrgIAMPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            98,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            18,
                            71,
                            101,
                            116,
                            32,
                            79,
                            114,
                            103,
                            32,
                            73,
                            65,
                            77,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            47,
                            85,
                            115,
                            101,
                            32,
                            71,
                            101,
                            116,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            101,
                            97,
                            100,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            32,
                            18,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            111,
                            114,
                            103,
                            105,
                            97,
                            109,
                        ]),
                    ],
                },
            },
        },
        addCustomOrgIAMPolicy: {
            name: "AddCustomOrgIAMPolicy",
            requestType: AddCustomOrgIAMPolicyRequest,
            requestStream: false,
            responseType: AddCustomOrgIAMPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            106,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            25,
                            65,
                            100,
                            100,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            79,
                            114,
                            103,
                            32,
                            73,
                            65,
                            77,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            48,
                            85,
                            115,
                            101,
                            32,
                            71,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            101,
                            97,
                            100,
                            88,
                            1,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            35,
                            58,
                            1,
                            42,
                            34,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            111,
                            114,
                            103,
                            105,
                            97,
                            109,
                        ]),
                    ],
                },
            },
        },
        updateCustomOrgIAMPolicy: {
            name: "UpdateCustomOrgIAMPolicy",
            requestType: UpdateCustomOrgIAMPolicyRequest,
            requestStream: false,
            responseType: UpdateCustomOrgIAMPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            109,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            28,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            79,
                            114,
                            103,
                            32,
                            73,
                            65,
                            77,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            48,
                            85,
                            115,
                            101,
                            32,
                            71,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            101,
                            97,
                            100,
                            88,
                            1,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            35,
                            58,
                            1,
                            42,
                            26,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            111,
                            114,
                            103,
                            105,
                            97,
                            109,
                        ]),
                    ],
                },
            },
        },
        resetCustomOrgIAMPolicyToDefault: {
            name: "ResetCustomOrgIAMPolicyToDefault",
            requestType: ResetCustomOrgIAMPolicyToDefaultRequest,
            requestStream: false,
            responseType: ResetCustomOrgIAMPolicyToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            119,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            37,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            49,
                            85,
                            115,
                            101,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            101,
                            97,
                            100,
                            88,
                            1,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            32,
                            42,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            111,
                            114,
                            103,
                            105,
                            97,
                            109,
                        ]),
                    ],
                },
            },
        },
        getDomainPolicy: {
            name: "GetDomainPolicy",
            requestType: GetDomainPolicyRequest,
            requestStream: false,
            responseType: GetDomainPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            129,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            19,
                            71,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            174,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            110,
                            100,
                            108,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            105,
                            110,
                            32,
                            114,
                            101,
                            103,
                            97,
                            114,
                            100,
                            115,
                            32,
                            116,
                            111,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            115,
                            44,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            118,
                            97,
                            108,
                            105,
                            100,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            46,
                            74,
                            30,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            23,
                            10,
                            21,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([18, 18, 16, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 100, 111, 109, 97, 105, 110]),
                    ],
                },
            },
        },
        updateDomainPolicy: {
            name: "UpdateDomainPolicy",
            requestType: UpdateDomainPolicyRequest,
            requestStream: false,
            responseType: UpdateDomainPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            192,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            22,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            226,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            110,
                            100,
                            108,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            115,
                            44,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            118,
                            97,
                            108,
                            105,
                            100,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            74,
                            38,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            31,
                            10,
                            29,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                        ]),
                    ],
                },
            },
        },
        getCustomDomainPolicy: {
            name: "GetCustomDomainPolicy",
            requestType: GetCustomDomainPolicyRequest,
            requestStream: false,
            responseType: GetCustomDomainPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            152,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            36,
                            71,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            250,
                            1,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            73,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            100,
                            111,
                            101,
                            115,
                            110,
                            39,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            101,
                            100,
                            46,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            110,
                            100,
                            108,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            105,
                            110,
                            32,
                            114,
                            101,
                            103,
                            97,
                            114,
                            100,
                            115,
                            32,
                            116,
                            111,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            115,
                            44,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            118,
                            97,
                            108,
                            105,
                            100,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            73,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            66,
                            10,
                            64,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            32,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            105,
                            122,
                            101,
                            100,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            32,
                            18,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                        ]),
                    ],
                },
            },
        },
        addCustomDomainPolicy: {
            name: "AddCustomDomainPolicy",
            requestType: AddCustomDomainPolicyRequest,
            requestStream: false,
            responseType: AddCustomDomainPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            222,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            41,
                            83,
                            101,
                            116,
                            32,
                            97,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            97,
                            110,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            230,
                            1,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            110,
                            100,
                            108,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            105,
                            110,
                            32,
                            114,
                            101,
                            103,
                            97,
                            114,
                            100,
                            115,
                            32,
                            116,
                            111,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            115,
                            44,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            118,
                            97,
                            108,
                            105,
                            100,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            30,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            23,
                            10,
                            21,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            35,
                            58,
                            1,
                            42,
                            34,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                        ]),
                    ],
                },
            },
        },
        updateCustomDomainPolicy: {
            name: "UpdateCustomDomainPolicy",
            requestType: UpdateCustomDomainPolicyRequest,
            requestStream: false,
            responseType: UpdateCustomDomainPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            220,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            39,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            230,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            110,
                            100,
                            108,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            105,
                            110,
                            32,
                            114,
                            101,
                            103,
                            97,
                            114,
                            100,
                            115,
                            32,
                            116,
                            111,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            115,
                            44,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            118,
                            97,
                            108,
                            105,
                            100,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            30,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            23,
                            10,
                            21,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            35,
                            58,
                            1,
                            42,
                            26,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                        ]),
                    ],
                },
            },
        },
        resetCustomDomainPolicyToDefault: {
            name: "ResetCustomDomainPolicyToDefault",
            requestType: ResetCustomDomainPolicyToDefaultRequest,
            requestStream: false,
            responseType: ResetCustomDomainPolicyToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            235,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            37,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            215,
                            1,
                            82,
                            101,
                            115,
                            101,
                            116,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            110,
                            100,
                            108,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            105,
                            110,
                            32,
                            114,
                            101,
                            103,
                            97,
                            114,
                            100,
                            115,
                            32,
                            116,
                            111,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            115,
                            44,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            118,
                            97,
                            108,
                            105,
                            100,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            62,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            55,
                            10,
                            53,
                            114,
                            101,
                            115,
                            101,
                            116,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            32,
                            42,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                        ]),
                    ],
                },
            },
        },
        getLabelPolicy: {
            name: "GetLabelPolicy",
            requestType: GetLabelPolicyRequest,
            requestStream: false,
            responseType: GetLabelPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            162,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            38,
                            71,
                            101,
                            116,
                            32,
                            80,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            76,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            196,
                            2,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            108,
                            121,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            104,
                            97,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            114,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            85,
                            73,
                            46,
                            32,
                            68,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            119,
                            104,
                            97,
                            116,
                            32,
                            99,
                            111,
                            108,
                            111,
                            114,
                            115,
                            44,
                            32,
                            102,
                            111,
                            110,
                            116,
                            115,
                            44,
                            32,
                            97,
                            110,
                            100,
                            32,
                            108,
                            111,
                            103,
                            111,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            47,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            44,
                            32,
                            69,
                            45,
                            77,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            67,
                            111,
                            110,
                            115,
                            111,
                            108,
                            101,
                            46,
                            74,
                            29,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            22,
                            10,
                            20,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([17, 18, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 97, 98, 101, 108])],
                },
            },
        },
        getPreviewLabelPolicy: {
            name: "GetPreviewLabelPolicy",
            requestType: GetPreviewLabelPolicyRequest,
            requestStream: false,
            responseType: GetPreviewLabelPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            231,
                            4,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            46,
                            71,
                            101,
                            116,
                            32,
                            80,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            80,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            76,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            129,
                            4,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            115,
                            104,
                            111,
                            119,
                            32,
                            121,
                            111,
                            117,
                            32,
                            104,
                            111,
                            119,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            108,
                            105,
                            107,
                            101,
                            44,
                            32,
                            97,
                            110,
                            100,
                            32,
                            110,
                            111,
                            116,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            105,
                            116,
                            32,
                            100,
                            105,
                            114,
                            101,
                            99,
                            116,
                            108,
                            121,
                            32,
                            102,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            117,
                            116,
                            117,
                            114,
                            101,
                            44,
                            32,
                            105,
                            116,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            97,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            110,
                            100,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            97,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            104,
                            97,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            114,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            85,
                            73,
                            46,
                            32,
                            68,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            119,
                            104,
                            97,
                            116,
                            32,
                            99,
                            111,
                            108,
                            111,
                            114,
                            115,
                            44,
                            32,
                            102,
                            111,
                            110,
                            116,
                            115,
                            44,
                            32,
                            97,
                            110,
                            100,
                            32,
                            108,
                            111,
                            103,
                            111,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            47,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            44,
                            32,
                            69,
                            45,
                            77,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            67,
                            111,
                            110,
                            115,
                            111,
                            108,
                            101,
                            46,
                            74,
                            29,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            22,
                            10,
                            20,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            26,
                            18,
                            24,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            95,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                        ]),
                    ],
                },
            },
        },
        updateLabelPolicy: {
            name: "UpdateLabelPolicy",
            requestType: UpdateLabelPolicyRequest,
            requestStream: false,
            responseType: UpdateLabelPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            212,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            33,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            76,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            243,
                            2,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            110,
                            39,
                            116,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            115,
                            104,
                            111,
                            119,
                            32,
                            121,
                            111,
                            117,
                            32,
                            104,
                            111,
                            119,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            108,
                            105,
                            107,
                            101,
                            44,
                            32,
                            109,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            105,
                            116,
                            32,
                            97,
                            115,
                            32,
                            115,
                            111,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            121,
                            111,
                            117,
                            32,
                            97,
                            114,
                            101,
                            32,
                            104,
                            97,
                            112,
                            112,
                            121,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            68,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            119,
                            104,
                            97,
                            116,
                            32,
                            99,
                            111,
                            108,
                            111,
                            114,
                            115,
                            44,
                            32,
                            102,
                            111,
                            110,
                            116,
                            115,
                            44,
                            32,
                            97,
                            110,
                            100,
                            32,
                            108,
                            111,
                            103,
                            111,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            47,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            44,
                            32,
                            69,
                            45,
                            77,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            67,
                            111,
                            110,
                            115,
                            111,
                            108,
                            101,
                            46,
                            74,
                            37,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            30,
                            10,
                            28,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([20, 58, 1, 42, 26, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 97, 98, 101, 108]),
                    ],
                },
            },
        },
        activateLabelPolicy: {
            name: "ActivateLabelPolicy",
            requestType: ActivateLabelPolicyRequest,
            requestStream: false,
            responseType: ActivateLabelPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            219,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            35,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            76,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            159,
                            2,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            110,
                            39,
                            116,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            68,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            119,
                            104,
                            97,
                            116,
                            32,
                            99,
                            111,
                            108,
                            111,
                            114,
                            115,
                            44,
                            32,
                            102,
                            111,
                            110,
                            116,
                            115,
                            44,
                            32,
                            97,
                            110,
                            100,
                            32,
                            108,
                            111,
                            103,
                            111,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            47,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            44,
                            32,
                            69,
                            45,
                            77,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            67,
                            111,
                            110,
                            115,
                            111,
                            108,
                            101,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            30,
                            58,
                            1,
                            42,
                            34,
                            25,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            95,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        removeLabelPolicyLogo: {
            name: "RemoveLabelPolicyLogo",
            requestType: RemoveLabelPolicyLogoRequest,
            requestStream: false,
            responseType: RemoveLabelPolicyLogoResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            220,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            17,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            76,
                            111,
                            103,
                            111,
                            32,
                            76,
                            105,
                            103,
                            104,
                            116,
                            26,
                            178,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            111,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            103,
                            104,
                            116,
                            32,
                            116,
                            104,
                            101,
                            109,
                            101,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            42,
                            20,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            108,
                            111,
                            103,
                            111,
                        ]),
                    ],
                },
            },
        },
        removeLabelPolicyLogoDark: {
            name: "RemoveLabelPolicyLogoDark",
            requestType: RemoveLabelPolicyLogoDarkRequest,
            requestStream: false,
            responseType: RemoveLabelPolicyLogoDarkResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            218,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            16,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            76,
                            111,
                            103,
                            111,
                            32,
                            68,
                            97,
                            114,
                            107,
                            26,
                            177,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            111,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            97,
                            114,
                            107,
                            32,
                            116,
                            104,
                            101,
                            109,
                            101,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            42,
                            25,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            108,
                            111,
                            103,
                            111,
                            95,
                            100,
                            97,
                            114,
                            107,
                        ]),
                    ],
                },
            },
        },
        removeLabelPolicyIcon: {
            name: "RemoveLabelPolicyIcon",
            requestType: RemoveLabelPolicyIconRequest,
            requestStream: false,
            responseType: RemoveLabelPolicyIconResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            220,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            17,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            73,
                            99,
                            111,
                            110,
                            32,
                            76,
                            105,
                            103,
                            104,
                            116,
                            26,
                            178,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            99,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            103,
                            104,
                            116,
                            32,
                            116,
                            104,
                            101,
                            109,
                            101,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            42,
                            20,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            105,
                            99,
                            111,
                            110,
                        ]),
                    ],
                },
            },
        },
        removeLabelPolicyIconDark: {
            name: "RemoveLabelPolicyIconDark",
            requestType: RemoveLabelPolicyIconDarkRequest,
            requestStream: false,
            responseType: RemoveLabelPolicyIconDarkResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            218,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            16,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            73,
                            99,
                            111,
                            110,
                            32,
                            68,
                            97,
                            114,
                            107,
                            26,
                            177,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            99,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            97,
                            114,
                            107,
                            32,
                            116,
                            104,
                            101,
                            109,
                            101,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            42,
                            25,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            105,
                            99,
                            111,
                            110,
                            95,
                            100,
                            97,
                            114,
                            107,
                        ]),
                    ],
                },
            },
        },
        removeLabelPolicyFont: {
            name: "RemoveLabelPolicyFont",
            requestType: RemoveLabelPolicyFontRequest,
            requestStream: false,
            responseType: RemoveLabelPolicyFontResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            195,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            11,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            70,
                            111,
                            110,
                            116,
                            26,
                            159,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            111,
                            110,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            42,
                            20,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            102,
                            111,
                            110,
                            116,
                        ]),
                    ],
                },
            },
        },
        getLoginPolicy: {
            name: "GetLoginPolicy",
            requestType: GetLoginPolicyRequest,
            requestStream: false,
            responseType: GetLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            234,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            18,
                            71,
                            101,
                            116,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            154,
                            2,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            32,
                            102,
                            111,
                            114,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            110,
                            39,
                            116,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            119,
                            104,
                            97,
                            116,
                            32,
                            107,
                            105,
                            110,
                            100,
                            32,
                            111,
                            102,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            105,
                            108,
                            105,
                            116,
                            105,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            118,
                            101,
                            46,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            108,
                            121,
                            32,
                            115,
                            112,
                            101,
                            97,
                            107,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            98,
                            101,
                            104,
                            97,
                            118,
                            105,
                            111,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            46,
                            74,
                            29,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            22,
                            10,
                            20,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([17, 18, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 111, 103, 105, 110]),
                    ],
                },
            },
        },
        updateLoginPolicy: {
            name: "UpdateLoginPolicy",
            requestType: UpdateLoginPolicyRequest,
            requestStream: false,
            responseType: UpdateLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            252,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            21,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            161,
                            2,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            32,
                            102,
                            111,
                            114,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            110,
                            39,
                            116,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            119,
                            104,
                            97,
                            116,
                            32,
                            107,
                            105,
                            110,
                            100,
                            32,
                            111,
                            102,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            105,
                            108,
                            105,
                            116,
                            105,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            118,
                            101,
                            46,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            108,
                            121,
                            32,
                            115,
                            112,
                            101,
                            97,
                            107,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            98,
                            101,
                            104,
                            97,
                            118,
                            105,
                            111,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            46,
                            74,
                            37,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            30,
                            10,
                            28,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            20,
                            58,
                            1,
                            42,
                            26,
                            15,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                        ]),
                    ],
                },
            },
        },
        listLoginPolicyIDPs: {
            name: "ListLoginPolicyIDPs",
            requestType: ListLoginPolicyIDPsRequest,
            requestStream: false,
            responseType: ListLoginPolicyIDPsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            226,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            30,
                            76,
                            105,
                            115,
                            116,
                            32,
                            76,
                            105,
                            110,
                            107,
                            101,
                            100,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            26,
                            220,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            97,
                            114,
                            101,
                            32,
                            108,
                            105,
                            110,
                            107,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            109,
                            101,
                            97,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            116,
                            104,
                            101,
                            121,
                            32,
                            97,
                            114,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            74,
                            51,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            44,
                            10,
                            42,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            33,
                            58,
                            1,
                            42,
                            34,
                            28,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        addIDPToLoginPolicy: {
            name: "AddIDPToLoginPolicy",
            requestType: AddIDPToLoginPolicyRequest,
            requestStream: false,
            responseType: AddIDPToLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            218,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            28,
                            65,
                            100,
                            100,
                            32,
                            76,
                            105,
                            110,
                            107,
                            101,
                            100,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            208,
                            1,
                            65,
                            100,
                            100,
                            47,
                            108,
                            105,
                            110,
                            107,
                            32,
                            97,
                            32,
                            112,
                            114,
                            101,
                            45,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            109,
                            101,
                            97,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            97,
                            103,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            74,
                            57,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            50,
                            10,
                            48,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            97,
                            100,
                            100,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            25,
                            58,
                            1,
                            42,
                            34,
                            20,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            105,
                            100,
                            112,
                            115,
                        ]),
                    ],
                },
            },
        },
        removeIDPFromLoginPolicy: {
            name: "RemoveIDPFromLoginPolicy",
            requestType: RemoveIDPFromLoginPolicyRequest,
            requestStream: false,
            responseType: RemoveIDPFromLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            215,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            31,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            76,
                            105,
                            110,
                            107,
                            101,
                            100,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            198,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            97,
                            110,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            109,
                            101,
                            97,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            97,
                            103,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            74,
                            61,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            54,
                            10,
                            52,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            31,
                            42,
                            29,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            123,
                            105,
                            100,
                            112,
                            95,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        listLoginPolicySecondFactors: {
            name: "ListLoginPolicySecondFactors",
            requestType: ListLoginPolicySecondFactorsRequest,
            requestStream: false,
            responseType: ListLoginPolicySecondFactorsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            159,
                            4,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            22,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            18,
                            25,
                            76,
                            105,
                            115,
                            116,
                            32,
                            83,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            40,
                            50,
                            70,
                            65,
                            41,
                            26,
                            158,
                            3,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            40,
                            50,
                            70,
                            65,
                            41,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            108,
                            97,
                            121,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            102,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            65,
                            112,
                            112,
                            44,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            101,
                            116,
                            99,
                            41,
                            46,
                            32,
                            80,
                            101,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            73,
                            32,
                            119,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            105,
                            122,
                            101,
                            32,
                            105,
                            116,
                            32,
                            97,
                            115,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            46,
                            74,
                            47,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            40,
                            10,
                            38,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            40,
                            34,
                            38,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        addSecondFactorToLoginPolicy: {
            name: "AddSecondFactorToLoginPolicy",
            requestType: AddSecondFactorToLoginPolicyRequest,
            requestStream: false,
            responseType: AddSecondFactorToLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            207,
                            5,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            22,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            18,
                            23,
                            65,
                            100,
                            100,
                            32,
                            83,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            50,
                            70,
                            65,
                            41,
                            26,
                            137,
                            4,
                            65,
                            100,
                            100,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            50,
                            70,
                            65,
                            41,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            85,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            105,
                            108,
                            105,
                            116,
                            121,
                            32,
                            116,
                            111,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            100,
                            32,
                            109,
                            111,
                            114,
                            101,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            116,
                            111,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            65,
                            112,
                            112,
                            44,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            101,
                            116,
                            99,
                            41,
                            46,
                            32,
                            80,
                            101,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            97,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            73,
                            32,
                            119,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            105,
                            122,
                            101,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            97,
                            115,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            46,
                            74,
                            52,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            45,
                            10,
                            43,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            100,
                            100,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            74,
                            64,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            57,
                            10,
                            26,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            116,
                            121,
                            112,
                            101,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            35,
                            58,
                            1,
                            42,
                            34,
                            30,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                        ]),
                    ],
                },
            },
        },
        removeSecondFactorFromLoginPolicy: {
            name: "RemoveSecondFactorFromLoginPolicy",
            requestType: RemoveSecondFactorFromLoginPolicyRequest,
            requestStream: false,
            responseType: RemoveSecondFactorFromLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            176,
                            5,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            22,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            18,
                            26,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            83,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            50,
                            70,
                            65,
                            41,
                            26,
                            227,
                            3,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            50,
                            70,
                            65,
                            41,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            85,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            108,
                            97,
                            121,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            102,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            65,
                            112,
                            112,
                            44,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            101,
                            116,
                            99,
                            41,
                            46,
                            32,
                            80,
                            101,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            73,
                            32,
                            119,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            105,
                            122,
                            101,
                            32,
                            105,
                            116,
                            32,
                            97,
                            115,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            46,
                            74,
                            56,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            49,
                            10,
                            47,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            74,
                            64,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            57,
                            10,
                            26,
                            73,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            116,
                            121,
                            112,
                            101,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            39,
                            42,
                            37,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            123,
                            116,
                            121,
                            112,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        listLoginPolicyMultiFactors: {
            name: "ListLoginPolicyMultiFactors",
            requestType: ListLoginPolicyMultiFactorsRequest,
            requestStream: false,
            responseType: ListLoginPolicyMultiFactorsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            235,
                            4,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            22,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            18,
                            24,
                            76,
                            105,
                            115,
                            116,
                            32,
                            77,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            40,
                            77,
                            70,
                            65,
                            41,
                            26,
                            236,
                            3,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            40,
                            77,
                            70,
                            65,
                            41,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            108,
                            97,
                            121,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            102,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            65,
                            112,
                            112,
                            44,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            101,
                            116,
                            99,
                            41,
                            46,
                            32,
                            32,
                            80,
                            101,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            111,
                            114,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            102,
                            105,
                            114,
                            115,
                            116,
                            32,
                            97,
                            110,
                            100,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            105,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            110,
                            101,
                            99,
                            101,
                            115,
                            115,
                            97,
                            114,
                            121,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            73,
                            32,
                            119,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            105,
                            122,
                            101,
                            32,
                            105,
                            116,
                            32,
                            97,
                            115,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            111,
                            114,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            46,
                            74,
                            46,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            39,
                            10,
                            37,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            39,
                            34,
                            37,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            109,
                            117,
                            108,
                            116,
                            105,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        addMultiFactorToLoginPolicy: {
            name: "AddMultiFactorToLoginPolicy",
            requestType: AddMultiFactorToLoginPolicyRequest,
            requestStream: false,
            responseType: AddMultiFactorToLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            152,
                            5,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            22,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            18,
                            22,
                            65,
                            100,
                            100,
                            32,
                            77,
                            117,
                            108,
                            116,
                            105,
                            45,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            77,
                            70,
                            65,
                            41,
                            26,
                            213,
                            3,
                            65,
                            100,
                            100,
                            32,
                            97,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            77,
                            70,
                            65,
                            41,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            108,
                            97,
                            121,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            102,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            65,
                            112,
                            112,
                            44,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            101,
                            116,
                            99,
                            41,
                            46,
                            32,
                            32,
                            80,
                            101,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            111,
                            114,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            102,
                            105,
                            114,
                            115,
                            116,
                            32,
                            97,
                            110,
                            100,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            105,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            110,
                            101,
                            99,
                            101,
                            115,
                            115,
                            97,
                            114,
                            121,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            73,
                            32,
                            119,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            105,
                            122,
                            101,
                            32,
                            105,
                            116,
                            32,
                            97,
                            115,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            111,
                            114,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            46,
                            74,
                            51,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            44,
                            10,
                            42,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            100,
                            100,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            74,
                            63,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            56,
                            10,
                            25,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            116,
                            121,
                            112,
                            101,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            34,
                            58,
                            1,
                            42,
                            34,
                            29,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            109,
                            117,
                            108,
                            116,
                            105,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                        ]),
                    ],
                },
            },
        },
        removeMultiFactorFromLoginPolicy: {
            name: "RemoveMultiFactorFromLoginPolicy",
            requestType: RemoveMultiFactorFromLoginPolicyRequest,
            requestStream: false,
            responseType: RemoveMultiFactorFromLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            179,
                            5,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            22,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            18,
                            25,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            77,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            77,
                            70,
                            65,
                            41,
                            26,
                            218,
                            3,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            97,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            77,
                            70,
                            65,
                            41,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            108,
                            97,
                            121,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            102,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            65,
                            112,
                            112,
                            44,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            101,
                            116,
                            99,
                            41,
                            46,
                            32,
                            32,
                            80,
                            101,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            111,
                            114,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            102,
                            105,
                            114,
                            115,
                            116,
                            32,
                            97,
                            110,
                            100,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            105,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            110,
                            101,
                            99,
                            101,
                            115,
                            115,
                            97,
                            114,
                            121,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            73,
                            32,
                            119,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            105,
                            122,
                            101,
                            32,
                            105,
                            116,
                            32,
                            97,
                            115,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            111,
                            114,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            46,
                            74,
                            56,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            49,
                            10,
                            47,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            74,
                            77,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            70,
                            10,
                            39,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            110,
                            111,
                            116,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            38,
                            42,
                            36,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            109,
                            117,
                            108,
                            116,
                            105,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            123,
                            116,
                            121,
                            112,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getPasswordComplexityPolicy: {
            name: "GetPasswordComplexityPolicy",
            requestType: GetPasswordComplexityPolicyRequest,
            requestStream: false,
            responseType: GetPasswordComplexityPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            202,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            17,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            32,
                            71,
                            101,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            67,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            219,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            40,
                            99,
                            104,
                            97,
                            114,
                            97,
                            99,
                            116,
                            101,
                            114,
                            115,
                            44,
                            32,
                            108,
                            101,
                            110,
                            103,
                            116,
                            104,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            41,
                            74,
                            43,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            36,
                            10,
                            34,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            31,
                            18,
                            29,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            47,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                        ]),
                    ],
                },
            },
        },
        updatePasswordComplexityPolicy: {
            name: "UpdatePasswordComplexityPolicy",
            requestType: UpdatePasswordComplexityPolicyRequest,
            requestStream: false,
            responseType: UpdatePasswordComplexityPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            149,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            17,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            35,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            67,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            227,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            40,
                            99,
                            104,
                            97,
                            114,
                            97,
                            99,
                            116,
                            101,
                            114,
                            115,
                            44,
                            32,
                            108,
                            101,
                            110,
                            103,
                            116,
                            104,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            41,
                            74,
                            51,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            44,
                            10,
                            42,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            34,
                            58,
                            1,
                            42,
                            26,
                            29,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            47,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                        ]),
                    ],
                },
            },
        },
        getPasswordAgePolicy: {
            name: "GetPasswordAgePolicy",
            requestType: GetPasswordAgePolicyRequest,
            requestStream: false,
            responseType: GetPasswordAgePolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            212,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            17,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            25,
                            71,
                            101,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            65,
                            103,
                            101,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            243,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            97,
                            103,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            120,
                            112,
                            105,
                            114,
                            121,
                            32,
                            111,
                            102,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            44,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            102,
                            111,
                            114,
                            99,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            105,
                            116,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            101,
                            120,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            46,
                            74,
                            36,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            29,
                            10,
                            27,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            97,
                            103,
                            101,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            24,
                            18,
                            22,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            47,
                            97,
                            103,
                            101,
                        ]),
                    ],
                },
            },
        },
        updatePasswordAgePolicy: {
            name: "UpdatePasswordAgePolicy",
            requestType: UpdatePasswordAgePolicyRequest,
            requestStream: false,
            responseType: UpdatePasswordAgePolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            166,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            17,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            28,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            65,
                            103,
                            101,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            130,
                            2,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            120,
                            112,
                            105,
                            114,
                            121,
                            32,
                            111,
                            102,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            44,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            102,
                            111,
                            114,
                            99,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            105,
                            116,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            101,
                            120,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            46,
                            74,
                            44,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            37,
                            10,
                            35,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            97,
                            103,
                            101,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            26,
                            22,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            47,
                            97,
                            103,
                            101,
                        ]),
                    ],
                },
            },
        },
        getLockoutPolicy: {
            name: "GetLockoutPolicy",
            requestType: GetLockoutPolicyRequest,
            requestStream: false,
            responseType: GetLockoutPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            252,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            17,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            29,
                            71,
                            101,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            76,
                            111,
                            99,
                            107,
                            111,
                            117,
                            116,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            156,
                            2,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            108,
                            111,
                            99,
                            107,
                            111,
                            117,
                            116,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            108,
                            111,
                            99,
                            107,
                            101,
                            100,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            104,
                            111,
                            119,
                            32,
                            109,
                            97,
                            110,
                            121,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            97,
                            116,
                            116,
                            101,
                            109,
                            112,
                            116,
                            115,
                            41,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            117,
                            110,
                            108,
                            111,
                            99,
                            107,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            74,
                            31,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            24,
                            10,
                            22,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            99,
                            107,
                            111,
                            117,
                            116,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([19, 18, 17, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 111, 99, 107, 111, 117, 116]),
                    ],
                },
            },
        },
        updateLockoutPolicy: {
            name: "UpdateLockoutPolicy",
            requestType: UpdateLockoutPolicyRequest,
            requestStream: false,
            responseType: UpdateLockoutPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            221,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            17,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            76,
                            111,
                            99,
                            107,
                            111,
                            117,
                            116,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            155,
                            2,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            108,
                            111,
                            99,
                            107,
                            111,
                            117,
                            116,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            108,
                            111,
                            99,
                            107,
                            101,
                            100,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            104,
                            111,
                            119,
                            32,
                            109,
                            97,
                            110,
                            121,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            97,
                            116,
                            116,
                            101,
                            109,
                            112,
                            116,
                            115,
                            41,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            117,
                            110,
                            108,
                            111,
                            99,
                            107,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            31,
                            58,
                            1,
                            42,
                            26,
                            26,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            47,
                            108,
                            111,
                            99,
                            107,
                            111,
                            117,
                            116,
                        ]),
                    ],
                },
            },
        },
        getPrivacyPolicy: {
            name: "GetPrivacyPolicy",
            requestType: GetPrivacyPolicyRequest,
            requestStream: false,
            responseType: GetPrivacyPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            214,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            16,
                            80,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            20,
                            71,
                            101,
                            116,
                            32,
                            80,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            128,
                            2,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            114,
                            109,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            115,
                            101,
                            114,
                            118,
                            105,
                            99,
                            101,
                            115,
                            44,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            32,
                            65,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            105,
                            110,
                            103,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            99,
                            101,
                            112,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            74,
                            31,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            24,
                            10,
                            22,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([19, 18, 17, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 112, 114, 105, 118, 97, 99, 121]),
                    ],
                },
            },
        },
        updatePrivacyPolicy: {
            name: "UpdatePrivacyPolicy",
            requestType: UpdatePrivacyPolicyRequest,
            requestStream: false,
            responseType: UpdatePrivacyPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            229,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            16,
                            80,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            23,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            80,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            204,
                            2,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            114,
                            109,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            115,
                            101,
                            114,
                            118,
                            105,
                            99,
                            101,
                            115,
                            44,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            32,
                            65,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            105,
                            110,
                            103,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            99,
                            101,
                            112,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            110,
                            103,
                            125,
                            125,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            116,
                            32,
                            116,
                            111,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            108,
                            105,
                            110,
                            107,
                            115,
                            32,
                            98,
                            97,
                            115,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            46,
                            74,
                            39,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            32,
                            10,
                            30,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            22,
                            58,
                            1,
                            42,
                            26,
                            17,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                        ]),
                    ],
                },
            },
        },
        addNotificationPolicy: {
            name: "AddNotificationPolicy",
            requestType: AddNotificationPolicyRequest,
            requestStream: false,
            responseType: AddNotificationPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            217,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            21,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            25,
                            65,
                            100,
                            100,
                            32,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            244,
                            1,
                            65,
                            100,
                            100,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            110,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            41,
                            46,
                            74,
                            36,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            29,
                            10,
                            27,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            34,
                            22,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                        ]),
                    ],
                },
            },
        },
        getNotificationPolicy: {
            name: "GetNotificationPolicy",
            requestType: GetNotificationPolicyRequest,
            requestStream: false,
            responseType: GetNotificationPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            223,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            21,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            28,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            32,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            247,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            110,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            41,
                            46,
                            74,
                            36,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            29,
                            10,
                            27,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            24,
                            18,
                            22,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                        ]),
                    ],
                },
            },
        },
        updateNotificationPolicy: {
            name: "UpdateNotificationPolicy",
            requestType: UpdateNotificationPolicyRequest,
            requestStream: false,
            responseType: UpdateNotificationPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            159,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            21,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            28,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            247,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            110,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            41,
                            46,
                            74,
                            44,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            37,
                            10,
                            35,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            26,
                            22,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                        ]),
                    ],
                },
            },
        },
        getDefaultInitMessageText: {
            name: "GetDefaultInitMessageText",
            requestType: GetDefaultInitMessageTextRequest,
            requestStream: false,
            responseType: GetDefaultInitMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            234,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            29,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            73,
                            110,
                            105,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            185,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            105,
                            116,
                            105,
                            97,
                            108,
                            105,
                            122,
                            101,
                            45,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            104,
                            97,
                            115,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            110,
                            111,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            111,
                            114,
                            32,
                            97,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            39,
                            18,
                            37,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            105,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomInitMessageText: {
            name: "GetCustomInitMessageText",
            requestType: GetCustomInitMessageTextRequest,
            requestStream: false,
            responseType: GetCustomInitMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            235,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            28,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            73,
                            110,
                            105,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            187,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            105,
                            116,
                            105,
                            97,
                            108,
                            105,
                            122,
                            101,
                            45,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            104,
                            97,
                            115,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            110,
                            111,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            111,
                            114,
                            32,
                            97,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            31,
                            18,
                            29,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            105,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultInitMessageText: {
            name: "SetDefaultInitMessageText",
            requestType: SetDefaultInitMessageTextRequest,
            requestStream: false,
            responseType: SetDefaultInitMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            250,
                            4,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            36,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            73,
                            110,
                            105,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            194,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            105,
                            116,
                            105,
                            97,
                            108,
                            105,
                            122,
                            101,
                            45,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            104,
                            97,
                            115,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            110,
                            111,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            111,
                            114,
                            32,
                            97,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            67,
                            111,
                            100,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            34,
                            58,
                            1,
                            42,
                            26,
                            29,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            105,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomInitMessageTextToDefault: {
            name: "ResetCustomInitMessageTextToDefault",
            requestType: ResetCustomInitMessageTextToDefaultRequest,
            requestStream: false,
            responseType: ResetCustomInitMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            204,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            41,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            73,
                            110,
                            105,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            143,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            105,
                            116,
                            105,
                            97,
                            108,
                            105,
                            122,
                            101,
                            45,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            31,
                            42,
                            29,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            105,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultPasswordResetMessageText: {
            name: "GetDefaultPasswordResetMessageText",
            requestType: GetDefaultPasswordResetMessageTextRequest,
            requestStream: false,
            responseType: GetDefaultPasswordResetMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            210,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            39,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            151,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            114,
                            101,
                            115,
                            101,
                            116,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            102,
                            111,
                            114,
                            103,
                            111,
                            116,
                            45,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            48,
                            18,
                            46,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            97,
                            102,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            114,
                            101,
                            115,
                            101,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomPasswordResetMessageText: {
            name: "GetCustomPasswordResetMessageText",
            requestType: GetCustomPasswordResetMessageTextRequest,
            requestStream: false,
            responseType: GetCustomPasswordResetMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            211,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            38,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            153,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            114,
                            101,
                            115,
                            101,
                            116,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            102,
                            111,
                            114,
                            103,
                            111,
                            116,
                            45,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            40,
                            18,
                            38,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            114,
                            101,
                            115,
                            101,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultPasswordResetMessageText: {
            name: "SetDefaultPasswordResetMessageText",
            requestType: SetDefaultPasswordResetMessageTextRequest,
            requestStream: false,
            responseType: SetDefaultPasswordResetMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            231,
                            4,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            46,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            165,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            114,
                            101,
                            115,
                            101,
                            116,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            102,
                            111,
                            114,
                            103,
                            111,
                            116,
                            45,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            67,
                            111,
                            100,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            43,
                            58,
                            1,
                            42,
                            26,
                            38,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            114,
                            101,
                            115,
                            101,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomPasswordResetMessageTextToDefault: {
            name: "ResetCustomPasswordResetMessageTextToDefault",
            requestType: ResetCustomPasswordResetMessageTextToDefaultRequest,
            requestStream: false,
            responseType: ResetCustomPasswordResetMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            218,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            51,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            147,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            114,
                            101,
                            115,
                            101,
                            116,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            40,
                            42,
                            38,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            114,
                            101,
                            115,
                            101,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultVerifyEmailMessageText: {
            name: "GetDefaultVerifyEmailMessageText",
            requestType: GetDefaultVerifyEmailMessageTextRequest,
            requestStream: false,
            responseType: GetDefaultVerifyEmailMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            207,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            37,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            150,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            45,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            46,
                            18,
                            44,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomVerifyEmailMessageText: {
            name: "GetCustomVerifyEmailMessageText",
            requestType: GetCustomVerifyEmailMessageTextRequest,
            requestStream: false,
            responseType: GetCustomVerifyEmailMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            208,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            36,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            152,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            45,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            38,
                            18,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultVerifyEmailMessageText: {
            name: "SetDefaultVerifyEmailMessageText",
            requestType: SetDefaultVerifyEmailMessageTextRequest,
            requestStream: false,
            responseType: SetDefaultVerifyEmailMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            220,
                            4,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            37,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            163,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            110,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            67,
                            111,
                            100,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            41,
                            58,
                            1,
                            42,
                            26,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomVerifyEmailMessageTextToDefault: {
            name: "ResetCustomVerifyEmailMessageTextToDefault",
            requestType: ResetCustomVerifyEmailMessageTextToDefaultRequest,
            requestStream: false,
            responseType: ResetCustomVerifyEmailMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            209,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            49,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            140,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            38,
                            42,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultVerifyPhoneMessageText: {
            name: "GetDefaultVerifyPhoneMessageText",
            requestType: GetDefaultVerifyPhoneMessageTextRequest,
            requestStream: false,
            responseType: GetDefaultVerifyPhoneMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            244,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            37,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            187,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            45,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            46,
                            18,
                            44,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            112,
                            104,
                            111,
                            110,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomVerifyPhoneMessageText: {
            name: "GetCustomVerifyPhoneMessageText",
            requestType: GetCustomVerifyPhoneMessageTextRequest,
            requestStream: false,
            responseType: GetCustomVerifyPhoneMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            245,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            36,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            189,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            45,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            38,
                            18,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            112,
                            104,
                            111,
                            110,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultVerifyPhoneMessageText: {
            name: "SetDefaultVerifyPhoneMessageText",
            requestType: SetDefaultVerifyPhoneMessageTextRequest,
            requestStream: false,
            responseType: SetDefaultVerifyPhoneMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            136,
                            5,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            43,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            201,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            45,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            67,
                            111,
                            100,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            41,
                            58,
                            1,
                            42,
                            26,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            112,
                            104,
                            111,
                            110,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomVerifyPhoneMessageTextToDefault: {
            name: "ResetCustomVerifyPhoneMessageTextToDefault",
            requestType: ResetCustomVerifyPhoneMessageTextToDefaultRequest,
            requestStream: false,
            responseType: ResetCustomVerifyPhoneMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            203,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            49,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            134,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            45,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            38,
                            42,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            112,
                            104,
                            111,
                            110,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultVerifySMSOTPMessageText: {
            name: "GetDefaultVerifySMSOTPMessageText",
            requestType: GetDefaultVerifySMSOTPMessageTextRequest,
            requestStream: false,
            responseType: GetDefaultVerifySMSOTPMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            248,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            39,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            189,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            110,
                            101,
                            45,
                            116,
                            105,
                            109,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            47,
                            18,
                            45,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            115,
                            109,
                            115,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomVerifySMSOTPMessageText: {
            name: "GetCustomVerifySMSOTPMessageText",
            requestType: GetCustomVerifySMSOTPMessageTextRequest,
            requestStream: false,
            responseType: GetCustomVerifySMSOTPMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            249,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            38,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            191,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            110,
                            101,
                            45,
                            116,
                            105,
                            109,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            39,
                            18,
                            37,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            115,
                            109,
                            115,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultVerifySMSOTPMessageText: {
            name: "SetDefaultVerifySMSOTPMessageText",
            requestType: SetDefaultVerifySMSOTPMessageTextRequest,
            requestStream: false,
            responseType: SetDefaultVerifySMSOTPMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            140,
                            5,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            45,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            203,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            110,
                            101,
                            45,
                            116,
                            105,
                            109,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            67,
                            111,
                            100,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            42,
                            58,
                            1,
                            42,
                            26,
                            37,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            115,
                            109,
                            115,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomVerifySMSOTPMessageTextToDefault: {
            name: "ResetCustomVerifySMSOTPMessageTextToDefault",
            requestType: ResetCustomVerifySMSOTPMessageTextToDefaultRequest,
            requestStream: false,
            responseType: ResetCustomVerifySMSOTPMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            207,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            51,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            136,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            39,
                            42,
                            37,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            115,
                            109,
                            115,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultVerifyEmailOTPMessageText: {
            name: "GetDefaultVerifyEmailOTPMessageText",
            requestType: GetDefaultVerifyEmailOTPMessageTextRequest,
            requestStream: false,
            responseType: GetDefaultVerifyEmailOTPMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            250,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            39,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            191,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            79,
                            84,
                            80,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            110,
                            101,
                            45,
                            116,
                            105,
                            109,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            49,
                            18,
                            47,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomVerifyEmailOTPMessageText: {
            name: "GetCustomVerifyEmailOTPMessageText",
            requestType: GetCustomVerifyEmailOTPMessageTextRequest,
            requestStream: false,
            responseType: GetCustomVerifyEmailOTPMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            244,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            38,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            186,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            79,
                            84,
                            80,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            110,
                            101,
                            45,
                            116,
                            105,
                            109,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            41,
                            18,
                            39,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultVerifyEmailOTPMessageText: {
            name: "SetDefaultVerifyEmailOTPMessageText",
            requestType: SetDefaultVerifyEmailOTPMessageTextRequest,
            requestStream: false,
            responseType: SetDefaultVerifyEmailOTPMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            135,
                            5,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            45,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            198,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            79,
                            84,
                            80,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            110,
                            101,
                            45,
                            116,
                            105,
                            109,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            67,
                            111,
                            100,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            44,
                            58,
                            1,
                            42,
                            26,
                            39,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomVerifyEmailOTPMessageTextToDefault: {
            name: "ResetCustomVerifyEmailOTPMessageTextToDefault",
            requestType: ResetCustomVerifyEmailOTPMessageTextToDefaultRequest,
            requestStream: false,
            responseType: ResetCustomVerifyEmailOTPMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            202,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            51,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            131,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            79,
                            84,
                            80,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            41,
                            42,
                            39,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultDomainClaimedMessageText: {
            name: "GetDefaultDomainClaimedMessageText",
            requestType: GetDefaultDomainClaimedMessageTextRequest,
            requestStream: false,
            responseType: GetDefaultDomainClaimedMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            129,
                            3,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            39,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            67,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            198,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            115,
                            32,
                            97,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            115,
                            32,
                            105,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            48,
                            18,
                            46,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomDomainClaimedMessageText: {
            name: "GetCustomDomainClaimedMessageText",
            requestType: GetCustomDomainClaimedMessageTextRequest,
            requestStream: false,
            responseType: GetCustomDomainClaimedMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            130,
                            3,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            38,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            67,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            200,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            115,
                            32,
                            97,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            115,
                            32,
                            105,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            40,
                            18,
                            38,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultDomainClaimedMessageText: {
            name: "SetDefaultDomainClaimedMessageText",
            requestType: SetDefaultDomainClaimedMessageTextRequest,
            requestStream: false,
            responseType: SetDefaultDomainClaimedMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            164,
                            5,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            39,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            67,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            233,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            115,
                            32,
                            97,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            115,
                            32,
                            105,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            84,
                            101,
                            109,
                            112,
                            85,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            43,
                            58,
                            1,
                            42,
                            26,
                            38,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomDomainClaimedMessageTextToDefault: {
            name: "ResetCustomDomainClaimedMessageTextToDefault",
            requestType: ResetCustomDomainClaimedMessageTextToDefaultRequest,
            requestStream: false,
            responseType: ResetCustomDomainClaimedMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            207,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            51,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            67,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            136,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            40,
                            42,
                            38,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultPasswordlessRegistrationMessageText: {
            name: "GetDefaultPasswordlessRegistrationMessageText",
            requestType: GetDefaultPasswordlessRegistrationMessageTextRequest,
            requestStream: false,
            responseType: GetDefaultPasswordlessRegistrationMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            153,
                            3,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            50,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            211,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            115,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            44,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            100,
                            101,
                            118,
                            105,
                            99,
                            101,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            60,
                            18,
                            58,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            95,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomPasswordlessRegistrationMessageText: {
            name: "GetCustomPasswordlessRegistrationMessageText",
            requestType: GetCustomPasswordlessRegistrationMessageTextRequest,
            requestStream: false,
            responseType: GetCustomPasswordlessRegistrationMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            173,
                            3,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            49,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            232,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            115,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            44,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            100,
                            101,
                            118,
                            105,
                            99,
                            101,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            52,
                            18,
                            50,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            95,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultPasswordlessRegistrationMessageText: {
            name: "SetDefaultPasswordlessRegistrationMessageText",
            requestType: SetDefaultPasswordlessRegistrationMessageTextRequest,
            requestStream: false,
            responseType: SetDefaultPasswordlessRegistrationMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            178,
                            5,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            50,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            236,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            115,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            44,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            100,
                            101,
                            118,
                            105,
                            99,
                            101,
                            46,
                            32,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            55,
                            58,
                            1,
                            42,
                            26,
                            50,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            95,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomPasswordlessRegistrationMessageTextToDefault: {
            name: "ResetCustomPasswordlessRegistrationMessageTextToDefault",
            requestType: ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest,
            requestStream: false,
            responseType: ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            237,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            62,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            155,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
                    578365826: [
                        Buffer.from([
                            52,
                            42,
                            50,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            95,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultPasswordChangeMessageText: {
            name: "GetDefaultPasswordChangeMessageText",
            requestType: GetDefaultPasswordChangeMessageTextRequest,
            requestStream: false,
            responseType: GetDefaultPasswordChangeMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            211,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            40,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            151,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            45,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            111,
                            102,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            98,
                            101,
                            101,
                            110,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            50,
                            18,
                            48,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            95,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomPasswordChangeMessageText: {
            name: "GetCustomPasswordChangeMessageText",
            requestType: GetCustomPasswordChangeMessageTextRequest,
            requestStream: false,
            responseType: GetCustomPasswordChangeMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            212,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            39,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            153,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            45,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            111,
                            102,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            98,
                            101,
                            101,
                            110,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            42,
                            18,
                            40,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            95,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultPasswordChangeMessageText: {
            name: "SetDefaultPasswordChangeMessageText",
            requestType: SetDefaultPasswordChangeMessageTextRequest,
            requestStream: false,
            responseType: SetDefaultPasswordChangeMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            218,
                            4,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            41,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            157,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            45,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            111,
                            102,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            98,
                            101,
                            101,
                            110,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            46,
                            32,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            45,
                            58,
                            1,
                            42,
                            26,
                            40,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            95,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomPasswordChangeMessageTextToDefault: {
            name: "ResetCustomPasswordChangeMessageTextToDefault",
            requestType: ResetCustomPasswordChangeMessageTextToDefaultRequest,
            requestStream: false,
            responseType: ResetCustomPasswordChangeMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            211,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            53,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            138,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            45,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            42,
                            42,
                            40,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            95,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultInviteUserMessageText: {
            name: "GetDefaultInviteUserMessageText",
            requestType: GetDefaultInviteUserMessageTextRequest,
            requestStream: false,
            responseType: GetDefaultInviteUserMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            196,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            36,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            73,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            140,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            99,
                            111,
                            100,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            46,
                            18,
                            44,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            95,
                            117,
                            115,
                            101,
                            114,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomInviteUserMessageText: {
            name: "GetCustomInviteUserMessageText",
            requestType: GetCustomInviteUserMessageTextRequest,
            requestStream: false,
            responseType: GetCustomInviteUserMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            197,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            35,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            73,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            142,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            99,
                            111,
                            100,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            38,
                            18,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            95,
                            117,
                            115,
                            101,
                            114,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultInviteUserMessageText: {
            name: "SetDefaultInviteUserMessageText",
            requestType: SetDefaultInviteUserMessageTextRequest,
            requestStream: false,
            responseType: SetDefaultInviteUserMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            216,
                            4,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            36,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            73,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            160,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            99,
                            111,
                            100,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            65,
                            112,
                            112,
                            108,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            41,
                            58,
                            1,
                            42,
                            26,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            95,
                            117,
                            115,
                            101,
                            114,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomInviteUserMessageTextToDefault: {
            name: "ResetCustomInviteUserMessageTextToDefault",
            requestType: ResetCustomInviteUserMessageTextToDefaultRequest,
            requestStream: false,
            responseType: ResetCustomInviteUserMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            201,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            48,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            73,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            133,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            38,
                            42,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            95,
                            117,
                            115,
                            101,
                            114,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultLoginTexts: {
            name: "GetDefaultLoginTexts",
            requestType: GetDefaultLoginTextsRequest,
            requestStream: false,
            responseType: GetDefaultLoginTextsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            133,
                            2,
                            10,
                            11,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            22,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            221,
                            1,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            32,
                            111,
                            102,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            44,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            97,
                            114,
                            101,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            32,
                            18,
                            30,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomLoginTexts: {
            name: "GetCustomLoginTexts",
            requestType: GetCustomLoginTextsRequest,
            requestStream: false,
            responseType: GetCustomLoginTextsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            133,
                            2,
                            10,
                            11,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            21,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            222,
                            1,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            32,
                            111,
                            102,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            44,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            24,
                            18,
                            22,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setCustomLoginText: {
            name: "SetCustomLoginText",
            requestType: SetCustomLoginTextsRequest,
            requestStream: false,
            responseType: SetCustomLoginTextsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            134,
                            2,
                            10,
                            11,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            22,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            222,
                            1,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            32,
                            111,
                            102,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            44,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            26,
                            22,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomLoginTextToDefault: {
            name: "ResetCustomLoginTextToDefault",
            requestType: ResetCustomLoginTextsToDefaultRequest,
            requestStream: false,
            responseType: ResetCustomLoginTextsToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            203,
                            2,
                            10,
                            11,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            34,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            151,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            32,
                            111,
                            102,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            44,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
                    578365826: [
                        Buffer.from([
                            24,
                            42,
                            22,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        listIAMMemberRoles: {
            name: "ListIAMMemberRoles",
            requestType: ListIAMMemberRolesRequest,
            requestStream: false,
            responseType: ListIAMMemberRolesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            132,
                            2,
                            10,
                            7,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            10,
                            22,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            65,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            18,
                            21,
                            76,
                            105,
                            115,
                            116,
                            32,
                            73,
                            65,
                            77,
                            32,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            32,
                            82,
                            111,
                            108,
                            101,
                            115,
                            26,
                            162,
                            1,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            111,
                            110,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            115,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            108,
                            101,
                            32,
                            102,
                            111,
                            114,
                            32,
                            97,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            74,
                            37,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            30,
                            10,
                            28,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            73,
                            65,
                            77,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            24,
                            34,
                            22,
                            47,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            47,
                            114,
                            111,
                            108,
                            101,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        listIAMMembers: {
            name: "ListIAMMembers",
            requestType: ListIAMMembersRequest,
            requestStream: false,
            responseType: ListIAMMembersResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            172,
                            2,
                            10,
                            7,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            10,
                            22,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            65,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            18,
                            16,
                            76,
                            105,
                            115,
                            116,
                            32,
                            73,
                            65,
                            77,
                            32,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            26,
                            217,
                            1,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            111,
                            110,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            115,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            104,
                            105,
                            112,
                            115,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            44,
                            32,
                            109,
                            97,
                            116,
                            99,
                            104,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            113,
                            117,
                            101,
                            114,
                            105,
                            101,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            113,
                            117,
                            101,
                            114,
                            105,
                            101,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            65,
                            78,
                            68,
                            32,
                            108,
                            105,
                            110,
                            107,
                            101,
                            100,
                            46,
                            74,
                            27,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            20,
                            10,
                            18,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            73,
                            65,
                            77,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            34,
                            16,
                            47,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        /**
         * Adds a user to the membership list of ZITADEL with the given roles
         * undefined roles will be dropped
         */
        addIAMMember: {
            name: "AddIAMMember",
            requestType: AddIAMMemberRequest,
            requestStream: false,
            responseType: AddIAMMemberResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            184,
                            2,
                            10,
                            7,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            10,
                            22,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            65,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            18,
                            14,
                            65,
                            100,
                            100,
                            32,
                            73,
                            65,
                            77,
                            32,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            26,
                            155,
                            1,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            111,
                            110,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            115,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            111,
                            110,
                            101,
                            32,
                            111,
                            114,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            112,
                            108,
                            101,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            46,
                            74,
                            32,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            25,
                            10,
                            23,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            73,
                            65,
                            77,
                            74,
                            69,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            62,
                            10,
                            31,
                            117,
                            115,
                            101,
                            114,
                            32,
                            110,
                            111,
                            116,
                            32,
                            102,
                            111,
                            117,
                            110,
                            100,
                            32,
                            111,
                            114,
                            32,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [Buffer.from([13, 58, 1, 42, 34, 8, 47, 109, 101, 109, 98, 101, 114, 115])],
                },
            },
        },
        updateIAMMember: {
            name: "UpdateIAMMember",
            requestType: UpdateIAMMemberRequest,
            requestStream: false,
            responseType: UpdateIAMMemberResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            133,
                            3,
                            10,
                            7,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            10,
                            22,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            65,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            18,
                            17,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            73,
                            65,
                            77,
                            32,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            26,
                            237,
                            1,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            111,
                            110,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            115,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            110,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            119,
                            104,
                            111,
                            108,
                            101,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            105,
                            110,
                            99,
                            108,
                            117,
                            100,
                            101,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            121,
                            111,
                            117,
                            32,
                            100,
                            111,
                            110,
                            39,
                            116,
                            32,
                            119,
                            97,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            40,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            41,
                            46,
                            74,
                            34,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            27,
                            10,
                            25,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            73,
                            65,
                            77,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            59,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            52,
                            10,
                            21,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            111,
                            114,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            23,
                            58,
                            1,
                            42,
                            26,
                            18,
                            47,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            47,
                            123,
                            117,
                            115,
                            101,
                            114,
                            95,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        removeIAMMember: {
            name: "RemoveIAMMember",
            requestType: RemoveIAMMemberRequest,
            requestStream: false,
            responseType: RemoveIAMMemberResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            236,
                            2,
                            10,
                            7,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            10,
                            22,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            65,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            18,
                            17,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            73,
                            65,
                            77,
                            32,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            26,
                            221,
                            1,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            111,
                            110,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            115,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            99,
                            97,
                            110,
                            32,
                            115,
                            116,
                            105,
                            108,
                            108,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            32,
                            40,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            112,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            41,
                            74,
                            34,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            27,
                            10,
                            25,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            73,
                            65,
                            77,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            74,
                            50,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            43,
                            10,
                            12,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            20,
                            42,
                            18,
                            47,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            47,
                            123,
                            117,
                            115,
                            101,
                            114,
                            95,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        listViews: {
            name: "ListViews",
            requestType: ListViewsRequest,
            requestStream: false,
            responseType: ListViewsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            137,
                            2,
                            10,
                            17,
                            86,
                            105,
                            101,
                            119,
                            115,
                            47,
                            80,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            22,
                            76,
                            105,
                            115,
                            116,
                            32,
                            86,
                            105,
                            101,
                            119,
                            115,
                            47,
                            80,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            26,
                            182,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            114,
                            101,
                            97,
                            100,
                            32,
                            109,
                            111,
                            100,
                            101,
                            108,
                            115,
                            32,
                            111,
                            102,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            86,
                            105,
                            101,
                            119,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            111,
                            112,
                            116,
                            105,
                            109,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            111,
                            112,
                            116,
                            105,
                            109,
                            105,
                            122,
                            105,
                            110,
                            103,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            108,
                            97,
                            116,
                            101,
                            110,
                            99,
                            105,
                            101,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            121,
                            32,
                            114,
                            101,
                            112,
                            114,
                            101,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            108,
                            116,
                            97,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            104,
                            97,
                            112,
                            112,
                            101,
                            110,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            98,
                            106,
                            101,
                            99,
                            116,
                            115,
                            74,
                            35,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            28,
                            10,
                            26,
                            86,
                            105,
                            101,
                            119,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            113,
                            117,
                            101,
                            114,
                            121,
                            32,
                            111,
                            112,
                            101,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([16, 34, 14, 47, 118, 105, 101, 119, 115, 47, 95, 115, 101, 97, 114, 99, 104])],
                },
            },
        },
        listFailedEvents: {
            name: "ListFailedEvents",
            requestType: ListFailedEventsRequest,
            requestStream: false,
            responseType: ListFailedEventsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            169,
                            2,
                            10,
                            13,
                            70,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            18,
                            18,
                            76,
                            105,
                            115,
                            116,
                            32,
                            70,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            26,
                            204,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            99,
                            111,
                            117,
                            108,
                            100,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            112,
                            114,
                            111,
                            99,
                            101,
                            101,
                            100,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            105,
                            101,
                            119,
                            115,
                            47,
                            112,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                            32,
                            83,
                            111,
                            109,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            110,
                            101,
                            101,
                            100,
                            32,
                            115,
                            101,
                            118,
                            101,
                            114,
                            97,
                            108,
                            32,
                            114,
                            101,
                            116,
                            114,
                            105,
                            101,
                            115,
                            32,
                            116,
                            105,
                            108,
                            108,
                            32,
                            116,
                            104,
                            101,
                            121,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            101,
                            100,
                            46,
                            32,
                            70,
                            111,
                            114,
                            32,
                            101,
                            120,
                            97,
                            109,
                            112,
                            108,
                            101,
                            44,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            83,
                            77,
                            84,
                            80,
                            45,
                            65,
                            80,
                            73,
                            32,
                            119,
                            97,
                            115,
                            110,
                            39,
                            116,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            97,
                            110,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            105,
                            114,
                            115,
                            116,
                            32,
                            116,
                            105,
                            109,
                            101,
                            46,
                            74,
                            53,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            46,
                            10,
                            44,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            119,
                            101,
                            114,
                            101,
                            32,
                            110,
                            111,
                            116,
                            32,
                            112,
                            114,
                            111,
                            99,
                            101,
                            115,
                            115,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            105,
                            101,
                            119,
                            115,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            23,
                            34,
                            21,
                            47,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        removeFailedEvent: {
            name: "RemoveFailedEvent",
            requestType: RemoveFailedEventRequest,
            requestStream: false,
            responseType: RemoveFailedEventResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            198,
                            3,
                            10,
                            13,
                            70,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            18,
                            20,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            70,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            26,
                            185,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            101,
                            118,
                            101,
                            110,
                            115,
                            32,
                            118,
                            105,
                            101,
                            119,
                            44,
                            32,
                            98,
                            117,
                            116,
                            32,
                            110,
                            111,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            115,
                            116,
                            114,
                            101,
                            97,
                            109,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            102,
                            117,
                            108,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            32,
                            119,
                            97,
                            115,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            112,
                            114,
                            111,
                            99,
                            101,
                            115,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            115,
                            111,
                            109,
                            101,
                            32,
                            114,
                            101,
                            116,
                            114,
                            105,
                            101,
                            115,
                            46,
                            32,
                            101,
                            46,
                            103,
                            46,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            116,
                            114,
                            121,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            97,
                            110,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            119,
                            97,
                            115,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            46,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            105,
                            114,
                            115,
                            116,
                            32,
                            116,
                            114,
                            121,
                            32,
                            112,
                            114,
                            111,
                            100,
                            117,
                            99,
                            101,
                            100,
                            32,
                            97,
                            32,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            46,
                            32,
                            89,
                            111,
                            117,
                            32,
                            99,
                            97,
                            110,
                            32,
                            102,
                            105,
                            110,
                            100,
                            32,
                            111,
                            117,
                            116,
                            32,
                            105,
                            102,
                            32,
                            105,
                            116,
                            32,
                            119,
                            111,
                            114,
                            107,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            96,
                            102,
                            97,
                            105,
                            108,
                            117,
                            114,
                            101,
                            95,
                            99,
                            111,
                            117,
                            110,
                            116,
                            96,
                            32,
                            74,
                            37,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            30,
                            10,
                            28,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            115,
                            116,
                            74,
                            60,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            53,
                            10,
                            22,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            110,
                            111,
                            116,
                            32,
                            102,
                            111,
                            117,
                            110,
                            100,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            56,
                            42,
                            54,
                            47,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            47,
                            123,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            125,
                            47,
                            123,
                            118,
                            105,
                            101,
                            119,
                            95,
                            110,
                            97,
                            109,
                            101,
                            125,
                            47,
                            123,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            95,
                            115,
                            101,
                            113,
                            117,
                            101,
                            110,
                            99,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        /** Imports data into an instance and creates different objects */
        importData: {
            name: "ImportData",
            requestType: ImportDataRequest,
            requestStream: false,
            responseType: ImportDataResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            199,
                            1,
                            10,
                            13,
                            73,
                            109,
                            112,
                            111,
                            114,
                            116,
                            47,
                            69,
                            120,
                            112,
                            111,
                            114,
                            116,
                            18,
                            11,
                            73,
                            109,
                            112,
                            111,
                            114,
                            116,
                            32,
                            68,
                            97,
                            116,
                            97,
                            26,
                            168,
                            1,
                            73,
                            109,
                            112,
                            111,
                            114,
                            116,
                            32,
                            100,
                            97,
                            116,
                            97,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            32,
                            116,
                            111,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            73,
                            116,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            100,
                            105,
                            114,
                            101,
                            99,
                            116,
                            108,
                            121,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            32,
                            99,
                            97,
                            110,
                            32,
                            112,
                            111,
                            105,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            97,
                            32,
                            102,
                            105,
                            108,
                            101,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            51,
                            32,
                            115,
                            116,
                            111,
                            114,
                            97,
                            103,
                            101,
                            44,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            97,
                            116,
                            97,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            108,
                            111,
                            97,
                            100,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([12, 58, 1, 42, 34, 7, 47, 105, 109, 112, 111, 114, 116])],
                },
            },
        },
        exportData: {
            name: "ExportData",
            requestType: ExportDataRequest,
            requestStream: false,
            responseType: ExportDataResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            205,
                            1,
                            10,
                            13,
                            73,
                            109,
                            112,
                            111,
                            114,
                            116,
                            47,
                            69,
                            120,
                            112,
                            111,
                            114,
                            116,
                            18,
                            11,
                            69,
                            120,
                            112,
                            111,
                            114,
                            116,
                            32,
                            68,
                            97,
                            116,
                            97,
                            26,
                            174,
                            1,
                            69,
                            120,
                            112,
                            111,
                            114,
                            116,
                            32,
                            100,
                            97,
                            116,
                            97,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            32,
                            116,
                            111,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            73,
                            116,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            100,
                            105,
                            114,
                            101,
                            99,
                            116,
                            108,
                            121,
                            32,
                            101,
                            120,
                            112,
                            111,
                            114,
                            116,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            115,
                            112,
                            111,
                            110,
                            115,
                            101,
                            32,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            32,
                            99,
                            97,
                            110,
                            32,
                            112,
                            111,
                            105,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            97,
                            32,
                            102,
                            105,
                            108,
                            101,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            51,
                            32,
                            115,
                            116,
                            111,
                            114,
                            97,
                            103,
                            101,
                            44,
                            32,
                            119,
                            104,
                            101,
                            114,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            97,
                            116,
                            97,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([12, 58, 1, 42, 34, 7, 47, 101, 120, 112, 111, 114, 116])],
                },
            },
        },
        listEventTypes: {
            name: "ListEventTypes",
            requestType: ListEventTypesRequest,
            requestStream: false,
            responseType: ListEventTypesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            144,
                            1,
                            10,
                            6,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            18,
                            11,
                            69,
                            118,
                            101,
                            110,
                            116,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            26,
                            121,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            108,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            102,
                            105,
                            108,
                            116,
                            101,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([13, 10, 11, 101, 118, 101, 110, 116, 115, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            26,
                            58,
                            1,
                            42,
                            34,
                            21,
                            47,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            47,
                            116,
                            121,
                            112,
                            101,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        listEvents: {
            name: "ListEvents",
            requestType: ListEventsRequest,
            requestStream: false,
            responseType: ListEventsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            146,
                            1,
                            10,
                            6,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            18,
                            13,
                            83,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            26,
                            121,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            108,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            102,
                            105,
                            108,
                            116,
                            101,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([13, 10, 11, 101, 118, 101, 110, 116, 115, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([20, 58, 1, 42, 34, 15, 47, 101, 118, 101, 110, 116, 115, 47, 95, 115, 101, 97, 114, 99, 104]),
                    ],
                },
            },
        },
        listAggregateTypes: {
            name: "ListAggregateTypes",
            requestType: ListAggregateTypesRequest,
            requestStream: false,
            responseType: ListAggregateTypesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            162,
                            1,
                            10,
                            6,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            18,
                            20,
                            76,
                            105,
                            115,
                            116,
                            32,
                            65,
                            103,
                            103,
                            114,
                            101,
                            103,
                            97,
                            116,
                            101,
                            32,
                            84,
                            121,
                            112,
                            101,
                            115,
                            26,
                            129,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            108,
                            101,
                            32,
                            97,
                            103,
                            103,
                            114,
                            101,
                            103,
                            97,
                            116,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            102,
                            105,
                            108,
                            116,
                            101,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            103,
                            103,
                            114,
                            101,
                            103,
                            97,
                            116,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([13, 10, 11, 101, 118, 101, 110, 116, 115, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            30,
                            58,
                            1,
                            42,
                            34,
                            25,
                            47,
                            97,
                            103,
                            103,
                            114,
                            101,
                            103,
                            97,
                            116,
                            101,
                            115,
                            47,
                            116,
                            121,
                            112,
                            101,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        /**
         * Activates the "LoginDefaultOrg" feature by setting the flag to "true"
         * This is irreversible!
         * Once activated, the login UI will use the settings of the default org (and not from the instance) if not organization context is set
         */
        activateFeatureLoginDefaultOrg: {
            name: "ActivateFeatureLoginDefaultOrg",
            requestType: ActivateFeatureLoginDefaultOrgRequest,
            requestStream: false,
            responseType: ActivateFeatureLoginDefaultOrgResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 102, 101, 97, 116, 117, 114, 101, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            29,
                            26,
                            27,
                            47,
                            102,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            95,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            95,
                            111,
                            114,
                            103,
                        ]),
                    ],
                },
            },
        },
        listMilestones: {
            name: "ListMilestones",
            requestType: ListMilestonesRequest,
            requestStream: false,
            responseType: ListMilestonesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            85,
                            10,
                            10,
                            77,
                            105,
                            108,
                            101,
                            115,
                            116,
                            111,
                            110,
                            101,
                            115,
                            18,
                            17,
                            83,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            77,
                            105,
                            108,
                            101,
                            115,
                            116,
                            111,
                            110,
                            101,
                            115,
                            26,
                            52,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            114,
                            101,
                            97,
                            99,
                            104,
                            101,
                            100,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            117,
                            115,
                            97,
                            103,
                            101,
                            32,
                            109,
                            105,
                            108,
                            101,
                            115,
                            116,
                            111,
                            110,
                            101,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 109, 105, 108, 101, 115, 116, 111, 110, 101, 115, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            24,
                            58,
                            1,
                            42,
                            34,
                            19,
                            47,
                            109,
                            105,
                            108,
                            101,
                            115,
                            116,
                            111,
                            110,
                            101,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        /** Sets restrictions */
        setRestrictions: {
            name: "SetRestrictions",
            requestType: SetRestrictionsRequest,
            requestStream: false,
            responseType: SetRestrictionsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            220,
                            1,
                            10,
                            20,
                            70,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            32,
                            82,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            31,
                            82,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            115,
                            32,
                            102,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            115,
                            26,
                            98,
                            85,
                            110,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            115,
                            32,
                            100,
                            111,
                            110,
                            39,
                            116,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            90,
                            101,
                            114,
                            111,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            115,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            26,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            19,
                            10,
                            17,
                            82,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            115,
                            101,
                            116,
                            46,
                            74,
                            35,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            28,
                            10,
                            26,
                            78,
                            111,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([
                            24,
                            10,
                            22,
                            105,
                            97,
                            109,
                            46,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                            119,
                            114,
                            105,
                            116,
                            101,
                        ]),
                    ],
                    578365826: [
                        Buffer.from([18, 58, 1, 42, 26, 13, 47, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 115]),
                    ],
                },
            },
        },
        /** Gets restrictions */
        getRestrictions: {
            name: "GetRestrictions",
            requestType: GetRestrictionsRequest,
            requestStream: false,
            responseType: GetRestrictionsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            149,
                            3,
                            10,
                            20,
                            70,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            32,
                            82,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            53,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            32,
                            102,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            26,
                            194,
                            1,
                            85,
                            110,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            115,
                            32,
                            109,
                            101,
                            97,
                            110,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            32,
                            105,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            101,
                            100,
                            46,
                            32,
                            73,
                            102,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            119,
                            101,
                            114,
                            101,
                            32,
                            110,
                            101,
                            118,
                            101,
                            114,
                            32,
                            115,
                            101,
                            116,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            115,
                            32,
                            102,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            110,
                            111,
                            116,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            101,
                            100,
                            44,
                            32,
                            97,
                            108,
                            108,
                            32,
                            112,
                            114,
                            111,
                            112,
                            101,
                            114,
                            116,
                            105,
                            101,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            110,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            116,
                            97,
                            105,
                            108,
                            115,
                            32,
                            111,
                            98,
                            106,
                            101,
                            99,
                            116,
                            32,
                            105,
                            115,
                            32,
                            101,
                            109,
                            112,
                            116,
                            121,
                            46,
                            74,
                            128,
                            1,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            121,
                            10,
                            119,
                            84,
                            104,
                            101,
                            32,
                            115,
                            116,
                            97,
                            116,
                            117,
                            115,
                            32,
                            50,
                            48,
                            48,
                            32,
                            105,
                            115,
                            32,
                            97,
                            108,
                            115,
                            111,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            101,
                            100,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            119,
                            101,
                            114,
                            101,
                            32,
                            101,
                            118,
                            101,
                            114,
                            32,
                            115,
                            101,
                            116,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            99,
                            97,
                            115,
                            101,
                            44,
                            32,
                            97,
                            108,
                            108,
                            32,
                            102,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            110,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([
                            23,
                            10,
                            21,
                            105,
                            97,
                            109,
                            46,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                            114,
                            101,
                            97,
                            100,
                        ]),
                    ],
                    578365826: [Buffer.from([15, 18, 13, 47, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 115])],
                },
            },
        },
    },
};
function bytesFromBase64(b64) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}
function base64FromBytes(arr) {
    return globalThis.Buffer.from(arr).toString("base64");
}
function toTimestamp(date) {
    const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds.toNumber() || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return Long.fromNumber(number);
}
function isSet(value) {
    return value !== null && value !== undefined;
}
