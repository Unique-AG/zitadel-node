// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: zitadel/auth.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Duration } from "../google/protobuf/duration.js";
import { Timestamp } from "../google/protobuf/timestamp.js";
import { Change, ChangeQuery } from "./change.js";
import { IDPUserLink } from "./idp.js";
import { Metadata, MetadataQuery } from "./metadata.js";
import { ListDetails, ListQuery, ObjectDetails } from "./object.js";
import { Org, orgFieldNameFromJSON, orgFieldNameToJSON, OrgQuery } from "./org.js";
import { LabelPolicy, LoginPolicy, PasswordComplexityPolicy, PrivacyPolicy } from "./policy.js";
import { AuthFactor, Email, genderFromJSON, genderToJSON, Membership, MembershipQuery, Phone, Profile, RefreshToken, Session, typeFromJSON, typeToJSON, User, userGrantStateFromJSON, userGrantStateToJSON, WebAuthNKey, WebAuthNToken, WebAuthNVerification, } from "./user.js";
export const protobufPackage = "zitadel.auth.v1";
function createBaseHealthzRequest() {
    return {};
}
export const HealthzRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthzRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return HealthzRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseHealthzRequest();
        return message;
    },
};
function createBaseHealthzResponse() {
    return {};
}
export const HealthzResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthzResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return HealthzResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseHealthzResponse();
        return message;
    },
};
function createBaseGetSupportedLanguagesRequest() {
    return {};
}
export const GetSupportedLanguagesRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSupportedLanguagesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetSupportedLanguagesRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetSupportedLanguagesRequest();
        return message;
    },
};
function createBaseGetSupportedLanguagesResponse() {
    return { languages: [] };
}
export const GetSupportedLanguagesResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.languages) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSupportedLanguagesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.languages.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            languages: globalThis.Array.isArray(object?.languages)
                ? object.languages.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.languages?.length) {
            obj.languages = message.languages;
        }
        return obj;
    },
    create(base) {
        return GetSupportedLanguagesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSupportedLanguagesResponse();
        message.languages = object.languages?.map((e) => e) || [];
        return message;
    },
};
function createBaseGetMyUserRequest() {
    return {};
}
export const GetMyUserRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetMyUserRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetMyUserRequest();
        return message;
    },
};
function createBaseGetMyUserResponse() {
    return { user: undefined, lastLogin: undefined };
}
export const GetMyUserResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).join();
        }
        if (message.lastLogin !== undefined) {
            Timestamp.encode(toTimestamp(message.lastLogin), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyUserResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.lastLogin = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
            lastLogin: isSet(object.lastLogin) ? fromJsonTimestamp(object.lastLogin) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user !== undefined) {
            obj.user = User.toJSON(message.user);
        }
        if (message.lastLogin !== undefined) {
            obj.lastLogin = message.lastLogin.toISOString();
        }
        return obj;
    },
    create(base) {
        return GetMyUserResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMyUserResponse();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        message.lastLogin = object.lastLogin ?? undefined;
        return message;
    },
};
function createBaseRemoveMyUserRequest() {
    return {};
}
export const RemoveMyUserRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RemoveMyUserRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoveMyUserRequest();
        return message;
    },
};
function createBaseRemoveMyUserResponse() {
    return { details: undefined };
}
export const RemoveMyUserResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyUserResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveMyUserResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyUserResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListMyUserChangesRequest() {
    return { query: undefined };
}
export const ListMyUserChangesRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ChangeQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyUserChangesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ChangeQuery.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { query: isSet(object.query) ? ChangeQuery.fromJSON(object.query) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ChangeQuery.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return ListMyUserChangesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyUserChangesRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ChangeQuery.fromPartial(object.query)
            : undefined;
        return message;
    },
};
function createBaseListMyUserChangesResponse() {
    return { result: [] };
}
export const ListMyUserChangesResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.result) {
            Change.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyUserChangesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(Change.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => Change.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result?.length) {
            obj.result = message.result.map((e) => Change.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMyUserChangesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyUserChangesResponse();
        message.result = object.result?.map((e) => Change.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListMyUserSessionsRequest() {
    return {};
}
export const ListMyUserSessionsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyUserSessionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListMyUserSessionsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListMyUserSessionsRequest();
        return message;
    },
};
function createBaseListMyUserSessionsResponse() {
    return { result: [] };
}
export const ListMyUserSessionsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.result) {
            Session.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyUserSessionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.result.push(Session.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => Session.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result?.length) {
            obj.result = message.result.map((e) => Session.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMyUserSessionsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyUserSessionsResponse();
        message.result = object.result?.map((e) => Session.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListMyMetadataRequest() {
    return { query: undefined, queries: [] };
}
export const ListMyMetadataRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        for (const v of message.queries) {
            MetadataQuery.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.queries.push(MetadataQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
            queries: globalThis.Array.isArray(object?.queries)
                ? object.queries.map((e) => MetadataQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => MetadataQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMyMetadataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyMetadataRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        message.queries = object.queries?.map((e) => MetadataQuery.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListMyMetadataResponse() {
    return { details: undefined, result: [] };
}
export const ListMyMetadataResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            Metadata.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(Metadata.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => Metadata.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => Metadata.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMyMetadataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyMetadataResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => Metadata.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetMyMetadataRequest() {
    return { key: "" };
}
export const GetMyMetadataRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        return obj;
    },
    create(base) {
        return GetMyMetadataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMyMetadataRequest();
        message.key = object.key ?? "";
        return message;
    },
};
function createBaseGetMyMetadataResponse() {
    return { metadata: undefined };
}
export const GetMyMetadataResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.metadata !== undefined) {
            Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata = Metadata.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.metadata !== undefined) {
            obj.metadata = Metadata.toJSON(message.metadata);
        }
        return obj;
    },
    create(base) {
        return GetMyMetadataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMyMetadataResponse();
        message.metadata = (object.metadata !== undefined && object.metadata !== null)
            ? Metadata.fromPartial(object.metadata)
            : undefined;
        return message;
    },
};
function createBaseSetMyMetadataRequest() {
    return { key: "", value: Buffer.alloc(0) };
}
export const SetMyMetadataRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetMyMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? Buffer.from(bytesFromBase64(object.value)) : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return SetMyMetadataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetMyMetadataRequest();
        message.key = object.key ?? "";
        message.value = object.value ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseSetMyMetadataResponse() {
    return { details: undefined };
}
export const SetMyMetadataResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetMyMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetMyMetadataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetMyMetadataResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseBulkSetMyMetadataRequest() {
    return { metadata: [] };
}
export const BulkSetMyMetadataRequest = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.metadata) {
            BulkSetMyMetadataRequest_Metadata.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkSetMyMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata.push(BulkSetMyMetadataRequest_Metadata.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            metadata: globalThis.Array.isArray(object?.metadata)
                ? object.metadata.map((e) => BulkSetMyMetadataRequest_Metadata.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metadata?.length) {
            obj.metadata = message.metadata.map((e) => BulkSetMyMetadataRequest_Metadata.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return BulkSetMyMetadataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBulkSetMyMetadataRequest();
        message.metadata = object.metadata?.map((e) => BulkSetMyMetadataRequest_Metadata.fromPartial(e)) || [];
        return message;
    },
};
function createBaseBulkSetMyMetadataRequest_Metadata() {
    return { key: "", value: Buffer.alloc(0) };
}
export const BulkSetMyMetadataRequest_Metadata = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkSetMyMetadataRequest_Metadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Buffer.from(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? Buffer.from(bytesFromBase64(object.value)) : Buffer.alloc(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return BulkSetMyMetadataRequest_Metadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBulkSetMyMetadataRequest_Metadata();
        message.key = object.key ?? "";
        message.value = object.value ?? Buffer.alloc(0);
        return message;
    },
};
function createBaseBulkSetMyMetadataResponse() {
    return { details: undefined };
}
export const BulkSetMyMetadataResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkSetMyMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return BulkSetMyMetadataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBulkSetMyMetadataResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveMyMetadataRequest() {
    return { key: "" };
}
export const RemoveMyMetadataRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        return obj;
    },
    create(base) {
        return RemoveMyMetadataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyMetadataRequest();
        message.key = object.key ?? "";
        return message;
    },
};
function createBaseRemoveMyMetadataResponse() {
    return { details: undefined };
}
export const RemoveMyMetadataResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveMyMetadataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyMetadataResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseBulkRemoveMyMetadataRequest() {
    return { keys: [] };
}
export const BulkRemoveMyMetadataRequest = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.keys) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkRemoveMyMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.keys.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { keys: globalThis.Array.isArray(object?.keys) ? object.keys.map((e) => globalThis.String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.keys?.length) {
            obj.keys = message.keys;
        }
        return obj;
    },
    create(base) {
        return BulkRemoveMyMetadataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBulkRemoveMyMetadataRequest();
        message.keys = object.keys?.map((e) => e) || [];
        return message;
    },
};
function createBaseBulkRemoveMyMetadataResponse() {
    return { details: undefined };
}
export const BulkRemoveMyMetadataResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBulkRemoveMyMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return BulkRemoveMyMetadataResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBulkRemoveMyMetadataResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListMyRefreshTokensRequest() {
    return {};
}
export const ListMyRefreshTokensRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyRefreshTokensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListMyRefreshTokensRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListMyRefreshTokensRequest();
        return message;
    },
};
function createBaseListMyRefreshTokensResponse() {
    return { details: undefined, result: [] };
}
export const ListMyRefreshTokensResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            RefreshToken.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyRefreshTokensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(RefreshToken.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => RefreshToken.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => RefreshToken.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMyRefreshTokensResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyRefreshTokensResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => RefreshToken.fromPartial(e)) || [];
        return message;
    },
};
function createBaseRevokeMyRefreshTokenRequest() {
    return { id: "" };
}
export const RevokeMyRefreshTokenRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRevokeMyRefreshTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return RevokeMyRefreshTokenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRevokeMyRefreshTokenRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseRevokeMyRefreshTokenResponse() {
    return { details: undefined };
}
export const RevokeMyRefreshTokenResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRevokeMyRefreshTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RevokeMyRefreshTokenResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRevokeMyRefreshTokenResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRevokeAllMyRefreshTokensRequest() {
    return {};
}
export const RevokeAllMyRefreshTokensRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRevokeAllMyRefreshTokensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RevokeAllMyRefreshTokensRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRevokeAllMyRefreshTokensRequest();
        return message;
    },
};
function createBaseRevokeAllMyRefreshTokensResponse() {
    return {};
}
export const RevokeAllMyRefreshTokensResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRevokeAllMyRefreshTokensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RevokeAllMyRefreshTokensResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRevokeAllMyRefreshTokensResponse();
        return message;
    },
};
function createBaseUpdateMyUserNameRequest() {
    return { userName: "" };
}
export const UpdateMyUserNameRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userName !== "") {
            writer.uint32(10).string(message.userName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateMyUserNameRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { userName: isSet(object.userName) ? globalThis.String(object.userName) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.userName !== "") {
            obj.userName = message.userName;
        }
        return obj;
    },
    create(base) {
        return UpdateMyUserNameRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateMyUserNameRequest();
        message.userName = object.userName ?? "";
        return message;
    },
};
function createBaseUpdateMyUserNameResponse() {
    return { details: undefined };
}
export const UpdateMyUserNameResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateMyUserNameResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateMyUserNameResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateMyUserNameResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetMyPasswordComplexityPolicyRequest() {
    return {};
}
export const GetMyPasswordComplexityPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyPasswordComplexityPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetMyPasswordComplexityPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetMyPasswordComplexityPolicyRequest();
        return message;
    },
};
function createBaseGetMyPasswordComplexityPolicyResponse() {
    return { policy: undefined };
}
export const GetMyPasswordComplexityPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            PasswordComplexityPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyPasswordComplexityPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = PasswordComplexityPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? PasswordComplexityPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = PasswordComplexityPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetMyPasswordComplexityPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMyPasswordComplexityPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? PasswordComplexityPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdateMyPasswordRequest() {
    return { oldPassword: "", newPassword: "" };
}
export const UpdateMyPasswordRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.oldPassword !== "") {
            writer.uint32(10).string(message.oldPassword);
        }
        if (message.newPassword !== "") {
            writer.uint32(18).string(message.newPassword);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateMyPasswordRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.oldPassword = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.newPassword = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            oldPassword: isSet(object.oldPassword) ? globalThis.String(object.oldPassword) : "",
            newPassword: isSet(object.newPassword) ? globalThis.String(object.newPassword) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.oldPassword !== "") {
            obj.oldPassword = message.oldPassword;
        }
        if (message.newPassword !== "") {
            obj.newPassword = message.newPassword;
        }
        return obj;
    },
    create(base) {
        return UpdateMyPasswordRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateMyPasswordRequest();
        message.oldPassword = object.oldPassword ?? "";
        message.newPassword = object.newPassword ?? "";
        return message;
    },
};
function createBaseUpdateMyPasswordResponse() {
    return { details: undefined };
}
export const UpdateMyPasswordResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateMyPasswordResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateMyPasswordResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateMyPasswordResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetMyProfileRequest() {
    return {};
}
export const GetMyProfileRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyProfileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetMyProfileRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetMyProfileRequest();
        return message;
    },
};
function createBaseGetMyProfileResponse() {
    return { details: undefined, profile: undefined };
}
export const GetMyProfileResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.profile !== undefined) {
            Profile.encode(message.profile, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyProfileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.profile = Profile.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            profile: isSet(object.profile) ? Profile.fromJSON(object.profile) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.profile !== undefined) {
            obj.profile = Profile.toJSON(message.profile);
        }
        return obj;
    },
    create(base) {
        return GetMyProfileResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMyProfileResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.profile = (object.profile !== undefined && object.profile !== null)
            ? Profile.fromPartial(object.profile)
            : undefined;
        return message;
    },
};
function createBaseUpdateMyProfileRequest() {
    return { firstName: "", lastName: "", nickName: "", displayName: "", preferredLanguage: "", gender: 0 };
}
export const UpdateMyProfileRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.firstName !== "") {
            writer.uint32(10).string(message.firstName);
        }
        if (message.lastName !== "") {
            writer.uint32(18).string(message.lastName);
        }
        if (message.nickName !== "") {
            writer.uint32(26).string(message.nickName);
        }
        if (message.displayName !== "") {
            writer.uint32(34).string(message.displayName);
        }
        if (message.preferredLanguage !== "") {
            writer.uint32(42).string(message.preferredLanguage);
        }
        if (message.gender !== 0) {
            writer.uint32(48).int32(message.gender);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateMyProfileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.firstName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.lastName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nickName = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.preferredLanguage = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.gender = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
            lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
            nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
            displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
            preferredLanguage: isSet(object.preferredLanguage) ? globalThis.String(object.preferredLanguage) : "",
            gender: isSet(object.gender) ? genderFromJSON(object.gender) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.firstName !== "") {
            obj.firstName = message.firstName;
        }
        if (message.lastName !== "") {
            obj.lastName = message.lastName;
        }
        if (message.nickName !== "") {
            obj.nickName = message.nickName;
        }
        if (message.displayName !== "") {
            obj.displayName = message.displayName;
        }
        if (message.preferredLanguage !== "") {
            obj.preferredLanguage = message.preferredLanguage;
        }
        if (message.gender !== 0) {
            obj.gender = genderToJSON(message.gender);
        }
        return obj;
    },
    create(base) {
        return UpdateMyProfileRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateMyProfileRequest();
        message.firstName = object.firstName ?? "";
        message.lastName = object.lastName ?? "";
        message.nickName = object.nickName ?? "";
        message.displayName = object.displayName ?? "";
        message.preferredLanguage = object.preferredLanguage ?? "";
        message.gender = object.gender ?? 0;
        return message;
    },
};
function createBaseUpdateMyProfileResponse() {
    return { details: undefined };
}
export const UpdateMyProfileResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateMyProfileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return UpdateMyProfileResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateMyProfileResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetMyEmailRequest() {
    return {};
}
export const GetMyEmailRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyEmailRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetMyEmailRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetMyEmailRequest();
        return message;
    },
};
function createBaseGetMyEmailResponse() {
    return { details: undefined, email: undefined };
}
export const GetMyEmailResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.email !== undefined) {
            Email.encode(message.email, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyEmailResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.email = Email.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            email: isSet(object.email) ? Email.fromJSON(object.email) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.email !== undefined) {
            obj.email = Email.toJSON(message.email);
        }
        return obj;
    },
    create(base) {
        return GetMyEmailResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMyEmailResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.email = (object.email !== undefined && object.email !== null) ? Email.fromPartial(object.email) : undefined;
        return message;
    },
};
function createBaseSetMyEmailRequest() {
    return { email: "" };
}
export const SetMyEmailRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.email !== "") {
            writer.uint32(10).string(message.email);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetMyEmailRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { email: isSet(object.email) ? globalThis.String(object.email) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.email !== "") {
            obj.email = message.email;
        }
        return obj;
    },
    create(base) {
        return SetMyEmailRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetMyEmailRequest();
        message.email = object.email ?? "";
        return message;
    },
};
function createBaseSetMyEmailResponse() {
    return { details: undefined };
}
export const SetMyEmailResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetMyEmailResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetMyEmailResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetMyEmailResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseVerifyMyEmailRequest() {
    return { code: "" };
}
export const VerifyMyEmailRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.code !== "") {
            writer.uint32(10).string(message.code);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyMyEmailRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { code: isSet(object.code) ? globalThis.String(object.code) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== "") {
            obj.code = message.code;
        }
        return obj;
    },
    create(base) {
        return VerifyMyEmailRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyMyEmailRequest();
        message.code = object.code ?? "";
        return message;
    },
};
function createBaseVerifyMyEmailResponse() {
    return { details: undefined };
}
export const VerifyMyEmailResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyMyEmailResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return VerifyMyEmailResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyMyEmailResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResendMyEmailVerificationRequest() {
    return {};
}
export const ResendMyEmailVerificationRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResendMyEmailVerificationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ResendMyEmailVerificationRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseResendMyEmailVerificationRequest();
        return message;
    },
};
function createBaseResendMyEmailVerificationResponse() {
    return { details: undefined };
}
export const ResendMyEmailVerificationResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResendMyEmailVerificationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResendMyEmailVerificationResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResendMyEmailVerificationResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetMyPhoneRequest() {
    return {};
}
export const GetMyPhoneRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyPhoneRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetMyPhoneRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetMyPhoneRequest();
        return message;
    },
};
function createBaseGetMyPhoneResponse() {
    return { details: undefined, phone: undefined };
}
export const GetMyPhoneResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.phone !== undefined) {
            Phone.encode(message.phone, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyPhoneResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.phone = Phone.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            phone: isSet(object.phone) ? Phone.fromJSON(object.phone) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.phone !== undefined) {
            obj.phone = Phone.toJSON(message.phone);
        }
        return obj;
    },
    create(base) {
        return GetMyPhoneResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMyPhoneResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.phone = (object.phone !== undefined && object.phone !== null) ? Phone.fromPartial(object.phone) : undefined;
        return message;
    },
};
function createBaseSetMyPhoneRequest() {
    return { phone: "" };
}
export const SetMyPhoneRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.phone !== "") {
            writer.uint32(10).string(message.phone);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetMyPhoneRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.phone = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { phone: isSet(object.phone) ? globalThis.String(object.phone) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.phone !== "") {
            obj.phone = message.phone;
        }
        return obj;
    },
    create(base) {
        return SetMyPhoneRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetMyPhoneRequest();
        message.phone = object.phone ?? "";
        return message;
    },
};
function createBaseSetMyPhoneResponse() {
    return { details: undefined };
}
export const SetMyPhoneResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetMyPhoneResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetMyPhoneResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetMyPhoneResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseVerifyMyPhoneRequest() {
    return { code: "" };
}
export const VerifyMyPhoneRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.code !== "") {
            writer.uint32(10).string(message.code);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyMyPhoneRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { code: isSet(object.code) ? globalThis.String(object.code) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== "") {
            obj.code = message.code;
        }
        return obj;
    },
    create(base) {
        return VerifyMyPhoneRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyMyPhoneRequest();
        message.code = object.code ?? "";
        return message;
    },
};
function createBaseVerifyMyPhoneResponse() {
    return { details: undefined };
}
export const VerifyMyPhoneResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyMyPhoneResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return VerifyMyPhoneResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyMyPhoneResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResendMyPhoneVerificationRequest() {
    return {};
}
export const ResendMyPhoneVerificationRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResendMyPhoneVerificationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ResendMyPhoneVerificationRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseResendMyPhoneVerificationRequest();
        return message;
    },
};
function createBaseResendMyPhoneVerificationResponse() {
    return { details: undefined };
}
export const ResendMyPhoneVerificationResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResendMyPhoneVerificationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return ResendMyPhoneVerificationResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResendMyPhoneVerificationResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveMyPhoneRequest() {
    return {};
}
export const RemoveMyPhoneRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyPhoneRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RemoveMyPhoneRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoveMyPhoneRequest();
        return message;
    },
};
function createBaseRemoveMyPhoneResponse() {
    return { details: undefined };
}
export const RemoveMyPhoneResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyPhoneResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveMyPhoneResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyPhoneResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveMyAvatarRequest() {
    return {};
}
export const RemoveMyAvatarRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyAvatarRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RemoveMyAvatarRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoveMyAvatarRequest();
        return message;
    },
};
function createBaseRemoveMyAvatarResponse() {
    return { details: undefined };
}
export const RemoveMyAvatarResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyAvatarResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveMyAvatarResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyAvatarResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListMyLinkedIDPsRequest() {
    return { query: undefined };
}
export const ListMyLinkedIDPsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyLinkedIDPsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return ListMyLinkedIDPsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyLinkedIDPsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        return message;
    },
};
function createBaseListMyLinkedIDPsResponse() {
    return { details: undefined, result: [] };
}
export const ListMyLinkedIDPsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            IDPUserLink.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyLinkedIDPsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(IDPUserLink.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => IDPUserLink.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => IDPUserLink.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMyLinkedIDPsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyLinkedIDPsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => IDPUserLink.fromPartial(e)) || [];
        return message;
    },
};
function createBaseRemoveMyLinkedIDPRequest() {
    return { idpId: "", linkedUserId: "" };
}
export const RemoveMyLinkedIDPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        if (message.linkedUserId !== "") {
            writer.uint32(18).string(message.linkedUserId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyLinkedIDPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.linkedUserId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
            linkedUserId: isSet(object.linkedUserId) ? globalThis.String(object.linkedUserId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        if (message.linkedUserId !== "") {
            obj.linkedUserId = message.linkedUserId;
        }
        return obj;
    },
    create(base) {
        return RemoveMyLinkedIDPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyLinkedIDPRequest();
        message.idpId = object.idpId ?? "";
        message.linkedUserId = object.linkedUserId ?? "";
        return message;
    },
};
function createBaseRemoveMyLinkedIDPResponse() {
    return { details: undefined };
}
export const RemoveMyLinkedIDPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyLinkedIDPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveMyLinkedIDPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyLinkedIDPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListMyAuthFactorsRequest() {
    return {};
}
export const ListMyAuthFactorsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyAuthFactorsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListMyAuthFactorsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListMyAuthFactorsRequest();
        return message;
    },
};
function createBaseListMyAuthFactorsResponse() {
    return { result: [] };
}
export const ListMyAuthFactorsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.result) {
            AuthFactor.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyAuthFactorsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.result.push(AuthFactor.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => AuthFactor.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result?.length) {
            obj.result = message.result.map((e) => AuthFactor.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMyAuthFactorsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyAuthFactorsResponse();
        message.result = object.result?.map((e) => AuthFactor.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAddMyAuthFactorU2FRequest() {
    return {};
}
export const AddMyAuthFactorU2FRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMyAuthFactorU2FRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return AddMyAuthFactorU2FRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseAddMyAuthFactorU2FRequest();
        return message;
    },
};
function createBaseAddMyAuthFactorU2FResponse() {
    return { key: undefined, details: undefined };
}
export const AddMyAuthFactorU2FResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== undefined) {
            WebAuthNKey.encode(message.key, writer.uint32(10).fork()).join();
        }
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMyAuthFactorU2FResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = WebAuthNKey.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? WebAuthNKey.fromJSON(object.key) : undefined,
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== undefined) {
            obj.key = WebAuthNKey.toJSON(message.key);
        }
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddMyAuthFactorU2FResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddMyAuthFactorU2FResponse();
        message.key = (object.key !== undefined && object.key !== null) ? WebAuthNKey.fromPartial(object.key) : undefined;
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddMyAuthFactorOTPRequest() {
    return {};
}
export const AddMyAuthFactorOTPRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMyAuthFactorOTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return AddMyAuthFactorOTPRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseAddMyAuthFactorOTPRequest();
        return message;
    },
};
function createBaseAddMyAuthFactorOTPResponse() {
    return { url: "", secret: "", details: undefined };
}
export const AddMyAuthFactorOTPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.secret !== "") {
            writer.uint32(18).string(message.secret);
        }
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMyAuthFactorOTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.secret = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            secret: isSet(object.secret) ? globalThis.String(object.secret) : "",
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.secret !== "") {
            obj.secret = message.secret;
        }
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddMyAuthFactorOTPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddMyAuthFactorOTPResponse();
        message.url = object.url ?? "";
        message.secret = object.secret ?? "";
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseVerifyMyAuthFactorOTPRequest() {
    return { code: "" };
}
export const VerifyMyAuthFactorOTPRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.code !== "") {
            writer.uint32(10).string(message.code);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyMyAuthFactorOTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { code: isSet(object.code) ? globalThis.String(object.code) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== "") {
            obj.code = message.code;
        }
        return obj;
    },
    create(base) {
        return VerifyMyAuthFactorOTPRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyMyAuthFactorOTPRequest();
        message.code = object.code ?? "";
        return message;
    },
};
function createBaseVerifyMyAuthFactorOTPResponse() {
    return { details: undefined };
}
export const VerifyMyAuthFactorOTPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyMyAuthFactorOTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return VerifyMyAuthFactorOTPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyMyAuthFactorOTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseVerifyMyAuthFactorU2FRequest() {
    return { verification: undefined };
}
export const VerifyMyAuthFactorU2FRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.verification !== undefined) {
            WebAuthNVerification.encode(message.verification, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyMyAuthFactorU2FRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.verification = WebAuthNVerification.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            verification: isSet(object.verification) ? WebAuthNVerification.fromJSON(object.verification) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.verification !== undefined) {
            obj.verification = WebAuthNVerification.toJSON(message.verification);
        }
        return obj;
    },
    create(base) {
        return VerifyMyAuthFactorU2FRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyMyAuthFactorU2FRequest();
        message.verification = (object.verification !== undefined && object.verification !== null)
            ? WebAuthNVerification.fromPartial(object.verification)
            : undefined;
        return message;
    },
};
function createBaseVerifyMyAuthFactorU2FResponse() {
    return { details: undefined };
}
export const VerifyMyAuthFactorU2FResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyMyAuthFactorU2FResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return VerifyMyAuthFactorU2FResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyMyAuthFactorU2FResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveMyAuthFactorOTPRequest() {
    return {};
}
export const RemoveMyAuthFactorOTPRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyAuthFactorOTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RemoveMyAuthFactorOTPRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoveMyAuthFactorOTPRequest();
        return message;
    },
};
function createBaseRemoveMyAuthFactorOTPResponse() {
    return { details: undefined };
}
export const RemoveMyAuthFactorOTPResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyAuthFactorOTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveMyAuthFactorOTPResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyAuthFactorOTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddMyAuthFactorOTPSMSRequest() {
    return {};
}
export const AddMyAuthFactorOTPSMSRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMyAuthFactorOTPSMSRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return AddMyAuthFactorOTPSMSRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseAddMyAuthFactorOTPSMSRequest();
        return message;
    },
};
function createBaseAddMyAuthFactorOTPSMSResponse() {
    return { details: undefined };
}
export const AddMyAuthFactorOTPSMSResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMyAuthFactorOTPSMSResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddMyAuthFactorOTPSMSResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddMyAuthFactorOTPSMSResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveMyAuthFactorOTPSMSRequest() {
    return {};
}
export const RemoveMyAuthFactorOTPSMSRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyAuthFactorOTPSMSRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RemoveMyAuthFactorOTPSMSRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoveMyAuthFactorOTPSMSRequest();
        return message;
    },
};
function createBaseRemoveMyAuthFactorOTPSMSResponse() {
    return { details: undefined };
}
export const RemoveMyAuthFactorOTPSMSResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyAuthFactorOTPSMSResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveMyAuthFactorOTPSMSResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyAuthFactorOTPSMSResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddMyAuthFactorOTPEmailRequest() {
    return {};
}
export const AddMyAuthFactorOTPEmailRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMyAuthFactorOTPEmailRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return AddMyAuthFactorOTPEmailRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseAddMyAuthFactorOTPEmailRequest();
        return message;
    },
};
function createBaseAddMyAuthFactorOTPEmailResponse() {
    return { details: undefined };
}
export const AddMyAuthFactorOTPEmailResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMyAuthFactorOTPEmailResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddMyAuthFactorOTPEmailResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddMyAuthFactorOTPEmailResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveMyAuthFactorOTPEmailRequest() {
    return {};
}
export const RemoveMyAuthFactorOTPEmailRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyAuthFactorOTPEmailRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RemoveMyAuthFactorOTPEmailRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoveMyAuthFactorOTPEmailRequest();
        return message;
    },
};
function createBaseRemoveMyAuthFactorOTPEmailResponse() {
    return { details: undefined };
}
export const RemoveMyAuthFactorOTPEmailResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyAuthFactorOTPEmailResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveMyAuthFactorOTPEmailResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyAuthFactorOTPEmailResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveMyAuthFactorU2FRequest() {
    return { tokenId: "" };
}
export const RemoveMyAuthFactorU2FRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.tokenId !== "") {
            writer.uint32(10).string(message.tokenId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyAuthFactorU2FRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tokenId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { tokenId: isSet(object.tokenId) ? globalThis.String(object.tokenId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokenId !== "") {
            obj.tokenId = message.tokenId;
        }
        return obj;
    },
    create(base) {
        return RemoveMyAuthFactorU2FRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyAuthFactorU2FRequest();
        message.tokenId = object.tokenId ?? "";
        return message;
    },
};
function createBaseRemoveMyAuthFactorU2FResponse() {
    return { details: undefined };
}
export const RemoveMyAuthFactorU2FResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyAuthFactorU2FResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveMyAuthFactorU2FResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyAuthFactorU2FResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListMyPasswordlessRequest() {
    return {};
}
export const ListMyPasswordlessRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyPasswordlessRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListMyPasswordlessRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListMyPasswordlessRequest();
        return message;
    },
};
function createBaseListMyPasswordlessResponse() {
    return { result: [] };
}
export const ListMyPasswordlessResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.result) {
            WebAuthNToken.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyPasswordlessResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.result.push(WebAuthNToken.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => WebAuthNToken.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result?.length) {
            obj.result = message.result.map((e) => WebAuthNToken.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMyPasswordlessResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyPasswordlessResponse();
        message.result = object.result?.map((e) => WebAuthNToken.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAddMyPasswordlessRequest() {
    return {};
}
export const AddMyPasswordlessRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMyPasswordlessRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return AddMyPasswordlessRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseAddMyPasswordlessRequest();
        return message;
    },
};
function createBaseAddMyPasswordlessResponse() {
    return { key: undefined, details: undefined };
}
export const AddMyPasswordlessResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== undefined) {
            WebAuthNKey.encode(message.key, writer.uint32(10).fork()).join();
        }
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMyPasswordlessResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = WebAuthNKey.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? WebAuthNKey.fromJSON(object.key) : undefined,
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== undefined) {
            obj.key = WebAuthNKey.toJSON(message.key);
        }
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return AddMyPasswordlessResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddMyPasswordlessResponse();
        message.key = (object.key !== undefined && object.key !== null) ? WebAuthNKey.fromPartial(object.key) : undefined;
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddMyPasswordlessLinkRequest() {
    return {};
}
export const AddMyPasswordlessLinkRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMyPasswordlessLinkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return AddMyPasswordlessLinkRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseAddMyPasswordlessLinkRequest();
        return message;
    },
};
function createBaseAddMyPasswordlessLinkResponse() {
    return { details: undefined, link: "", expiration: undefined };
}
export const AddMyPasswordlessLinkResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.link !== "") {
            writer.uint32(18).string(message.link);
        }
        if (message.expiration !== undefined) {
            Duration.encode(message.expiration, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMyPasswordlessLinkResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.link = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.expiration = Duration.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            link: isSet(object.link) ? globalThis.String(object.link) : "",
            expiration: isSet(object.expiration) ? Duration.fromJSON(object.expiration) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.link !== "") {
            obj.link = message.link;
        }
        if (message.expiration !== undefined) {
            obj.expiration = Duration.toJSON(message.expiration);
        }
        return obj;
    },
    create(base) {
        return AddMyPasswordlessLinkResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddMyPasswordlessLinkResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.link = object.link ?? "";
        message.expiration = (object.expiration !== undefined && object.expiration !== null)
            ? Duration.fromPartial(object.expiration)
            : undefined;
        return message;
    },
};
function createBaseSendMyPasswordlessLinkRequest() {
    return {};
}
export const SendMyPasswordlessLinkRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSendMyPasswordlessLinkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return SendMyPasswordlessLinkRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseSendMyPasswordlessLinkRequest();
        return message;
    },
};
function createBaseSendMyPasswordlessLinkResponse() {
    return { details: undefined };
}
export const SendMyPasswordlessLinkResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSendMyPasswordlessLinkResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SendMyPasswordlessLinkResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSendMyPasswordlessLinkResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseVerifyMyPasswordlessRequest() {
    return { verification: undefined };
}
export const VerifyMyPasswordlessRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.verification !== undefined) {
            WebAuthNVerification.encode(message.verification, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyMyPasswordlessRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.verification = WebAuthNVerification.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            verification: isSet(object.verification) ? WebAuthNVerification.fromJSON(object.verification) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.verification !== undefined) {
            obj.verification = WebAuthNVerification.toJSON(message.verification);
        }
        return obj;
    },
    create(base) {
        return VerifyMyPasswordlessRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyMyPasswordlessRequest();
        message.verification = (object.verification !== undefined && object.verification !== null)
            ? WebAuthNVerification.fromPartial(object.verification)
            : undefined;
        return message;
    },
};
function createBaseVerifyMyPasswordlessResponse() {
    return { details: undefined };
}
export const VerifyMyPasswordlessResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyMyPasswordlessResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return VerifyMyPasswordlessResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyMyPasswordlessResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveMyPasswordlessRequest() {
    return { tokenId: "" };
}
export const RemoveMyPasswordlessRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.tokenId !== "") {
            writer.uint32(10).string(message.tokenId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyPasswordlessRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tokenId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { tokenId: isSet(object.tokenId) ? globalThis.String(object.tokenId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokenId !== "") {
            obj.tokenId = message.tokenId;
        }
        return obj;
    },
    create(base) {
        return RemoveMyPasswordlessRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyPasswordlessRequest();
        message.tokenId = object.tokenId ?? "";
        return message;
    },
};
function createBaseRemoveMyPasswordlessResponse() {
    return { details: undefined };
}
export const RemoveMyPasswordlessResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMyPasswordlessResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return RemoveMyPasswordlessResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMyPasswordlessResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListMyUserGrantsRequest() {
    return { query: undefined };
}
export const ListMyUserGrantsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyUserGrantsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return ListMyUserGrantsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyUserGrantsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        return message;
    },
};
function createBaseListMyUserGrantsResponse() {
    return { details: undefined, result: [] };
}
export const ListMyUserGrantsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            UserGrant.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyUserGrantsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(UserGrant.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => UserGrant.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => UserGrant.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMyUserGrantsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyUserGrantsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => UserGrant.fromPartial(e)) || [];
        return message;
    },
};
function createBaseUserGrant() {
    return {
        orgId: "",
        projectId: "",
        userId: "",
        roles: [],
        orgName: "",
        grantId: "",
        details: undefined,
        orgDomain: "",
        projectName: "",
        projectGrantId: "",
        roleKeys: [],
        userType: 0,
        state: 0,
    };
}
export const UserGrant = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        if (message.projectId !== "") {
            writer.uint32(18).string(message.projectId);
        }
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        for (const v of message.roles) {
            writer.uint32(34).string(v);
        }
        if (message.orgName !== "") {
            writer.uint32(42).string(message.orgName);
        }
        if (message.grantId !== "") {
            writer.uint32(50).string(message.grantId);
        }
        if (message.details !== undefined) {
            ObjectDetails.encode(message.details, writer.uint32(58).fork()).join();
        }
        if (message.orgDomain !== "") {
            writer.uint32(66).string(message.orgDomain);
        }
        if (message.projectName !== "") {
            writer.uint32(74).string(message.projectName);
        }
        if (message.projectGrantId !== "") {
            writer.uint32(82).string(message.projectGrantId);
        }
        for (const v of message.roleKeys) {
            writer.uint32(90).string(v);
        }
        if (message.userType !== 0) {
            writer.uint32(96).int32(message.userType);
        }
        if (message.state !== 0) {
            writer.uint32(104).int32(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserGrant();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.projectId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.roles.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.orgName = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.grantId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.details = ObjectDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.orgDomain = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.projectName = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.projectGrantId = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.roleKeys.push(reader.string());
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.userType = reader.int32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e) => globalThis.String(e)) : [],
            orgName: isSet(object.orgName) ? globalThis.String(object.orgName) : "",
            grantId: isSet(object.grantId) ? globalThis.String(object.grantId) : "",
            details: isSet(object.details) ? ObjectDetails.fromJSON(object.details) : undefined,
            orgDomain: isSet(object.orgDomain) ? globalThis.String(object.orgDomain) : "",
            projectName: isSet(object.projectName) ? globalThis.String(object.projectName) : "",
            projectGrantId: isSet(object.projectGrantId) ? globalThis.String(object.projectGrantId) : "",
            roleKeys: globalThis.Array.isArray(object?.roleKeys) ? object.roleKeys.map((e) => globalThis.String(e)) : [],
            userType: isSet(object.userType) ? typeFromJSON(object.userType) : 0,
            state: isSet(object.state) ? userGrantStateFromJSON(object.state) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.projectId !== "") {
            obj.projectId = message.projectId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.roles?.length) {
            obj.roles = message.roles;
        }
        if (message.orgName !== "") {
            obj.orgName = message.orgName;
        }
        if (message.grantId !== "") {
            obj.grantId = message.grantId;
        }
        if (message.details !== undefined) {
            obj.details = ObjectDetails.toJSON(message.details);
        }
        if (message.orgDomain !== "") {
            obj.orgDomain = message.orgDomain;
        }
        if (message.projectName !== "") {
            obj.projectName = message.projectName;
        }
        if (message.projectGrantId !== "") {
            obj.projectGrantId = message.projectGrantId;
        }
        if (message.roleKeys?.length) {
            obj.roleKeys = message.roleKeys;
        }
        if (message.userType !== 0) {
            obj.userType = typeToJSON(message.userType);
        }
        if (message.state !== 0) {
            obj.state = userGrantStateToJSON(message.state);
        }
        return obj;
    },
    create(base) {
        return UserGrant.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserGrant();
        message.orgId = object.orgId ?? "";
        message.projectId = object.projectId ?? "";
        message.userId = object.userId ?? "";
        message.roles = object.roles?.map((e) => e) || [];
        message.orgName = object.orgName ?? "";
        message.grantId = object.grantId ?? "";
        message.details = (object.details !== undefined && object.details !== null)
            ? ObjectDetails.fromPartial(object.details)
            : undefined;
        message.orgDomain = object.orgDomain ?? "";
        message.projectName = object.projectName ?? "";
        message.projectGrantId = object.projectGrantId ?? "";
        message.roleKeys = object.roleKeys?.map((e) => e) || [];
        message.userType = object.userType ?? 0;
        message.state = object.state ?? 0;
        return message;
    },
};
function createBaseListMyProjectOrgsRequest() {
    return { query: undefined, queries: [], sortingColumn: 0 };
}
export const ListMyProjectOrgsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        for (const v of message.queries) {
            OrgQuery.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(24).int32(message.sortingColumn);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyProjectOrgsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.queries.push(OrgQuery.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
            queries: globalThis.Array.isArray(object?.queries) ? object.queries.map((e) => OrgQuery.fromJSON(e)) : [],
            sortingColumn: isSet(object.sortingColumn) ? orgFieldNameFromJSON(object.sortingColumn) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => OrgQuery.toJSON(e));
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = orgFieldNameToJSON(message.sortingColumn);
        }
        return obj;
    },
    create(base) {
        return ListMyProjectOrgsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyProjectOrgsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        message.queries = object.queries?.map((e) => OrgQuery.fromPartial(e)) || [];
        message.sortingColumn = object.sortingColumn ?? 0;
        return message;
    },
};
function createBaseListMyProjectOrgsResponse() {
    return { details: undefined, result: [] };
}
export const ListMyProjectOrgsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            Org.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyProjectOrgsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(Org.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => Org.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => Org.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMyProjectOrgsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyProjectOrgsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => Org.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListMyZitadelPermissionsRequest() {
    return {};
}
export const ListMyZitadelPermissionsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyZitadelPermissionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListMyZitadelPermissionsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListMyZitadelPermissionsRequest();
        return message;
    },
};
function createBaseListMyZitadelPermissionsResponse() {
    return { result: [] };
}
export const ListMyZitadelPermissionsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.result) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyZitadelPermissionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.result.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result?.length) {
            obj.result = message.result;
        }
        return obj;
    },
    create(base) {
        return ListMyZitadelPermissionsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyZitadelPermissionsResponse();
        message.result = object.result?.map((e) => e) || [];
        return message;
    },
};
function createBaseListMyProjectPermissionsRequest() {
    return {};
}
export const ListMyProjectPermissionsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyProjectPermissionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListMyProjectPermissionsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListMyProjectPermissionsRequest();
        return message;
    },
};
function createBaseListMyProjectPermissionsResponse() {
    return { result: [] };
}
export const ListMyProjectPermissionsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.result) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyProjectPermissionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.result.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.result?.length) {
            obj.result = message.result;
        }
        return obj;
    },
    create(base) {
        return ListMyProjectPermissionsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyProjectPermissionsResponse();
        message.result = object.result?.map((e) => e) || [];
        return message;
    },
};
function createBaseListMyMembershipsRequest() {
    return { query: undefined, queries: [] };
}
export const ListMyMembershipsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        for (const v of message.queries) {
            MembershipQuery.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyMembershipsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = ListQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.queries.push(MembershipQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? ListQuery.fromJSON(object.query) : undefined,
            queries: globalThis.Array.isArray(object?.queries)
                ? object.queries.map((e) => MembershipQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = ListQuery.toJSON(message.query);
        }
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => MembershipQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMyMembershipsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyMembershipsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? ListQuery.fromPartial(object.query)
            : undefined;
        message.queries = object.queries?.map((e) => MembershipQuery.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListMyMembershipsResponse() {
    return { details: undefined, result: [] };
}
export const ListMyMembershipsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            Membership.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMyMembershipsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(Membership.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => Membership.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => Membership.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ListMyMembershipsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListMyMembershipsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => Membership.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetMyLabelPolicyRequest() {
    return {};
}
export const GetMyLabelPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyLabelPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetMyLabelPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetMyLabelPolicyRequest();
        return message;
    },
};
function createBaseGetMyLabelPolicyResponse() {
    return { policy: undefined };
}
export const GetMyLabelPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            LabelPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyLabelPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = LabelPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? LabelPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = LabelPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetMyLabelPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMyLabelPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? LabelPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseGetMyPrivacyPolicyRequest() {
    return {};
}
export const GetMyPrivacyPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyPrivacyPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetMyPrivacyPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetMyPrivacyPolicyRequest();
        return message;
    },
};
function createBaseGetMyPrivacyPolicyResponse() {
    return { policy: undefined };
}
export const GetMyPrivacyPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            PrivacyPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyPrivacyPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = PrivacyPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? PrivacyPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = PrivacyPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetMyPrivacyPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMyPrivacyPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? PrivacyPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseGetMyLoginPolicyRequest() {
    return {};
}
export const GetMyLoginPolicyRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetMyLoginPolicyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetMyLoginPolicyRequest();
        return message;
    },
};
function createBaseGetMyLoginPolicyResponse() {
    return { policy: undefined };
}
export const GetMyLoginPolicyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.policy !== undefined) {
            LoginPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = LoginPolicy.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? LoginPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = LoginPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return GetMyLoginPolicyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMyLoginPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? LoginPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
export const AuthServiceDefinition = {
    name: "AuthService",
    fullName: "zitadel.auth.v1.AuthService",
    methods: {
        healthz: {
            name: "Healthz",
            requestType: HealthzRequest,
            requestStream: false,
            responseType: HealthzResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            113,
                            10,
                            7,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            18,
                            7,
                            72,
                            101,
                            97,
                            108,
                            116,
                            104,
                            122,
                            26,
                            93,
                            84,
                            104,
                            101,
                            32,
                            104,
                            101,
                            97,
                            108,
                            116,
                            104,
                            32,
                            101,
                            110,
                            100,
                            112,
                            111,
                            105,
                            110,
                            116,
                            32,
                            97,
                            108,
                            108,
                            111,
                            119,
                            115,
                            32,
                            97,
                            110,
                            32,
                            101,
                            120,
                            116,
                            101,
                            114,
                            110,
                            97,
                            108,
                            32,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            32,
                            116,
                            111,
                            32,
                            112,
                            114,
                            111,
                            98,
                            101,
                            32,
                            105,
                            102,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            65,
                            80,
                            73,
                            32,
                            105,
                            115,
                            32,
                            97,
                            108,
                            105,
                            118,
                            101,
                        ]),
                    ],
                    578365826: [Buffer.from([10, 18, 8, 47, 104, 101, 97, 108, 116, 104, 122])],
                },
            },
        },
        getSupportedLanguages: {
            name: "GetSupportedLanguages",
            requestType: GetSupportedLanguagesRequest,
            requestStream: false,
            responseType: GetSupportedLanguagesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            89,
                            10,
                            7,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            18,
                            19,
                            83,
                            117,
                            112,
                            112,
                            111,
                            114,
                            116,
                            101,
                            100,
                            32,
                            76,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            26,
                            55,
                            85,
                            115,
                            101,
                            32,
                            71,
                            101,
                            116,
                            83,
                            117,
                            112,
                            112,
                            111,
                            114,
                            116,
                            101,
                            100,
                            76,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            32,
                            115,
                            101,
                            114,
                            118,
                            105,
                            99,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            101,
                            97,
                            100,
                            46,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [Buffer.from([12, 18, 10, 47, 108, 97, 110, 103, 117, 97, 103, 101, 115])],
                },
            },
        },
        getMyUser: {
            name: "GetMyUser",
            requestType: GetMyUserRequest,
            requestStream: false,
            responseType: GetMyUserResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            117,
                            10,
                            4,
                            85,
                            115,
                            101,
                            114,
                            18,
                            11,
                            71,
                            101,
                            116,
                            32,
                            109,
                            121,
                            32,
                            117,
                            115,
                            101,
                            114,
                            26,
                            96,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            117,
                            108,
                            108,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            111,
                            98,
                            106,
                            101,
                            99,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            110,
                            99,
                            108,
                            117,
                            100,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            102,
                            105,
                            108,
                            101,
                            44,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            44,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            44,
                            32,
                            101,
                            116,
                            99,
                            32,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [Buffer.from([11, 18, 9, 47, 117, 115, 101, 114, 115, 47, 109, 101])],
                },
            },
        },
        removeMyUser: {
            name: "RemoveMyUser",
            requestType: RemoveMyUserRequest,
            requestStream: false,
            responseType: RemoveMyUserResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            159,
                            1,
                            10,
                            4,
                            85,
                            115,
                            101,
                            114,
                            18,
                            14,
                            68,
                            101,
                            108,
                            101,
                            116,
                            101,
                            32,
                            109,
                            121,
                            32,
                            117,
                            115,
                            101,
                            114,
                            26,
                            134,
                            1,
                            68,
                            101,
                            108,
                            101,
                            116,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            108,
                            121,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            65,
                            108,
                            108,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            109,
                            97,
                            107,
                            101,
                            32,
                            97,
                            110,
                            121,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 117, 115, 101, 114, 46, 115, 101, 108, 102, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [Buffer.from([11, 42, 9, 47, 117, 115, 101, 114, 115, 47, 109, 101])],
                },
            },
        },
        listMyUserChanges: {
            name: "ListMyUserChanges",
            requestType: ListMyUserChangesRequest,
            requestStream: false,
            responseType: ListMyUserChangesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            165,
                            1,
                            10,
                            4,
                            85,
                            115,
                            101,
                            114,
                            18,
                            19,
                            71,
                            101,
                            116,
                            32,
                            77,
                            121,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            72,
                            105,
                            115,
                            116,
                            111,
                            114,
                            121,
                            26,
                            135,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            47,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            104,
                            97,
                            112,
                            112,
                            101,
                            110,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            73,
                            116,
                            39,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            104,
                            105,
                            115,
                            116,
                            111,
                            114,
                            121,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            97,
                            32,
                            108,
                            105,
                            109,
                            105,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            30,
                            58,
                            1,
                            42,
                            34,
                            25,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        listMyUserSessions: {
            name: "ListMyUserSessions",
            requestType: ListMyUserSessionsRequest,
            requestStream: false,
            responseType: ListMyUserSessionsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            173,
                            1,
                            10,
                            4,
                            85,
                            115,
                            101,
                            114,
                            18,
                            20,
                            71,
                            101,
                            116,
                            32,
                            77,
                            121,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            83,
                            101,
                            115,
                            115,
                            105,
                            111,
                            110,
                            115,
                            26,
                            142,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            115,
                            101,
                            115,
                            115,
                            105,
                            111,
                            110,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            103,
                            101,
                            110,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            115,
                            119,
                            105,
                            116,
                            99,
                            104,
                            32,
                            97,
                            99,
                            99,
                            111,
                            117,
                            110,
                            116,
                            115,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            32,
                            97,
                            112,
                            112,
                            108,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            31,
                            58,
                            1,
                            42,
                            34,
                            26,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            115,
                            101,
                            115,
                            115,
                            105,
                            111,
                            110,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        listMyMetadata: {
            name: "ListMyMetadata",
            requestType: ListMyMetadataRequest,
            requestStream: false,
            responseType: ListMyMetadataResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            170,
                            1,
                            10,
                            13,
                            85,
                            115,
                            101,
                            114,
                            32,
                            77,
                            101,
                            116,
                            97,
                            100,
                            97,
                            116,
                            97,
                            18,
                            20,
                            71,
                            101,
                            116,
                            32,
                            77,
                            121,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            77,
                            101,
                            116,
                            97,
                            100,
                            97,
                            116,
                            97,
                            26,
                            130,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            109,
                            101,
                            116,
                            97,
                            100,
                            97,
                            116,
                            97,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            77,
                            101,
                            116,
                            97,
                            100,
                            97,
                            116,
                            97,
                            32,
                            105,
                            115,
                            32,
                            97,
                            32,
                            107,
                            101,
                            121,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            105,
                            110,
                            102,
                            111,
                            114,
                            109,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            110,
                            101,
                            101,
                            100,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            31,
                            58,
                            1,
                            42,
                            34,
                            26,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            109,
                            101,
                            116,
                            97,
                            100,
                            97,
                            116,
                            97,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        getMyMetadata: {
            name: "GetMyMetadata",
            requestType: GetMyMetadataRequest,
            requestStream: false,
            responseType: GetMyMetadataResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            193,
                            1,
                            10,
                            13,
                            85,
                            115,
                            101,
                            114,
                            32,
                            77,
                            101,
                            116,
                            97,
                            100,
                            97,
                            116,
                            97,
                            18,
                            27,
                            71,
                            101,
                            116,
                            32,
                            77,
                            121,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            77,
                            101,
                            116,
                            97,
                            100,
                            97,
                            116,
                            97,
                            32,
                            66,
                            121,
                            32,
                            75,
                            101,
                            121,
                            26,
                            146,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            109,
                            101,
                            116,
                            97,
                            100,
                            97,
                            116,
                            97,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            32,
                            98,
                            121,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            107,
                            101,
                            121,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            77,
                            101,
                            116,
                            97,
                            100,
                            97,
                            116,
                            97,
                            32,
                            105,
                            115,
                            32,
                            97,
                            32,
                            107,
                            101,
                            121,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            105,
                            110,
                            102,
                            111,
                            114,
                            109,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            110,
                            101,
                            101,
                            100,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            26,
                            18,
                            24,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            109,
                            101,
                            116,
                            97,
                            100,
                            97,
                            116,
                            97,
                            47,
                            123,
                            107,
                            101,
                            121,
                            125,
                        ]),
                    ],
                },
            },
        },
        listMyRefreshTokens: {
            name: "ListMyRefreshTokens",
            requestType: ListMyRefreshTokensRequest,
            requestStream: false,
            responseType: ListMyRefreshTokensResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            96,
                            10,
                            11,
                            85,
                            115,
                            101,
                            114,
                            32,
                            84,
                            111,
                            107,
                            101,
                            110,
                            115,
                            18,
                            18,
                            71,
                            101,
                            116,
                            32,
                            82,
                            101,
                            102,
                            114,
                            101,
                            115,
                            104,
                            32,
                            84,
                            111,
                            107,
                            101,
                            110,
                            115,
                            26,
                            61,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            114,
                            101,
                            102,
                            114,
                            101,
                            115,
                            104,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            37,
                            58,
                            1,
                            42,
                            34,
                            32,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            47,
                            114,
                            101,
                            102,
                            114,
                            101,
                            115,
                            104,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        revokeMyRefreshToken: {
            name: "RevokeMyRefreshToken",
            requestType: RevokeMyRefreshTokenRequest,
            requestStream: false,
            responseType: RevokeMyRefreshTokenResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            110,
                            10,
                            11,
                            85,
                            115,
                            101,
                            114,
                            32,
                            84,
                            111,
                            107,
                            101,
                            110,
                            115,
                            18,
                            21,
                            82,
                            101,
                            118,
                            111,
                            107,
                            101,
                            32,
                            82,
                            101,
                            102,
                            114,
                            101,
                            115,
                            104,
                            32,
                            84,
                            111,
                            107,
                            101,
                            110,
                            115,
                            26,
                            72,
                            82,
                            101,
                            118,
                            111,
                            107,
                            101,
                            115,
                            32,
                            97,
                            32,
                            115,
                            105,
                            110,
                            103,
                            108,
                            101,
                            32,
                            114,
                            101,
                            102,
                            114,
                            101,
                            115,
                            104,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            111,
                            114,
                            105,
                            122,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            40,
                            116,
                            111,
                            107,
                            101,
                            110,
                            41,
                            32,
                            105,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            31,
                            42,
                            29,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            47,
                            114,
                            101,
                            102,
                            114,
                            101,
                            115,
                            104,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        revokeAllMyRefreshTokens: {
            name: "RevokeAllMyRefreshTokens",
            requestType: RevokeAllMyRefreshTokensRequest,
            requestStream: false,
            responseType: RevokeAllMyRefreshTokensResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            95,
                            10,
                            11,
                            85,
                            115,
                            101,
                            114,
                            32,
                            84,
                            111,
                            107,
                            101,
                            110,
                            115,
                            18,
                            25,
                            82,
                            101,
                            118,
                            111,
                            107,
                            101,
                            32,
                            65,
                            108,
                            108,
                            32,
                            82,
                            101,
                            102,
                            114,
                            101,
                            115,
                            104,
                            32,
                            84,
                            111,
                            107,
                            101,
                            110,
                            115,
                            26,
                            53,
                            82,
                            101,
                            118,
                            111,
                            107,
                            101,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            114,
                            101,
                            102,
                            114,
                            101,
                            115,
                            104,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            41,
                            58,
                            1,
                            42,
                            34,
                            36,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            47,
                            114,
                            101,
                            102,
                            114,
                            101,
                            115,
                            104,
                            47,
                            95,
                            114,
                            101,
                            118,
                            111,
                            107,
                            101,
                            95,
                            97,
                            108,
                            108,
                        ]),
                    ],
                },
            },
        },
        updateMyUserName: {
            name: "UpdateMyUserName",
            requestType: UpdateMyUserNameRequest,
            requestStream: false,
            responseType: UpdateMyUserNameResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            142,
                            1,
                            10,
                            5,
                            85,
                            115,
                            101,
                            114,
                            115,
                            18,
                            18,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            77,
                            121,
                            32,
                            85,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            26,
                            113,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            101,
                            119,
                            108,
                            121,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            23,
                            58,
                            1,
                            42,
                            26,
                            18,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                        ]),
                    ],
                },
            },
        },
        getMyPasswordComplexityPolicy: {
            name: "GetMyPasswordComplexityPolicy",
            requestType: GetMyPasswordComplexityPolicyRequest,
            requestStream: false,
            responseType: GetMyPasswordComplexityPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            252,
                            1,
                            10,
                            13,
                            85,
                            115,
                            101,
                            114,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            10,
                            8,
                            80,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            18,
                            29,
                            71,
                            101,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            193,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            73,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            116,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            111,
                            114,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            104,
                            111,
                            119,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            108,
                            111,
                            111,
                            107,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            32,
                            18,
                            30,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            115,
                            47,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                        ]),
                    ],
                },
            },
        },
        updateMyPassword: {
            name: "UpdateMyPassword",
            requestType: UpdateMyPasswordRequest,
            requestStream: false,
            responseType: UpdateMyPasswordResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            144,
                            1,
                            10,
                            13,
                            85,
                            115,
                            101,
                            114,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            18,
                            15,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            26,
                            110,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            102,
                            111,
                            108,
                            108,
                            111,
                            119,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            23,
                            58,
                            1,
                            42,
                            26,
                            18,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                        ]),
                    ],
                },
            },
        },
        getMyProfile: {
            name: "GetMyProfile",
            requestType: GetMyProfileRequest,
            requestStream: false,
            responseType: GetMyProfileResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            134,
                            1,
                            10,
                            12,
                            85,
                            115,
                            101,
                            114,
                            32,
                            80,
                            114,
                            111,
                            102,
                            105,
                            108,
                            101,
                            18,
                            14,
                            71,
                            101,
                            116,
                            32,
                            77,
                            121,
                            32,
                            80,
                            114,
                            111,
                            102,
                            105,
                            108,
                            101,
                            26,
                            102,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            102,
                            105,
                            108,
                            101,
                            32,
                            105,
                            110,
                            102,
                            111,
                            114,
                            109,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            105,
                            110,
                            99,
                            108,
                            117,
                            100,
                            101,
                            115,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            110,
                            97,
                            109,
                            101,
                            44,
                            32,
                            102,
                            97,
                            109,
                            105,
                            108,
                            121,
                            32,
                            110,
                            97,
                            109,
                            101,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([19, 18, 17, 47, 117, 115, 101, 114, 115, 47, 109, 101, 47, 112, 114, 111, 102, 105, 108, 101]),
                    ],
                },
            },
        },
        updateMyProfile: {
            name: "UpdateMyProfile",
            requestType: UpdateMyProfileRequest,
            requestStream: false,
            responseType: UpdateMyProfileResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            164,
                            1,
                            10,
                            12,
                            85,
                            115,
                            101,
                            114,
                            32,
                            80,
                            114,
                            111,
                            102,
                            105,
                            108,
                            101,
                            18,
                            17,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            77,
                            121,
                            32,
                            80,
                            114,
                            111,
                            102,
                            105,
                            108,
                            101,
                            26,
                            128,
                            1,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            102,
                            105,
                            108,
                            101,
                            32,
                            105,
                            110,
                            102,
                            111,
                            114,
                            109,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            105,
                            110,
                            99,
                            108,
                            117,
                            100,
                            101,
                            115,
                            32,
                            105,
                            110,
                            102,
                            111,
                            114,
                            109,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            108,
                            105,
                            107,
                            101,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            110,
                            97,
                            109,
                            101,
                            44,
                            32,
                            102,
                            97,
                            109,
                            105,
                            108,
                            121,
                            32,
                            110,
                            97,
                            109,
                            101,
                            44,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            22,
                            58,
                            1,
                            42,
                            26,
                            17,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            112,
                            114,
                            111,
                            102,
                            105,
                            108,
                            101,
                        ]),
                    ],
                },
            },
        },
        getMyEmail: {
            name: "GetMyEmail",
            requestType: GetMyEmailRequest,
            requestStream: false,
            responseType: GetMyEmailResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            102,
                            10,
                            10,
                            85,
                            115,
                            101,
                            114,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            18,
                            12,
                            71,
                            101,
                            116,
                            32,
                            77,
                            121,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            26,
                            74,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            102,
                            108,
                            97,
                            103,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [Buffer.from([17, 18, 15, 47, 117, 115, 101, 114, 115, 47, 109, 101, 47, 101, 109, 97, 105, 108])],
                },
            },
        },
        setMyEmail: {
            name: "SetMyEmail",
            requestType: SetMyEmailRequest,
            requestStream: false,
            responseType: SetMyEmailResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            144,
                            1,
                            10,
                            10,
                            85,
                            115,
                            101,
                            114,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            18,
                            15,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            77,
                            121,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            26,
                            113,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            65,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([20, 58, 1, 42, 26, 15, 47, 117, 115, 101, 114, 115, 47, 109, 101, 47, 101, 109, 97, 105, 108]),
                    ],
                },
            },
        },
        verifyMyEmail: {
            name: "VerifyMyEmail",
            requestType: VerifyMyEmailRequest,
            requestStream: false,
            responseType: VerifyMyEmailResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            162,
                            1,
                            10,
                            10,
                            85,
                            115,
                            101,
                            114,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            18,
                            15,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            77,
                            121,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            26,
                            130,
                            1,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            100,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            104,
                            97,
                            115,
                            32,
                            98,
                            101,
                            101,
                            110,
                            32,
                            115,
                            101,
                            110,
                            116,
                            46,
                            32,
                            83,
                            116,
                            97,
                            116,
                            101,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            32,
                            105,
                            115,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            28,
                            58,
                            1,
                            42,
                            34,
                            23,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            95,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                        ]),
                    ],
                },
            },
        },
        resendMyEmailVerification: {
            name: "ResendMyEmailVerification",
            requestType: ResendMyEmailVerificationRequest,
            requestStream: false,
            responseType: ResendMyEmailVerificationResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            163,
                            1,
                            10,
                            10,
                            85,
                            115,
                            101,
                            114,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            18,
                            25,
                            82,
                            101,
                            115,
                            101,
                            110,
                            100,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            122,
                            65,
                            32,
                            110,
                            101,
                            119,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            115,
                            116,
                            32,
                            115,
                            101,
                            116,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            115,
                            116,
                            32,
                            115,
                            101,
                            116,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            41,
                            58,
                            1,
                            42,
                            34,
                            36,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            95,
                            114,
                            101,
                            115,
                            101,
                            110,
                            100,
                            95,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                        ]),
                    ],
                },
            },
        },
        getMyPhone: {
            name: "GetMyPhone",
            requestType: GetMyPhoneRequest,
            requestStream: false,
            responseType: GetMyPhoneResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            115,
                            10,
                            10,
                            85,
                            115,
                            101,
                            114,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            18,
                            12,
                            71,
                            101,
                            116,
                            32,
                            77,
                            121,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            26,
                            87,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            110,
                            100,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            116,
                            97,
                            116,
                            101,
                            32,
                            105,
                            115,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            111,
                            114,
                            32,
                            110,
                            111,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([17, 18, 15, 47, 117, 115, 101, 114, 115, 47, 109, 101, 47, 112, 104, 111, 110, 101]),
                    ],
                },
            },
        },
        setMyPhone: {
            name: "SetMyPhone",
            requestType: SetMyPhoneRequest,
            requestStream: false,
            responseType: SetMyPhoneResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            189,
                            1,
                            10,
                            10,
                            85,
                            115,
                            101,
                            114,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            18,
                            12,
                            83,
                            101,
                            116,
                            32,
                            77,
                            121,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            26,
                            160,
                            1,
                            83,
                            101,
                            116,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            73,
                            102,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            114,
                            101,
                            99,
                            101,
                            105,
                            118,
                            101,
                            32,
                            97,
                            110,
                            32,
                            115,
                            109,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            97,
                            32,
                            99,
                            111,
                            100,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            20,
                            58,
                            1,
                            42,
                            26,
                            15,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            112,
                            104,
                            111,
                            110,
                            101,
                        ]),
                    ],
                },
            },
        },
        verifyMyPhone: {
            name: "VerifyMyPhone",
            requestType: VerifyMyPhoneRequest,
            requestStream: false,
            responseType: VerifyMyPhoneResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            172,
                            1,
                            10,
                            10,
                            85,
                            115,
                            101,
                            114,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            18,
                            12,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            26,
                            143,
                            1,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            100,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            104,
                            97,
                            115,
                            32,
                            98,
                            101,
                            101,
                            110,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            46,
                            32,
                            83,
                            116,
                            97,
                            116,
                            101,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            28,
                            58,
                            1,
                            42,
                            34,
                            23,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            112,
                            104,
                            111,
                            110,
                            101,
                            47,
                            95,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                        ]),
                    ],
                },
            },
        },
        /** Resends an sms to the last given phone number, to verify it */
        resendMyPhoneVerification: {
            name: "ResendMyPhoneVerification",
            requestType: ResendMyPhoneVerificationRequest,
            requestStream: false,
            responseType: ResendMyPhoneVerificationResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            185,
                            1,
                            10,
                            10,
                            85,
                            115,
                            101,
                            114,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            18,
                            25,
                            82,
                            101,
                            115,
                            101,
                            110,
                            100,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            143,
                            1,
                            82,
                            101,
                            115,
                            101,
                            110,
                            100,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            115,
                            116,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            41,
                            58,
                            1,
                            42,
                            34,
                            36,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            112,
                            104,
                            111,
                            110,
                            101,
                            47,
                            95,
                            114,
                            101,
                            115,
                            101,
                            110,
                            100,
                            95,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                        ]),
                    ],
                },
            },
        },
        removeMyPhone: {
            name: "RemoveMyPhone",
            requestType: RemoveMyPhoneRequest,
            requestStream: false,
            responseType: RemoveMyPhoneResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            94,
                            10,
                            10,
                            85,
                            115,
                            101,
                            114,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            18,
                            19,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            32,
                            78,
                            117,
                            109,
                            98,
                            101,
                            114,
                            26,
                            59,
                            84,
                            104,
                            101,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([17, 42, 15, 47, 117, 115, 101, 114, 115, 47, 109, 101, 47, 112, 104, 111, 110, 101]),
                    ],
                },
            },
        },
        removeMyAvatar: {
            name: "RemoveMyAvatar",
            requestType: RemoveMyAvatarRequest,
            requestStream: false,
            responseType: RemoveMyAvatarResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            144,
                            1,
                            10,
                            4,
                            85,
                            115,
                            101,
                            114,
                            18,
                            16,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            77,
                            121,
                            32,
                            65,
                            118,
                            97,
                            116,
                            97,
                            114,
                            26,
                            118,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            118,
                            97,
                            116,
                            97,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            73,
                            102,
                            32,
                            110,
                            111,
                            32,
                            97,
                            118,
                            97,
                            116,
                            97,
                            114,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            116,
                            32,
                            97,
                            32,
                            115,
                            104,
                            111,
                            114,
                            116,
                            99,
                            117,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            97,
                            109,
                            101,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            112,
                            114,
                            101,
                            115,
                            101,
                            110,
                            116,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([18, 42, 16, 47, 117, 115, 101, 114, 115, 47, 109, 101, 47, 97, 118, 97, 116, 97, 114]),
                    ],
                },
            },
        },
        listMyLinkedIDPs: {
            name: "ListMyLinkedIDPs",
            requestType: ListMyLinkedIDPsRequest,
            requestStream: false,
            responseType: ListMyLinkedIDPsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            153,
                            1,
                            10,
                            17,
                            85,
                            115,
                            101,
                            114,
                            32,
                            83,
                            111,
                            99,
                            105,
                            97,
                            108,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            18,
                            18,
                            76,
                            105,
                            115,
                            116,
                            32,
                            83,
                            111,
                            99,
                            105,
                            97,
                            108,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            115,
                            26,
                            112,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            108,
                            105,
                            110,
                            107,
                            101,
                            100,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            47,
                            115,
                            111,
                            99,
                            105,
                            97,
                            108,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            40,
                            101,
                            46,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            44,
                            32,
                            77,
                            105,
                            99,
                            114,
                            111,
                            115,
                            111,
                            102,
                            116,
                            44,
                            32,
                            65,
                            122,
                            117,
                            114,
                            101,
                            65,
                            68,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            41,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            34,
                            22,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        removeMyLinkedIDP: {
            name: "RemoveMyLinkedIDP",
            requestType: RemoveMyLinkedIDPRequest,
            requestStream: false,
            responseType: RemoveMyLinkedIDPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            176,
                            2,
                            10,
                            17,
                            85,
                            115,
                            101,
                            114,
                            32,
                            83,
                            111,
                            99,
                            105,
                            97,
                            108,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            18,
                            19,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            83,
                            111,
                            99,
                            105,
                            97,
                            108,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            26,
                            133,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            111,
                            110,
                            101,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            110,
                            107,
                            101,
                            100,
                            32,
                            115,
                            111,
                            99,
                            105,
                            97,
                            108,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            115,
                            47,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            40,
                            101,
                            46,
                            103,
                            46,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            44,
                            32,
                            77,
                            105,
                            99,
                            114,
                            111,
                            115,
                            111,
                            102,
                            116,
                            44,
                            32,
                            65,
                            122,
                            117,
                            114,
                            101,
                            65,
                            68,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            41,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            100,
                            111,
                            101,
                            115,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            105,
                            108,
                            105,
                            116,
                            105,
                            101,
                            115,
                            32,
                            116,
                            111,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            42,
                            42,
                            40,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            123,
                            105,
                            100,
                            112,
                            95,
                            105,
                            100,
                            125,
                            47,
                            123,
                            108,
                            105,
                            110,
                            107,
                            101,
                            100,
                            95,
                            117,
                            115,
                            101,
                            114,
                            95,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        listMyAuthFactors: {
            name: "ListMyAuthFactors",
            requestType: ListMyAuthFactorsRequest,
            requestStream: false,
            responseType: ListMyAuthFactorsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            149,
                            1,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            27,
                            76,
                            105,
                            115,
                            116,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            26,
                            90,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            108,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            44,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            77,
                            70,
                            65,
                            41,
                            44,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            50,
                            70,
                            65,
                            41,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            32,
                            34,
                            30,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            97,
                            117,
                            116,
                            104,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        addMyAuthFactorOTP: {
            name: "AddMyAuthFactorOTP",
            requestType: AddMyAuthFactorOTPRequest,
            requestStream: false,
            responseType: AddMyAuthFactorOTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            156,
                            2,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            27,
                            65,
                            100,
                            100,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            26,
                            224,
                            1,
                            65,
                            100,
                            100,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            79,
                            84,
                            80,
                            32,
                            105,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            111,
                            114,
                            32,
                            97,
                            112,
                            112,
                            32,
                            108,
                            105,
                            107,
                            101,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            47,
                            77,
                            105,
                            99,
                            114,
                            111,
                            115,
                            111,
                            102,
                            116,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            111,
                            114,
                            44,
                            32,
                            65,
                            117,
                            116,
                            104,
                            121,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            32,
                            79,
                            110,
                            108,
                            121,
                            32,
                            111,
                            110,
                            101,
                            32,
                            79,
                            84,
                            80,
                            32,
                            112,
                            101,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            97,
                            108,
                            108,
                            111,
                            119,
                            101,
                            100,
                            46,
                            32,
                            65,
                            102,
                            116,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            105,
                            110,
                            103,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            79,
                            84,
                            80,
                            32,
                            105,
                            116,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            31,
                            58,
                            1,
                            42,
                            34,
                            26,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            97,
                            117,
                            116,
                            104,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            111,
                            116,
                            112,
                        ]),
                    ],
                },
            },
        },
        verifyMyAuthFactorOTP: {
            name: "VerifyMyAuthFactorOTP",
            requestType: VerifyMyAuthFactorOTPRequest,
            requestStream: false,
            responseType: VerifyMyAuthFactorOTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            253,
                            1,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            30,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            26,
                            190,
                            1,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            115,
                            116,
                            32,
                            97,
                            100,
                            100,
                            101,
                            100,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            79,
                            84,
                            80,
                            32,
                            105,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            111,
                            114,
                            32,
                            97,
                            112,
                            112,
                            32,
                            108,
                            105,
                            107,
                            101,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            47,
                            77,
                            105,
                            99,
                            114,
                            111,
                            115,
                            111,
                            102,
                            116,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            111,
                            114,
                            44,
                            32,
                            65,
                            117,
                            116,
                            104,
                            121,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            32,
                            79,
                            110,
                            108,
                            121,
                            32,
                            111,
                            110,
                            101,
                            32,
                            79,
                            84,
                            80,
                            32,
                            112,
                            101,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            97,
                            108,
                            108,
                            111,
                            119,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            39,
                            58,
                            1,
                            42,
                            34,
                            34,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            97,
                            117,
                            116,
                            104,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            111,
                            116,
                            112,
                            47,
                            95,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                        ]),
                    ],
                },
            },
        },
        removeMyAuthFactorOTP: {
            name: "RemoveMyAuthFactorOTP",
            requestType: RemoveMyAuthFactorOTPRequest,
            requestStream: false,
            responseType: RemoveMyAuthFactorOTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            185,
                            2,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            30,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            26,
                            250,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            79,
                            84,
                            80,
                            32,
                            105,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            111,
                            114,
                            32,
                            97,
                            112,
                            112,
                            32,
                            108,
                            105,
                            107,
                            101,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            47,
                            77,
                            105,
                            99,
                            114,
                            111,
                            115,
                            111,
                            102,
                            116,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            111,
                            114,
                            44,
                            32,
                            65,
                            117,
                            116,
                            104,
                            121,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            32,
                            65,
                            115,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            111,
                            110,
                            101,
                            32,
                            79,
                            84,
                            80,
                            32,
                            112,
                            101,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            97,
                            108,
                            108,
                            111,
                            119,
                            101,
                            100,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            79,
                            84,
                            80,
                            32,
                            97,
                            115,
                            32,
                            97,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            28,
                            42,
                            26,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            97,
                            117,
                            116,
                            104,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            111,
                            116,
                            112,
                        ]),
                    ],
                },
            },
        },
        addMyAuthFactorOTPSMS: {
            name: "AddMyAuthFactorOTPSMS",
            requestType: AddMyAuthFactorOTPSMSRequest,
            requestStream: false,
            responseType: AddMyAuthFactorOTPSMSResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            153,
                            2,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            31,
                            65,
                            100,
                            100,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            32,
                            83,
                            77,
                            83,
                            26,
                            217,
                            1,
                            65,
                            100,
                            100,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            32,
                            83,
                            77,
                            83,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            79,
                            84,
                            80,
                            32,
                            83,
                            77,
                            83,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            101,
                            110,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            116,
                            111,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            97,
                            32,
                            79,
                            84,
                            80,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            116,
                            101,
                            115,
                            116,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            100,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            35,
                            58,
                            1,
                            42,
                            34,
                            30,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            97,
                            117,
                            116,
                            104,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            111,
                            116,
                            112,
                            95,
                            115,
                            109,
                            115,
                        ]),
                    ],
                },
            },
        },
        removeMyAuthFactorOTPSMS: {
            name: "RemoveMyAuthFactorOTPSMS",
            requestType: RemoveMyAuthFactorOTPSMSRequest,
            requestStream: false,
            responseType: RemoveMyAuthFactorOTPSMSResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            252,
                            1,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            34,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            32,
                            83,
                            77,
                            83,
                            26,
                            185,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            32,
                            83,
                            77,
                            83,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            65,
                            115,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            111,
                            110,
                            101,
                            32,
                            79,
                            84,
                            80,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            101,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            97,
                            108,
                            108,
                            111,
                            119,
                            101,
                            100,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            79,
                            84,
                            80,
                            32,
                            83,
                            77,
                            83,
                            32,
                            97,
                            115,
                            32,
                            97,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            32,
                            42,
                            30,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            97,
                            117,
                            116,
                            104,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            111,
                            116,
                            112,
                            95,
                            115,
                            109,
                            115,
                        ]),
                    ],
                },
            },
        },
        addMyAuthFactorOTPEmail: {
            name: "AddMyAuthFactorOTPEmail",
            requestType: AddMyAuthFactorOTPEmailRequest,
            requestStream: false,
            responseType: AddMyAuthFactorOTPEmailResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            145,
                            2,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            33,
                            65,
                            100,
                            100,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            26,
                            207,
                            1,
                            65,
                            100,
                            100,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            79,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            101,
                            110,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            116,
                            111,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            97,
                            32,
                            79,
                            84,
                            80,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            116,
                            101,
                            115,
                            116,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            100,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            37,
                            58,
                            1,
                            42,
                            34,
                            32,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            97,
                            117,
                            116,
                            104,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            111,
                            116,
                            112,
                            95,
                            101,
                            109,
                            97,
                            105,
                            108,
                        ]),
                    ],
                },
            },
        },
        removeMyAuthFactorOTPEmail: {
            name: "RemoveMyAuthFactorOTPEmail",
            requestType: RemoveMyAuthFactorOTPEmailRequest,
            requestStream: false,
            responseType: RemoveMyAuthFactorOTPEmailResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            132,
                            2,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            36,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            26,
                            191,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            79,
                            110,
                            101,
                            45,
                            84,
                            105,
                            109,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            40,
                            79,
                            84,
                            80,
                            41,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            65,
                            115,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            111,
                            110,
                            101,
                            32,
                            79,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            101,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            97,
                            108,
                            108,
                            111,
                            119,
                            101,
                            100,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            79,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            115,
                            32,
                            97,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            34,
                            42,
                            32,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            97,
                            117,
                            116,
                            104,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            111,
                            116,
                            112,
                            95,
                            101,
                            109,
                            97,
                            105,
                            108,
                        ]),
                    ],
                },
            },
        },
        addMyAuthFactorU2F: {
            name: "AddMyAuthFactorU2F",
            requestType: AddMyAuthFactorU2FRequest,
            requestStream: false,
            responseType: AddMyAuthFactorU2FResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            163,
                            2,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            33,
                            65,
                            100,
                            100,
                            32,
                            85,
                            110,
                            105,
                            118,
                            101,
                            114,
                            115,
                            97,
                            108,
                            32,
                            83,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            85,
                            50,
                            70,
                            41,
                            26,
                            225,
                            1,
                            65,
                            100,
                            100,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            85,
                            110,
                            105,
                            118,
                            101,
                            114,
                            115,
                            97,
                            108,
                            32,
                            83,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            85,
                            50,
                            70,
                            41,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            85,
                            50,
                            70,
                            32,
                            105,
                            115,
                            32,
                            97,
                            32,
                            100,
                            101,
                            118,
                            105,
                            99,
                            101,
                            45,
                            100,
                            101,
                            112,
                            101,
                            110,
                            100,
                            101,
                            110,
                            116,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            108,
                            105,
                            107,
                            101,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            83,
                            99,
                            97,
                            110,
                            44,
                            32,
                            70,
                            97,
                            99,
                            101,
                            73,
                            68,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            105,
                            110,
                            103,
                            46,
                            32,
                            77,
                            117,
                            108,
                            116,
                            105,
                            112,
                            108,
                            101,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            97,
                            100,
                            100,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            31,
                            58,
                            1,
                            42,
                            34,
                            26,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            97,
                            117,
                            116,
                            104,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            117,
                            50,
                            102,
                        ]),
                    ],
                },
            },
        },
        verifyMyAuthFactorU2F: {
            name: "VerifyMyAuthFactorU2F",
            requestType: VerifyMyAuthFactorU2FRequest,
            requestStream: false,
            responseType: VerifyMyAuthFactorU2FResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            147,
                            1,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            33,
                            65,
                            100,
                            100,
                            32,
                            85,
                            110,
                            105,
                            118,
                            101,
                            114,
                            115,
                            97,
                            108,
                            32,
                            83,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            85,
                            50,
                            70,
                            41,
                            26,
                            82,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            115,
                            116,
                            32,
                            97,
                            100,
                            100,
                            101,
                            100,
                            32,
                            110,
                            101,
                            119,
                            32,
                            85,
                            110,
                            105,
                            118,
                            101,
                            114,
                            115,
                            97,
                            108,
                            32,
                            83,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            85,
                            50,
                            70,
                            41,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            39,
                            58,
                            1,
                            42,
                            34,
                            34,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            97,
                            117,
                            116,
                            104,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            117,
                            50,
                            102,
                            47,
                            95,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                        ]),
                    ],
                },
            },
        },
        removeMyAuthFactorU2F: {
            name: "RemoveMyAuthFactorU2F",
            requestType: RemoveMyAuthFactorU2FRequest,
            requestStream: false,
            responseType: RemoveMyAuthFactorU2FResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            162,
                            1,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            36,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            85,
                            110,
                            105,
                            118,
                            101,
                            114,
                            115,
                            97,
                            108,
                            32,
                            83,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            85,
                            50,
                            70,
                            41,
                            26,
                            94,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            85,
                            110,
                            105,
                            118,
                            101,
                            114,
                            115,
                            97,
                            108,
                            32,
                            83,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            85,
                            50,
                            70,
                            41,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            98,
                            121,
                            32,
                            115,
                            101,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            39,
                            42,
                            37,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            97,
                            117,
                            116,
                            104,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            117,
                            50,
                            102,
                            47,
                            123,
                            116,
                            111,
                            107,
                            101,
                            110,
                            95,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        listMyPasswordless: {
            name: "ListMyPasswordless",
            requestType: ListMyPasswordlessRequest,
            requestStream: false,
            responseType: ListMyPasswordlessResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            162,
                            1,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            12,
                            76,
                            105,
                            115,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            26,
                            118,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            109,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            46,
                            32,
                            76,
                            105,
                            107,
                            101,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            70,
                            97,
                            99,
                            101,
                            73,
                            68,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            72,
                            97,
                            114,
                            100,
                            119,
                            97,
                            114,
                            101,
                            84,
                            111,
                            107,
                            101,
                            110,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            32,
                            34,
                            30,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        addMyPasswordless: {
            name: "AddMyPasswordless",
            requestType: AddMyPasswordlessRequest,
            requestStream: false,
            responseType: AddMyPasswordlessResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            207,
                            1,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            11,
                            65,
                            100,
                            100,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            26,
                            163,
                            1,
                            65,
                            100,
                            100,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            109,
                            101,
                            116,
                            104,
                            111,
                            100,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            76,
                            105,
                            107,
                            101,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            70,
                            97,
                            99,
                            101,
                            73,
                            68,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            72,
                            97,
                            114,
                            100,
                            119,
                            97,
                            114,
                            101,
                            84,
                            111,
                            107,
                            101,
                            110,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            32,
                            77,
                            117,
                            108,
                            116,
                            105,
                            112,
                            108,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            34,
                            22,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                        ]),
                    ],
                },
            },
        },
        addMyPasswordlessLink: {
            name: "AddMyPasswordlessLink",
            requestType: AddMyPasswordlessLinkRequest,
            requestStream: false,
            responseType: AddMyPasswordlessLinkResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            218,
                            2,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            16,
                            65,
                            100,
                            100,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            108,
                            105,
                            110,
                            107,
                            26,
                            169,
                            2,
                            65,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            111,
                            114,
                            32,
                            108,
                            105,
                            110,
                            107,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            115,
                            112,
                            111,
                            110,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            108,
                            105,
                            110,
                            107,
                            32,
                            101,
                            110,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            100,
                            101,
                            118,
                            105,
                            99,
                            101,
                            32,
                            105,
                            102,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            100,
                            101,
                            118,
                            105,
                            99,
                            101,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            97,
                            108,
                            108,
                            32,
                            112,
                            108,
                            97,
                            116,
                            102,
                            111,
                            114,
                            109,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            111,
                            114,
                            115,
                            46,
                            32,
                            101,
                            46,
                            103,
                            46,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            97,
                            108,
                            114,
                            101,
                            97,
                            100,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            101,
                            100,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            32,
                            97,
                            110,
                            100,
                            32,
                            119,
                            97,
                            110,
                            116,
                            115,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            70,
                            97,
                            99,
                            101,
                            73,
                            68,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            80,
                            104,
                            111,
                            110,
                            101,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            33,
                            58,
                            1,
                            42,
                            34,
                            28,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            95,
                            108,
                            105,
                            110,
                            107,
                        ]),
                    ],
                },
            },
        },
        sendMyPasswordlessLink: {
            name: "SendMyPasswordlessLink",
            requestType: SendMyPasswordlessLinkRequest,
            requestStream: false,
            responseType: SendMyPasswordlessLinkResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            233,
                            2,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            17,
                            83,
                            101,
                            110,
                            100,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            108,
                            105,
                            110,
                            107,
                            26,
                            183,
                            2,
                            65,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            111,
                            114,
                            32,
                            108,
                            105,
                            110,
                            107,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            110,
                            100,
                            32,
                            115,
                            101,
                            110,
                            100,
                            115,
                            32,
                            105,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            108,
                            105,
                            110,
                            107,
                            32,
                            101,
                            110,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            100,
                            101,
                            118,
                            105,
                            99,
                            101,
                            32,
                            105,
                            102,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            100,
                            101,
                            118,
                            105,
                            99,
                            101,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            97,
                            108,
                            108,
                            32,
                            112,
                            108,
                            97,
                            116,
                            102,
                            111,
                            114,
                            109,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            111,
                            114,
                            115,
                            46,
                            32,
                            101,
                            46,
                            103,
                            46,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            97,
                            108,
                            114,
                            101,
                            97,
                            100,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            101,
                            100,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            32,
                            97,
                            110,
                            100,
                            32,
                            119,
                            97,
                            110,
                            116,
                            115,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            70,
                            97,
                            99,
                            101,
                            73,
                            68,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            80,
                            104,
                            111,
                            110,
                            101,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            38,
                            58,
                            1,
                            42,
                            34,
                            33,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            95,
                            115,
                            101,
                            110,
                            100,
                            95,
                            108,
                            105,
                            110,
                            107,
                        ]),
                    ],
                },
            },
        },
        verifyMyPasswordless: {
            name: "VerifyMyPasswordless",
            requestType: VerifyMyPasswordlessRequest,
            requestStream: false,
            responseType: VerifyMyPasswordlessResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            118,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            14,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            26,
                            72,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            115,
                            116,
                            32,
                            97,
                            100,
                            100,
                            101,
                            100,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            35,
                            58,
                            1,
                            42,
                            34,
                            30,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            95,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                        ]),
                    ],
                },
            },
        },
        removeMyPasswordless: {
            name: "RemoveMyPasswordless",
            requestType: RemoveMyPasswordlessRequest,
            requestStream: false,
            responseType: RemoveMyPasswordlessResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            231,
                            1,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            18,
                            14,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            26,
                            184,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            105,
                            108,
                            105,
                            116,
                            105,
                            101,
                            115,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            35,
                            42,
                            33,
                            47,
                            117,
                            115,
                            101,
                            114,
                            115,
                            47,
                            109,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            123,
                            116,
                            111,
                            107,
                            101,
                            110,
                            95,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        listMyUserGrants: {
            name: "ListMyUserGrants",
            requestType: ListMyUserGrantsRequest,
            requestStream: false,
            responseType: ListMyUserGrantsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            203,
                            1,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            111,
                            114,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            71,
                            114,
                            97,
                            110,
                            116,
                            115,
                            18,
                            29,
                            76,
                            105,
                            115,
                            116,
                            32,
                            77,
                            121,
                            32,
                            65,
                            117,
                            116,
                            104,
                            111,
                            114,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            71,
                            114,
                            97,
                            110,
                            116,
                            115,
                            26,
                            141,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            111,
                            114,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            117,
                            115,
                            101,
                            114,
                            32,
                            103,
                            114,
                            97,
                            110,
                            116,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            46,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            103,
                            114,
                            97,
                            110,
                            116,
                            115,
                            32,
                            99,
                            111,
                            110,
                            115,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            97,
                            110,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            97,
                            32,
                            112,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            32,
                            97,
                            110,
                            100,
                            32,
                            49,
                            45,
                            110,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            34,
                            22,
                            47,
                            117,
                            115,
                            101,
                            114,
                            103,
                            114,
                            97,
                            110,
                            116,
                            115,
                            47,
                            109,
                            101,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        listMyProjectOrgs: {
            name: "ListMyProjectOrgs",
            requestType: ListMyProjectOrgsRequest,
            requestStream: false,
            responseType: ListMyProjectOrgsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            178,
                            2,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            111,
                            114,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            71,
                            114,
                            97,
                            110,
                            116,
                            115,
                            18,
                            21,
                            76,
                            105,
                            115,
                            116,
                            32,
                            77,
                            121,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            26,
                            252,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            119,
                            104,
                            101,
                            114,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            97,
                            110,
                            121,
                            32,
                            97,
                            117,
                            116,
                            104,
                            111,
                            114,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            117,
                            115,
                            101,
                            114,
                            32,
                            103,
                            114,
                            97,
                            110,
                            116,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            105,
                            115,
                            32,
                            109,
                            97,
                            100,
                            101,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            101,
                            100,
                            32,
                            112,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            116,
                            101,
                            110,
                            97,
                            110,
                            99,
                            121,
                            32,
                            97,
                            112,
                            112,
                            108,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            116,
                            111,
                            32,
                            115,
                            104,
                            111,
                            119,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            32,
                            116,
                            101,
                            110,
                            97,
                            110,
                            116,
                            32,
                            115,
                            119,
                            105,
                            116,
                            99,
                            104,
                            101,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            32,
                            58,
                            1,
                            42,
                            34,
                            27,
                            47,
                            103,
                            108,
                            111,
                            98,
                            97,
                            108,
                            47,
                            112,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            111,
                            114,
                            103,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        listMyZitadelPermissions: {
            name: "ListMyZitadelPermissions",
            requestType: ListMyZitadelPermissionsRequest,
            requestStream: false,
            responseType: ListMyZitadelPermissionsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            213,
                            1,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            111,
                            114,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            71,
                            114,
                            97,
                            110,
                            116,
                            115,
                            18,
                            27,
                            76,
                            105,
                            115,
                            116,
                            32,
                            77,
                            121,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            80,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            115,
                            26,
                            153,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            98,
                            97,
                            115,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            109,
                            97,
                            110,
                            97,
                            103,
                            101,
                            114,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            46,
                            32,
                            40,
                            101,
                            46,
                            103,
                            58,
                            32,
                            79,
                            82,
                            71,
                            95,
                            79,
                            87,
                            78,
                            69,
                            82,
                            32,
                            61,
                            32,
                            111,
                            114,
                            103,
                            46,
                            114,
                            101,
                            97,
                            100,
                            44,
                            32,
                            111,
                            114,
                            103,
                            46,
                            119,
                            114,
                            105,
                            116,
                            101,
                            44,
                            32,
                            46,
                            46,
                            46,
                            41,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            33,
                            34,
                            31,
                            47,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            115,
                            47,
                            122,
                            105,
                            116,
                            97,
                            100,
                            101,
                            108,
                            47,
                            109,
                            101,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        listMyProjectPermissions: {
            name: "ListMyProjectPermissions",
            requestType: ListMyProjectPermissionsRequest,
            requestStream: false,
            responseType: ListMyProjectPermissionsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            156,
                            1,
                            10,
                            26,
                            85,
                            115,
                            101,
                            114,
                            32,
                            65,
                            117,
                            116,
                            104,
                            111,
                            114,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            71,
                            114,
                            97,
                            110,
                            116,
                            115,
                            18,
                            21,
                            76,
                            105,
                            115,
                            116,
                            32,
                            77,
                            121,
                            32,
                            80,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            32,
                            82,
                            111,
                            108,
                            101,
                            115,
                            26,
                            103,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            110,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            112,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            32,
                            40,
                            98,
                            97,
                            115,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            41,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            25,
                            34,
                            23,
                            47,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            115,
                            47,
                            109,
                            101,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        listMyMemberships: {
            name: "ListMyMemberships",
            requestType: ListMyMembershipsRequest,
            requestStream: false,
            responseType: ListMyMembershipsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            122,
                            10,
                            16,
                            85,
                            115,
                            101,
                            114,
                            32,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            104,
                            105,
                            112,
                            115,
                            18,
                            29,
                            76,
                            105,
                            115,
                            116,
                            32,
                            77,
                            121,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            77,
                            97,
                            110,
                            97,
                            103,
                            101,
                            114,
                            32,
                            82,
                            111,
                            108,
                            101,
                            115,
                            26,
                            71,
                            83,
                            104,
                            111,
                            119,
                            32,
                            97,
                            108,
                            108,
                            32,
                            116,
                            104,
                            101,
                            32,
                            109,
                            97,
                            110,
                            97,
                            103,
                            101,
                            109,
                            101,
                            110,
                            116,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            109,
                            121,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            40,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            77,
                            97,
                            110,
                            97,
                            103,
                            101,
                            114,
                            41,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            28,
                            58,
                            1,
                            42,
                            34,
                            23,
                            47,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            104,
                            105,
                            112,
                            115,
                            47,
                            109,
                            101,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        getMyLabelPolicy: {
            name: "GetMyLabelPolicy",
            requestType: GetMyLabelPolicyRequest,
            requestStream: false,
            responseType: GetMyLabelPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            222,
                            1,
                            10,
                            8,
                            80,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            18,
                            16,
                            71,
                            101,
                            116,
                            32,
                            76,
                            97,
                            98,
                            101,
                            108,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            191,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            73,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            116,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            111,
                            114,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            44,
                            32,
                            99,
                            111,
                            108,
                            111,
                            114,
                            115,
                            44,
                            32,
                            102,
                            111,
                            110,
                            116,
                            115,
                            44,
                            32,
                            105,
                            109,
                            97,
                            103,
                            101,
                            115,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [Buffer.from([17, 18, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 97, 98, 101, 108])],
                },
            },
        },
        getMyPrivacyPolicy: {
            name: "GetMyPrivacyPolicy",
            requestType: GetMyPrivacyPolicyRequest,
            requestStream: false,
            responseType: GetMyPrivacyPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            220,
                            1,
                            10,
                            8,
                            80,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            18,
                            18,
                            71,
                            101,
                            116,
                            32,
                            80,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            187,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            73,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            116,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            111,
                            114,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            84,
                            79,
                            83,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            101,
                            114,
                            109,
                            115,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            114,
                            118,
                            105,
                            99,
                            101,
                            32,
                            108,
                            105,
                            110,
                            107,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([19, 18, 17, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 112, 114, 105, 118, 97, 99, 121]),
                    ],
                },
            },
        },
        getMyLoginPolicy: {
            name: "GetMyLoginPolicy",
            requestType: GetMyLoginPolicyRequest,
            requestStream: false,
            responseType: GetMyLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            163,
                            2,
                            10,
                            8,
                            80,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            18,
                            16,
                            71,
                            101,
                            116,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            132,
                            2,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            73,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            116,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            111,
                            114,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            119,
                            104,
                            97,
                            116,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            105,
                            108,
                            105,
                            116,
                            105,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            111,
                            32,
                            117,
                            115,
                            101,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            44,
                            32,
                            101,
                            46,
                            103,
                            32,
                            115,
                            111,
                            99,
                            105,
                            97,
                            108,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            115,
                            44,
                            32,
                            77,
                            70,
                            65,
                            44,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([17, 18, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 111, 103, 105, 110]),
                    ],
                },
            },
        },
    },
};
function bytesFromBase64(b64) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}
function base64FromBytes(arr) {
    return globalThis.Buffer.from(arr).toString("base64");
}
function toTimestamp(date) {
    const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
    const nanos = (date.getTime() % 1_000) * 1_000_000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds.toNumber() || 0) * 1_000;
    millis += (t.nanos || 0) / 1_000_000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return Long.fromNumber(number);
}
function isSet(value) {
    return value !== null && value !== undefined;
}
