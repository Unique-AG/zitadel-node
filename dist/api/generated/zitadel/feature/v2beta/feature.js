// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: zitadel/feature/v2beta/feature.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "zitadel.feature.v2beta";
export var Source;
(function (Source) {
    Source[Source["SOURCE_UNSPECIFIED"] = 0] = "SOURCE_UNSPECIFIED";
    Source[Source["SOURCE_SYSTEM"] = 2] = "SOURCE_SYSTEM";
    Source[Source["SOURCE_INSTANCE"] = 3] = "SOURCE_INSTANCE";
    Source[Source["SOURCE_ORGANIZATION"] = 4] = "SOURCE_ORGANIZATION";
    /** SOURCE_PROJECT - reserved for future use */
    Source[Source["SOURCE_PROJECT"] = 5] = "SOURCE_PROJECT";
    /** SOURCE_APP - reserved for future use */
    Source[Source["SOURCE_APP"] = 6] = "SOURCE_APP";
    Source[Source["SOURCE_USER"] = 7] = "SOURCE_USER";
    Source[Source["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Source || (Source = {}));
export function sourceFromJSON(object) {
    switch (object) {
        case 0:
        case "SOURCE_UNSPECIFIED":
            return Source.SOURCE_UNSPECIFIED;
        case 2:
        case "SOURCE_SYSTEM":
            return Source.SOURCE_SYSTEM;
        case 3:
        case "SOURCE_INSTANCE":
            return Source.SOURCE_INSTANCE;
        case 4:
        case "SOURCE_ORGANIZATION":
            return Source.SOURCE_ORGANIZATION;
        case 5:
        case "SOURCE_PROJECT":
            return Source.SOURCE_PROJECT;
        case 6:
        case "SOURCE_APP":
            return Source.SOURCE_APP;
        case 7:
        case "SOURCE_USER":
            return Source.SOURCE_USER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Source.UNRECOGNIZED;
    }
}
export function sourceToJSON(object) {
    switch (object) {
        case Source.SOURCE_UNSPECIFIED:
            return "SOURCE_UNSPECIFIED";
        case Source.SOURCE_SYSTEM:
            return "SOURCE_SYSTEM";
        case Source.SOURCE_INSTANCE:
            return "SOURCE_INSTANCE";
        case Source.SOURCE_ORGANIZATION:
            return "SOURCE_ORGANIZATION";
        case Source.SOURCE_PROJECT:
            return "SOURCE_PROJECT";
        case Source.SOURCE_APP:
            return "SOURCE_APP";
        case Source.SOURCE_USER:
            return "SOURCE_USER";
        case Source.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
export var ImprovedPerformance;
(function (ImprovedPerformance) {
    ImprovedPerformance[ImprovedPerformance["IMPROVED_PERFORMANCE_UNSPECIFIED"] = 0] = "IMPROVED_PERFORMANCE_UNSPECIFIED";
    /**
     * IMPROVED_PERFORMANCE_ORG_BY_ID - Uses the eventstore to query the org by id
     * instead of the sql table.
     */
    ImprovedPerformance[ImprovedPerformance["IMPROVED_PERFORMANCE_ORG_BY_ID"] = 1] = "IMPROVED_PERFORMANCE_ORG_BY_ID";
    /**
     * IMPROVED_PERFORMANCE_PROJECT_GRANT - Improves performance on write side by using
     * optimized processes to query data to determine
     * correctnes of data.
     */
    ImprovedPerformance[ImprovedPerformance["IMPROVED_PERFORMANCE_PROJECT_GRANT"] = 2] = "IMPROVED_PERFORMANCE_PROJECT_GRANT";
    ImprovedPerformance[ImprovedPerformance["IMPROVED_PERFORMANCE_PROJECT"] = 3] = "IMPROVED_PERFORMANCE_PROJECT";
    ImprovedPerformance[ImprovedPerformance["IMPROVED_PERFORMANCE_USER_GRANT"] = 4] = "IMPROVED_PERFORMANCE_USER_GRANT";
    /**
     * IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED - Improve performance on write side when
     * users are checked against verified domains
     * from other organizations.
     */
    ImprovedPerformance[ImprovedPerformance["IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED"] = 5] = "IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED";
    ImprovedPerformance[ImprovedPerformance["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ImprovedPerformance || (ImprovedPerformance = {}));
export function improvedPerformanceFromJSON(object) {
    switch (object) {
        case 0:
        case "IMPROVED_PERFORMANCE_UNSPECIFIED":
            return ImprovedPerformance.IMPROVED_PERFORMANCE_UNSPECIFIED;
        case 1:
        case "IMPROVED_PERFORMANCE_ORG_BY_ID":
            return ImprovedPerformance.IMPROVED_PERFORMANCE_ORG_BY_ID;
        case 2:
        case "IMPROVED_PERFORMANCE_PROJECT_GRANT":
            return ImprovedPerformance.IMPROVED_PERFORMANCE_PROJECT_GRANT;
        case 3:
        case "IMPROVED_PERFORMANCE_PROJECT":
            return ImprovedPerformance.IMPROVED_PERFORMANCE_PROJECT;
        case 4:
        case "IMPROVED_PERFORMANCE_USER_GRANT":
            return ImprovedPerformance.IMPROVED_PERFORMANCE_USER_GRANT;
        case 5:
        case "IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED":
            return ImprovedPerformance.IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ImprovedPerformance.UNRECOGNIZED;
    }
}
export function improvedPerformanceToJSON(object) {
    switch (object) {
        case ImprovedPerformance.IMPROVED_PERFORMANCE_UNSPECIFIED:
            return "IMPROVED_PERFORMANCE_UNSPECIFIED";
        case ImprovedPerformance.IMPROVED_PERFORMANCE_ORG_BY_ID:
            return "IMPROVED_PERFORMANCE_ORG_BY_ID";
        case ImprovedPerformance.IMPROVED_PERFORMANCE_PROJECT_GRANT:
            return "IMPROVED_PERFORMANCE_PROJECT_GRANT";
        case ImprovedPerformance.IMPROVED_PERFORMANCE_PROJECT:
            return "IMPROVED_PERFORMANCE_PROJECT";
        case ImprovedPerformance.IMPROVED_PERFORMANCE_USER_GRANT:
            return "IMPROVED_PERFORMANCE_USER_GRANT";
        case ImprovedPerformance.IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED:
            return "IMPROVED_PERFORMANCE_ORG_DOMAIN_VERIFIED";
        case ImprovedPerformance.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseFeatureFlag() {
    return { enabled: false, source: 0 };
}
export const FeatureFlag = {
    encode(message, writer = new BinaryWriter()) {
        if (message.enabled !== false) {
            writer.uint32(8).bool(message.enabled);
        }
        if (message.source !== 0) {
            writer.uint32(16).int32(message.source);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeatureFlag();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.enabled = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.source = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
            source: isSet(object.source) ? sourceFromJSON(object.source) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.enabled !== false) {
            obj.enabled = message.enabled;
        }
        if (message.source !== 0) {
            obj.source = sourceToJSON(message.source);
        }
        return obj;
    },
    create(base) {
        return FeatureFlag.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFeatureFlag();
        message.enabled = object.enabled ?? false;
        message.source = object.source ?? 0;
        return message;
    },
};
function createBaseImprovedPerformanceFeatureFlag() {
    return { executionPaths: [], source: 0 };
}
export const ImprovedPerformanceFeatureFlag = {
    encode(message, writer = new BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.executionPaths) {
            writer.int32(v);
        }
        writer.join();
        if (message.source !== 0) {
            writer.uint32(16).int32(message.source);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImprovedPerformanceFeatureFlag();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.executionPaths.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.executionPaths.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.source = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            executionPaths: globalThis.Array.isArray(object?.executionPaths)
                ? object.executionPaths.map((e) => improvedPerformanceFromJSON(e))
                : [],
            source: isSet(object.source) ? sourceFromJSON(object.source) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.executionPaths?.length) {
            obj.executionPaths = message.executionPaths.map((e) => improvedPerformanceToJSON(e));
        }
        if (message.source !== 0) {
            obj.source = sourceToJSON(message.source);
        }
        return obj;
    },
    create(base) {
        return ImprovedPerformanceFeatureFlag.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseImprovedPerformanceFeatureFlag();
        message.executionPaths = object.executionPaths?.map((e) => e) || [];
        message.source = object.source ?? 0;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
