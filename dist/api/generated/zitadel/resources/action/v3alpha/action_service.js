// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: zitadel/resources/action/v3alpha/action_service.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Instance } from "../../../object/v3alpha/object.js";
import { Details, ListDetails, SearchQuery } from "../../object/v3alpha/object.js";
import { Condition, Execution, GetExecution } from "./execution.js";
import { executionFieldNameFromJSON, executionFieldNameToJSON, ExecutionSearchFilter, targetFieldNameFromJSON, targetFieldNameToJSON, TargetSearchFilter, } from "./query.js";
import { GetTarget, PatchTarget, Target } from "./target.js";
export const protobufPackage = "zitadel.resources.action.v3alpha";
function createBaseCreateTargetRequest() {
    return { instance: undefined, target: undefined };
}
export const CreateTargetRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.instance !== undefined) {
            Instance.encode(message.instance, writer.uint32(10).fork()).join();
        }
        if (message.target !== undefined) {
            Target.encode(message.target, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateTargetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = Instance.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.target = Target.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
            target: isSet(object.target) ? Target.fromJSON(object.target) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = Instance.toJSON(message.instance);
        }
        if (message.target !== undefined) {
            obj.target = Target.toJSON(message.target);
        }
        return obj;
    },
    create(base) {
        return CreateTargetRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateTargetRequest();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? Instance.fromPartial(object.instance)
            : undefined;
        message.target = (object.target !== undefined && object.target !== null)
            ? Target.fromPartial(object.target)
            : undefined;
        return message;
    },
};
function createBaseCreateTargetResponse() {
    return { details: undefined, signingKey: "" };
}
export const CreateTargetResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            Details.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.signingKey !== "") {
            writer.uint32(18).string(message.signingKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateTargetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = Details.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.signingKey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? Details.fromJSON(object.details) : undefined,
            signingKey: isSet(object.signingKey) ? globalThis.String(object.signingKey) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = Details.toJSON(message.details);
        }
        if (message.signingKey !== "") {
            obj.signingKey = message.signingKey;
        }
        return obj;
    },
    create(base) {
        return CreateTargetResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateTargetResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? Details.fromPartial(object.details)
            : undefined;
        message.signingKey = object.signingKey ?? "";
        return message;
    },
};
function createBasePatchTargetRequest() {
    return { instance: undefined, id: "", target: undefined };
}
export const PatchTargetRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.instance !== undefined) {
            Instance.encode(message.instance, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.target !== undefined) {
            PatchTarget.encode(message.target, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePatchTargetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = Instance.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.target = PatchTarget.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            target: isSet(object.target) ? PatchTarget.fromJSON(object.target) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = Instance.toJSON(message.instance);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.target !== undefined) {
            obj.target = PatchTarget.toJSON(message.target);
        }
        return obj;
    },
    create(base) {
        return PatchTargetRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePatchTargetRequest();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? Instance.fromPartial(object.instance)
            : undefined;
        message.id = object.id ?? "";
        message.target = (object.target !== undefined && object.target !== null)
            ? PatchTarget.fromPartial(object.target)
            : undefined;
        return message;
    },
};
function createBasePatchTargetResponse() {
    return { details: undefined, signingKey: undefined };
}
export const PatchTargetResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            Details.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.signingKey !== undefined) {
            writer.uint32(18).string(message.signingKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePatchTargetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = Details.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.signingKey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? Details.fromJSON(object.details) : undefined,
            signingKey: isSet(object.signingKey) ? globalThis.String(object.signingKey) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = Details.toJSON(message.details);
        }
        if (message.signingKey !== undefined) {
            obj.signingKey = message.signingKey;
        }
        return obj;
    },
    create(base) {
        return PatchTargetResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePatchTargetResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? Details.fromPartial(object.details)
            : undefined;
        message.signingKey = object.signingKey ?? undefined;
        return message;
    },
};
function createBaseDeleteTargetRequest() {
    return { instance: undefined, id: "" };
}
export const DeleteTargetRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.instance !== undefined) {
            Instance.encode(message.instance, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteTargetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = Instance.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = Instance.toJSON(message.instance);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return DeleteTargetRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteTargetRequest();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? Instance.fromPartial(object.instance)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseDeleteTargetResponse() {
    return { details: undefined };
}
export const DeleteTargetResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            Details.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteTargetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = Details.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? Details.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = Details.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return DeleteTargetResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteTargetResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? Details.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetTargetRequest() {
    return { instance: undefined, id: "" };
}
export const GetTargetRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.instance !== undefined) {
            Instance.encode(message.instance, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTargetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = Instance.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = Instance.toJSON(message.instance);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return GetTargetRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTargetRequest();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? Instance.fromPartial(object.instance)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseGetTargetResponse() {
    return { target: undefined };
}
export const GetTargetResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.target !== undefined) {
            GetTarget.encode(message.target, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTargetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.target = GetTarget.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { target: isSet(object.target) ? GetTarget.fromJSON(object.target) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.target !== undefined) {
            obj.target = GetTarget.toJSON(message.target);
        }
        return obj;
    },
    create(base) {
        return GetTargetResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTargetResponse();
        message.target = (object.target !== undefined && object.target !== null)
            ? GetTarget.fromPartial(object.target)
            : undefined;
        return message;
    },
};
function createBaseSearchTargetsRequest() {
    return { instance: undefined, query: undefined, sortingColumn: undefined, filters: [] };
}
export const SearchTargetsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.instance !== undefined) {
            Instance.encode(message.instance, writer.uint32(10).fork()).join();
        }
        if (message.query !== undefined) {
            SearchQuery.encode(message.query, writer.uint32(18).fork()).join();
        }
        if (message.sortingColumn !== undefined) {
            writer.uint32(24).int32(message.sortingColumn);
        }
        for (const v of message.filters) {
            TargetSearchFilter.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchTargetsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = Instance.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.query = SearchQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.filters.push(TargetSearchFilter.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
            query: isSet(object.query) ? SearchQuery.fromJSON(object.query) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? targetFieldNameFromJSON(object.sortingColumn) : undefined,
            filters: globalThis.Array.isArray(object?.filters)
                ? object.filters.map((e) => TargetSearchFilter.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = Instance.toJSON(message.instance);
        }
        if (message.query !== undefined) {
            obj.query = SearchQuery.toJSON(message.query);
        }
        if (message.sortingColumn !== undefined) {
            obj.sortingColumn = targetFieldNameToJSON(message.sortingColumn);
        }
        if (message.filters?.length) {
            obj.filters = message.filters.map((e) => TargetSearchFilter.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return SearchTargetsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSearchTargetsRequest();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? Instance.fromPartial(object.instance)
            : undefined;
        message.query = (object.query !== undefined && object.query !== null)
            ? SearchQuery.fromPartial(object.query)
            : undefined;
        message.sortingColumn = object.sortingColumn ?? undefined;
        message.filters = object.filters?.map((e) => TargetSearchFilter.fromPartial(e)) || [];
        return message;
    },
};
function createBaseSearchTargetsResponse() {
    return { details: undefined, result: [] };
}
export const SearchTargetsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            GetTarget.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchTargetsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(GetTarget.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => GetTarget.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => GetTarget.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return SearchTargetsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSearchTargetsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => GetTarget.fromPartial(e)) || [];
        return message;
    },
};
function createBaseSetExecutionRequest() {
    return { instance: undefined, condition: undefined, execution: undefined };
}
export const SetExecutionRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.instance !== undefined) {
            Instance.encode(message.instance, writer.uint32(10).fork()).join();
        }
        if (message.condition !== undefined) {
            Condition.encode(message.condition, writer.uint32(18).fork()).join();
        }
        if (message.execution !== undefined) {
            Execution.encode(message.execution, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetExecutionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = Instance.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.condition = Condition.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.execution = Execution.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
            condition: isSet(object.condition) ? Condition.fromJSON(object.condition) : undefined,
            execution: isSet(object.execution) ? Execution.fromJSON(object.execution) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = Instance.toJSON(message.instance);
        }
        if (message.condition !== undefined) {
            obj.condition = Condition.toJSON(message.condition);
        }
        if (message.execution !== undefined) {
            obj.execution = Execution.toJSON(message.execution);
        }
        return obj;
    },
    create(base) {
        return SetExecutionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetExecutionRequest();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? Instance.fromPartial(object.instance)
            : undefined;
        message.condition = (object.condition !== undefined && object.condition !== null)
            ? Condition.fromPartial(object.condition)
            : undefined;
        message.execution = (object.execution !== undefined && object.execution !== null)
            ? Execution.fromPartial(object.execution)
            : undefined;
        return message;
    },
};
function createBaseSetExecutionResponse() {
    return { details: undefined };
}
export const SetExecutionResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            Details.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetExecutionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = Details.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? Details.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = Details.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return SetExecutionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetExecutionResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? Details.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseSearchExecutionsRequest() {
    return { instance: undefined, query: undefined, sortingColumn: undefined, filters: [] };
}
export const SearchExecutionsRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.instance !== undefined) {
            Instance.encode(message.instance, writer.uint32(10).fork()).join();
        }
        if (message.query !== undefined) {
            SearchQuery.encode(message.query, writer.uint32(18).fork()).join();
        }
        if (message.sortingColumn !== undefined) {
            writer.uint32(24).int32(message.sortingColumn);
        }
        for (const v of message.filters) {
            ExecutionSearchFilter.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchExecutionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = Instance.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.query = SearchQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.filters.push(ExecutionSearchFilter.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance) ? Instance.fromJSON(object.instance) : undefined,
            query: isSet(object.query) ? SearchQuery.fromJSON(object.query) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? executionFieldNameFromJSON(object.sortingColumn) : undefined,
            filters: globalThis.Array.isArray(object?.filters)
                ? object.filters.map((e) => ExecutionSearchFilter.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = Instance.toJSON(message.instance);
        }
        if (message.query !== undefined) {
            obj.query = SearchQuery.toJSON(message.query);
        }
        if (message.sortingColumn !== undefined) {
            obj.sortingColumn = executionFieldNameToJSON(message.sortingColumn);
        }
        if (message.filters?.length) {
            obj.filters = message.filters.map((e) => ExecutionSearchFilter.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return SearchExecutionsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSearchExecutionsRequest();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? Instance.fromPartial(object.instance)
            : undefined;
        message.query = (object.query !== undefined && object.query !== null)
            ? SearchQuery.fromPartial(object.query)
            : undefined;
        message.sortingColumn = object.sortingColumn ?? undefined;
        message.filters = object.filters?.map((e) => ExecutionSearchFilter.fromPartial(e)) || [];
        return message;
    },
};
function createBaseSearchExecutionsResponse() {
    return { details: undefined, result: [] };
}
export const SearchExecutionsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            GetExecution.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchExecutionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = ListDetails.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(GetExecution.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object?.result) ? object.result.map((e) => GetExecution.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = ListDetails.toJSON(message.details);
        }
        if (message.result?.length) {
            obj.result = message.result.map((e) => GetExecution.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return SearchExecutionsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSearchExecutionsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? ListDetails.fromPartial(object.details)
            : undefined;
        message.result = object.result?.map((e) => GetExecution.fromPartial(e)) || [];
        return message;
    },
};
function createBaseListExecutionFunctionsRequest() {
    return {};
}
export const ListExecutionFunctionsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListExecutionFunctionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListExecutionFunctionsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListExecutionFunctionsRequest();
        return message;
    },
};
function createBaseListExecutionFunctionsResponse() {
    return { functions: [] };
}
export const ListExecutionFunctionsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.functions) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListExecutionFunctionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.functions.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            functions: globalThis.Array.isArray(object?.functions)
                ? object.functions.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.functions?.length) {
            obj.functions = message.functions;
        }
        return obj;
    },
    create(base) {
        return ListExecutionFunctionsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListExecutionFunctionsResponse();
        message.functions = object.functions?.map((e) => e) || [];
        return message;
    },
};
function createBaseListExecutionMethodsRequest() {
    return {};
}
export const ListExecutionMethodsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListExecutionMethodsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListExecutionMethodsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListExecutionMethodsRequest();
        return message;
    },
};
function createBaseListExecutionMethodsResponse() {
    return { methods: [] };
}
export const ListExecutionMethodsResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.methods) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListExecutionMethodsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.methods.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            methods: globalThis.Array.isArray(object?.methods) ? object.methods.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.methods?.length) {
            obj.methods = message.methods;
        }
        return obj;
    },
    create(base) {
        return ListExecutionMethodsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListExecutionMethodsResponse();
        message.methods = object.methods?.map((e) => e) || [];
        return message;
    },
};
function createBaseListExecutionServicesRequest() {
    return {};
}
export const ListExecutionServicesRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListExecutionServicesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ListExecutionServicesRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseListExecutionServicesRequest();
        return message;
    },
};
function createBaseListExecutionServicesResponse() {
    return { services: [] };
}
export const ListExecutionServicesResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.services) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListExecutionServicesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.services.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            services: globalThis.Array.isArray(object?.services) ? object.services.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.services?.length) {
            obj.services = message.services;
        }
        return obj;
    },
    create(base) {
        return ListExecutionServicesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListExecutionServicesResponse();
        message.services = object.services?.map((e) => e) || [];
        return message;
    },
};
export const ZITADELActionsDefinition = {
    name: "ZITADELActions",
    fullName: "zitadel.resources.action.v3alpha.ZITADELActions",
    methods: {
        /**
         * Create a target
         *
         * Create a new target, which can be used in executions.
         */
        createTarget: {
            name: "CreateTarget",
            requestType: CreateTargetRequest,
            requestStream: false,
            responseType: CreateTargetResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            85,
                            74,
                            83,
                            10,
                            3,
                            50,
                            48,
                            49,
                            18,
                            76,
                            10,
                            27,
                            84,
                            97,
                            114,
                            103,
                            101,
                            116,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            18,
                            45,
                            10,
                            43,
                            26,
                            41,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            84,
                            97,
                            114,
                            103,
                            101,
                            116,
                            82,
                            101,
                            115,
                            112,
                            111,
                            110,
                            115,
                            101,
                        ]),
                    ],
                    400010: [
                        Buffer.from([
                            28,
                            10,
                            21,
                            10,
                            19,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            46,
                            116,
                            97,
                            114,
                            103,
                            101,
                            116,
                            46,
                            119,
                            114,
                            105,
                            116,
                            101,
                            18,
                            3,
                            8,
                            201,
                            1,
                        ]),
                    ],
                    578365826: [
                        Buffer.from([
                            44,
                            58,
                            6,
                            116,
                            97,
                            114,
                            103,
                            101,
                            116,
                            34,
                            34,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            116,
                            97,
                            114,
                            103,
                            101,
                            116,
                            115,
                        ]),
                    ],
                },
            },
        },
        /**
         * Patch a target
         *
         * Patch an existing target.
         */
        patchTarget: {
            name: "PatchTarget",
            requestType: PatchTargetRequest,
            requestStream: false,
            responseType: PatchTargetResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            56,
                            74,
                            54,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            47,
                            10,
                            45,
                            84,
                            97,
                            114,
                            103,
                            101,
                            116,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            32,
                            111,
                            114,
                            32,
                            108,
                            101,
                            102,
                            116,
                            32,
                            117,
                            110,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                        ]),
                    ],
                    400010: [
                        Buffer.from([
                            23,
                            10,
                            21,
                            10,
                            19,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            46,
                            116,
                            97,
                            114,
                            103,
                            101,
                            116,
                            46,
                            119,
                            114,
                            105,
                            116,
                            101,
                        ]),
                    ],
                    578365826: [
                        Buffer.from([
                            49,
                            58,
                            6,
                            116,
                            97,
                            114,
                            103,
                            101,
                            116,
                            50,
                            39,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            116,
                            97,
                            114,
                            103,
                            101,
                            116,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /**
         * Delete a target
         *
         * Delete an existing target. This will remove it from any configured execution as well.
         */
        deleteTarget: {
            name: "DeleteTarget",
            requestType: DeleteTargetRequest,
            requestStream: false,
            responseType: DeleteTargetResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            38,
                            74,
                            36,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            29,
                            10,
                            27,
                            84,
                            97,
                            114,
                            103,
                            101,
                            116,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                            32,
                            100,
                            101,
                            108,
                            101,
                            116,
                            101,
                            100,
                        ]),
                    ],
                    400010: [
                        Buffer.from([
                            24,
                            10,
                            22,
                            10,
                            20,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            46,
                            116,
                            97,
                            114,
                            103,
                            101,
                            116,
                            46,
                            100,
                            101,
                            108,
                            101,
                            116,
                            101,
                        ]),
                    ],
                    578365826: [
                        Buffer.from([
                            41,
                            42,
                            39,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            116,
                            97,
                            114,
                            103,
                            101,
                            116,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /**
         * Target by ID
         *
         * Returns the target identified by the requested ID.
         */
        getTarget: {
            name: "GetTarget",
            requestType: GetTargetRequest,
            requestStream: false,
            responseType: GetTargetResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            40,
                            74,
                            38,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            31,
                            10,
                            29,
                            84,
                            97,
                            114,
                            103,
                            101,
                            116,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                            32,
                            114,
                            101,
                            116,
                            114,
                            105,
                            101,
                            118,
                            101,
                            100,
                        ]),
                    ],
                    400010: [
                        Buffer.from([
                            22,
                            10,
                            20,
                            10,
                            18,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            46,
                            116,
                            97,
                            114,
                            103,
                            101,
                            116,
                            46,
                            114,
                            101,
                            97,
                            100,
                        ]),
                    ],
                    578365826: [
                        Buffer.from([
                            41,
                            18,
                            39,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            116,
                            97,
                            114,
                            103,
                            101,
                            116,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        /**
         * Search targets
         *
         * Search all matching targets. By default all targets of the instance are returned.
         * Make sure to include a limit and sorting for pagination.
         */
        searchTargets: {
            name: "SearchTargets",
            requestType: SearchTargetsRequest,
            requestStream: false,
            responseType: SearchTargetsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            109,
                            74,
                            49,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            42,
                            10,
                            40,
                            65,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            116,
                            97,
                            114,
                            103,
                            101,
                            116,
                            115,
                            32,
                            109,
                            97,
                            116,
                            99,
                            104,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            113,
                            117,
                            101,
                            114,
                            121,
                            74,
                            56,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            49,
                            10,
                            18,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            113,
                            117,
                            101,
                            114,
                            121,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400010: [
                        Buffer.from([
                            22,
                            10,
                            20,
                            10,
                            18,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            46,
                            116,
                            97,
                            114,
                            103,
                            101,
                            116,
                            46,
                            114,
                            101,
                            97,
                            100,
                        ]),
                    ],
                    578365826: [
                        Buffer.from([
                            53,
                            58,
                            7,
                            102,
                            105,
                            108,
                            116,
                            101,
                            114,
                            115,
                            34,
                            42,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            116,
                            97,
                            114,
                            103,
                            101,
                            116,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        /**
         * Sets an execution to call a target or include the targets of another execution.
         *
         * Setting an empty list of targets will remove all targets from the execution, making it a noop.
         */
        setExecution: {
            name: "SetExecution",
            requestType: SetExecutionRequest,
            requestStream: false,
            responseType: SetExecutionResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            106,
                            74,
                            104,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            97,
                            10,
                            48,
                            69,
                            120,
                            101,
                            99,
                            117,
                            116,
                            105,
                            111,
                            110,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            32,
                            111,
                            114,
                            32,
                            108,
                            101,
                            102,
                            116,
                            32,
                            117,
                            110,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            18,
                            45,
                            10,
                            43,
                            26,
                            41,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            83,
                            101,
                            116,
                            69,
                            120,
                            101,
                            99,
                            117,
                            116,
                            105,
                            111,
                            110,
                            82,
                            101,
                            115,
                            112,
                            111,
                            110,
                            115,
                            101,
                        ]),
                    ],
                    400010: [
                        Buffer.from([
                            31,
                            10,
                            24,
                            10,
                            22,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            46,
                            101,
                            120,
                            101,
                            99,
                            117,
                            116,
                            105,
                            111,
                            110,
                            46,
                            119,
                            114,
                            105,
                            116,
                            101,
                            18,
                            3,
                            8,
                            201,
                            1,
                        ]),
                    ],
                    578365826: [
                        Buffer.from([
                            42,
                            58,
                            1,
                            42,
                            26,
                            37,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            101,
                            120,
                            101,
                            99,
                            117,
                            116,
                            105,
                            111,
                            110,
                            115,
                        ]),
                    ],
                },
            },
        },
        /**
         * Search executions
         *
         * Search all matching executions. By default all executions of the instance are returned that have at least one execution target.
         * Make sure to include a limit and sorting for pagination.
         */
        searchExecutions: {
            name: "SearchExecutions",
            requestType: SearchExecutionsRequest,
            requestStream: false,
            responseType: SearchExecutionsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            121,
                            74,
                            61,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            54,
                            10,
                            52,
                            65,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            110,
                            111,
                            110,
                            32,
                            110,
                            111,
                            111,
                            112,
                            32,
                            101,
                            120,
                            101,
                            99,
                            117,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            109,
                            97,
                            116,
                            99,
                            104,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            113,
                            117,
                            101,
                            114,
                            121,
                            74,
                            56,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            49,
                            10,
                            18,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            113,
                            117,
                            101,
                            114,
                            121,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400010: [
                        Buffer.from([
                            25,
                            10,
                            23,
                            10,
                            21,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            46,
                            101,
                            120,
                            101,
                            99,
                            117,
                            116,
                            105,
                            111,
                            110,
                            46,
                            114,
                            101,
                            97,
                            100,
                        ]),
                    ],
                    578365826: [
                        Buffer.from([
                            56,
                            58,
                            7,
                            102,
                            105,
                            108,
                            116,
                            101,
                            114,
                            115,
                            34,
                            45,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            101,
                            120,
                            101,
                            99,
                            117,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        /**
         * List all available functions
         *
         * List all available functions which can be used as condition for executions.
         */
        listExecutionFunctions: {
            name: "ListExecutionFunctions",
            requestType: ListExecutionFunctionsRequest,
            requestStream: false,
            responseType: ListExecutionFunctionsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            42,
                            74,
                            40,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            33,
                            10,
                            31,
                            76,
                            105,
                            115,
                            116,
                            32,
                            97,
                            108,
                            108,
                            32,
                            102,
                            117,
                            110,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                        ]),
                    ],
                    400010: [Buffer.from([17, 10, 15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            49,
                            18,
                            47,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            101,
                            120,
                            101,
                            99,
                            117,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            102,
                            117,
                            110,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                        ]),
                    ],
                },
            },
        },
        /**
         * List all available methods
         *
         * List all available methods which can be used as condition for executions.
         */
        listExecutionMethods: {
            name: "ListExecutionMethods",
            requestType: ListExecutionMethodsRequest,
            requestStream: false,
            responseType: ListExecutionMethodsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            40,
                            74,
                            38,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            31,
                            10,
                            29,
                            76,
                            105,
                            115,
                            116,
                            32,
                            97,
                            108,
                            108,
                            32,
                            109,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                        ]),
                    ],
                    400010: [Buffer.from([17, 10, 15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            47,
                            18,
                            45,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            101,
                            120,
                            101,
                            99,
                            117,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            109,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                        ]),
                    ],
                },
            },
        },
        /**
         * List all available service
         *
         * List all available services which can be used as condition for executions.
         */
        listExecutionServices: {
            name: "ListExecutionServices",
            requestType: ListExecutionServicesRequest,
            requestStream: false,
            responseType: ListExecutionServicesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            41,
                            74,
                            39,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            32,
                            10,
                            30,
                            76,
                            105,
                            115,
                            116,
                            32,
                            97,
                            108,
                            108,
                            32,
                            115,
                            101,
                            114,
                            118,
                            105,
                            99,
                            101,
                            115,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                        ]),
                    ],
                    400010: [Buffer.from([17, 10, 15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            48,
                            18,
                            46,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            97,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            101,
                            120,
                            101,
                            99,
                            117,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            115,
                            101,
                            114,
                            118,
                            105,
                            99,
                            101,
                            115,
                        ]),
                    ],
                },
            },
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
