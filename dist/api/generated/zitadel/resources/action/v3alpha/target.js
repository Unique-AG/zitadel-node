// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: zitadel/resources/action/v3alpha/target.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../google/protobuf/duration.js";
import { Details } from "../../object/v3alpha/object.js";
export const protobufPackage = "zitadel.resources.action.v3alpha";
function createBaseTarget() {
    return {
        name: "",
        restWebhook: undefined,
        restCall: undefined,
        restAsync: undefined,
        timeout: undefined,
        endpoint: "",
    };
}
export const Target = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.restWebhook !== undefined) {
            SetRESTWebhook.encode(message.restWebhook, writer.uint32(18).fork()).join();
        }
        if (message.restCall !== undefined) {
            SetRESTCall.encode(message.restCall, writer.uint32(26).fork()).join();
        }
        if (message.restAsync !== undefined) {
            SetRESTAsync.encode(message.restAsync, writer.uint32(34).fork()).join();
        }
        if (message.timeout !== undefined) {
            Duration.encode(message.timeout, writer.uint32(42).fork()).join();
        }
        if (message.endpoint !== "") {
            writer.uint32(50).string(message.endpoint);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTarget();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.restWebhook = SetRESTWebhook.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.restCall = SetRESTCall.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.restAsync = SetRESTAsync.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.timeout = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            restWebhook: isSet(object.restWebhook) ? SetRESTWebhook.fromJSON(object.restWebhook) : undefined,
            restCall: isSet(object.restCall) ? SetRESTCall.fromJSON(object.restCall) : undefined,
            restAsync: isSet(object.restAsync) ? SetRESTAsync.fromJSON(object.restAsync) : undefined,
            timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.restWebhook !== undefined) {
            obj.restWebhook = SetRESTWebhook.toJSON(message.restWebhook);
        }
        if (message.restCall !== undefined) {
            obj.restCall = SetRESTCall.toJSON(message.restCall);
        }
        if (message.restAsync !== undefined) {
            obj.restAsync = SetRESTAsync.toJSON(message.restAsync);
        }
        if (message.timeout !== undefined) {
            obj.timeout = Duration.toJSON(message.timeout);
        }
        if (message.endpoint !== "") {
            obj.endpoint = message.endpoint;
        }
        return obj;
    },
    create(base) {
        return Target.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTarget();
        message.name = object.name ?? "";
        message.restWebhook = (object.restWebhook !== undefined && object.restWebhook !== null)
            ? SetRESTWebhook.fromPartial(object.restWebhook)
            : undefined;
        message.restCall = (object.restCall !== undefined && object.restCall !== null)
            ? SetRESTCall.fromPartial(object.restCall)
            : undefined;
        message.restAsync = (object.restAsync !== undefined && object.restAsync !== null)
            ? SetRESTAsync.fromPartial(object.restAsync)
            : undefined;
        message.timeout = (object.timeout !== undefined && object.timeout !== null)
            ? Duration.fromPartial(object.timeout)
            : undefined;
        message.endpoint = object.endpoint ?? "";
        return message;
    },
};
function createBaseGetTarget() {
    return { details: undefined, config: undefined, signingKey: "" };
}
export const GetTarget = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            Details.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.config !== undefined) {
            Target.encode(message.config, writer.uint32(18).fork()).join();
        }
        if (message.signingKey !== "") {
            writer.uint32(26).string(message.signingKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetTarget();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = Details.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.config = Target.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.signingKey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? Details.fromJSON(object.details) : undefined,
            config: isSet(object.config) ? Target.fromJSON(object.config) : undefined,
            signingKey: isSet(object.signingKey) ? globalThis.String(object.signingKey) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = Details.toJSON(message.details);
        }
        if (message.config !== undefined) {
            obj.config = Target.toJSON(message.config);
        }
        if (message.signingKey !== "") {
            obj.signingKey = message.signingKey;
        }
        return obj;
    },
    create(base) {
        return GetTarget.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetTarget();
        message.details = (object.details !== undefined && object.details !== null)
            ? Details.fromPartial(object.details)
            : undefined;
        message.config = (object.config !== undefined && object.config !== null)
            ? Target.fromPartial(object.config)
            : undefined;
        message.signingKey = object.signingKey ?? "";
        return message;
    },
};
function createBasePatchTarget() {
    return {
        name: undefined,
        restWebhook: undefined,
        restCall: undefined,
        restAsync: undefined,
        timeout: undefined,
        endpoint: undefined,
        expirationSigningKey: undefined,
    };
}
export const PatchTarget = {
    encode(message, writer = new BinaryWriter()) {
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.restWebhook !== undefined) {
            SetRESTWebhook.encode(message.restWebhook, writer.uint32(18).fork()).join();
        }
        if (message.restCall !== undefined) {
            SetRESTCall.encode(message.restCall, writer.uint32(26).fork()).join();
        }
        if (message.restAsync !== undefined) {
            SetRESTAsync.encode(message.restAsync, writer.uint32(34).fork()).join();
        }
        if (message.timeout !== undefined) {
            Duration.encode(message.timeout, writer.uint32(42).fork()).join();
        }
        if (message.endpoint !== undefined) {
            writer.uint32(50).string(message.endpoint);
        }
        if (message.expirationSigningKey !== undefined) {
            Duration.encode(message.expirationSigningKey, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePatchTarget();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.restWebhook = SetRESTWebhook.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.restCall = SetRESTCall.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.restAsync = SetRESTAsync.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.timeout = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.expirationSigningKey = Duration.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            restWebhook: isSet(object.restWebhook) ? SetRESTWebhook.fromJSON(object.restWebhook) : undefined,
            restCall: isSet(object.restCall) ? SetRESTCall.fromJSON(object.restCall) : undefined,
            restAsync: isSet(object.restAsync) ? SetRESTAsync.fromJSON(object.restAsync) : undefined,
            timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : undefined,
            expirationSigningKey: isSet(object.expirationSigningKey)
                ? Duration.fromJSON(object.expirationSigningKey)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.restWebhook !== undefined) {
            obj.restWebhook = SetRESTWebhook.toJSON(message.restWebhook);
        }
        if (message.restCall !== undefined) {
            obj.restCall = SetRESTCall.toJSON(message.restCall);
        }
        if (message.restAsync !== undefined) {
            obj.restAsync = SetRESTAsync.toJSON(message.restAsync);
        }
        if (message.timeout !== undefined) {
            obj.timeout = Duration.toJSON(message.timeout);
        }
        if (message.endpoint !== undefined) {
            obj.endpoint = message.endpoint;
        }
        if (message.expirationSigningKey !== undefined) {
            obj.expirationSigningKey = Duration.toJSON(message.expirationSigningKey);
        }
        return obj;
    },
    create(base) {
        return PatchTarget.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePatchTarget();
        message.name = object.name ?? undefined;
        message.restWebhook = (object.restWebhook !== undefined && object.restWebhook !== null)
            ? SetRESTWebhook.fromPartial(object.restWebhook)
            : undefined;
        message.restCall = (object.restCall !== undefined && object.restCall !== null)
            ? SetRESTCall.fromPartial(object.restCall)
            : undefined;
        message.restAsync = (object.restAsync !== undefined && object.restAsync !== null)
            ? SetRESTAsync.fromPartial(object.restAsync)
            : undefined;
        message.timeout = (object.timeout !== undefined && object.timeout !== null)
            ? Duration.fromPartial(object.timeout)
            : undefined;
        message.endpoint = object.endpoint ?? undefined;
        message.expirationSigningKey = (object.expirationSigningKey !== undefined && object.expirationSigningKey !== null)
            ? Duration.fromPartial(object.expirationSigningKey)
            : undefined;
        return message;
    },
};
function createBaseSetRESTWebhook() {
    return { interruptOnError: false };
}
export const SetRESTWebhook = {
    encode(message, writer = new BinaryWriter()) {
        if (message.interruptOnError !== false) {
            writer.uint32(8).bool(message.interruptOnError);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetRESTWebhook();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.interruptOnError = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { interruptOnError: isSet(object.interruptOnError) ? globalThis.Boolean(object.interruptOnError) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.interruptOnError !== false) {
            obj.interruptOnError = message.interruptOnError;
        }
        return obj;
    },
    create(base) {
        return SetRESTWebhook.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetRESTWebhook();
        message.interruptOnError = object.interruptOnError ?? false;
        return message;
    },
};
function createBaseSetRESTCall() {
    return { interruptOnError: false };
}
export const SetRESTCall = {
    encode(message, writer = new BinaryWriter()) {
        if (message.interruptOnError !== false) {
            writer.uint32(8).bool(message.interruptOnError);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetRESTCall();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.interruptOnError = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { interruptOnError: isSet(object.interruptOnError) ? globalThis.Boolean(object.interruptOnError) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.interruptOnError !== false) {
            obj.interruptOnError = message.interruptOnError;
        }
        return obj;
    },
    create(base) {
        return SetRESTCall.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetRESTCall();
        message.interruptOnError = object.interruptOnError ?? false;
        return message;
    },
};
function createBaseSetRESTAsync() {
    return {};
}
export const SetRESTAsync = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetRESTAsync();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return SetRESTAsync.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseSetRESTAsync();
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
