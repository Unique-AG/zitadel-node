"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: zitadel/resources/debug_events/v3alpha/debug_events_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZITADELDebugEventsDefinition = exports.ListDebugEventsStatesResponse = exports.ListDebugEventsStatesRequest = exports.GetDebugEventsStateByIdResponse = exports.GetDebugEventsStateByIdRequest = exports.CreateDebugEventsResponse = exports.CreateDebugEventsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_js_1 = require("../../../object/v3alpha/object.js");
const object_js_2 = require("../../object/v3alpha/object.js");
const event_js_1 = require("./event.js");
const state_js_1 = require("./state.js");
exports.protobufPackage = "zitadel.resources.debug_events.v3alpha";
function createBaseCreateDebugEventsRequest() {
    return { instance: undefined, aggregateId: "", events: [] };
}
exports.CreateDebugEventsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.instance !== undefined) {
            object_js_1.Instance.encode(message.instance, writer.uint32(10).fork()).join();
        }
        if (message.aggregateId !== "") {
            writer.uint32(18).string(message.aggregateId);
        }
        for (const v of message.events) {
            event_js_1.Event.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateDebugEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = object_js_1.Instance.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.aggregateId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.events.push(event_js_1.Event.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance) ? object_js_1.Instance.fromJSON(object.instance) : undefined,
            aggregateId: isSet(object.aggregateId) ? globalThis.String(object.aggregateId) : "",
            events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => event_js_1.Event.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = object_js_1.Instance.toJSON(message.instance);
        }
        if (message.aggregateId !== "") {
            obj.aggregateId = message.aggregateId;
        }
        if (message.events?.length) {
            obj.events = message.events.map((e) => event_js_1.Event.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CreateDebugEventsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateDebugEventsRequest();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? object_js_1.Instance.fromPartial(object.instance)
            : undefined;
        message.aggregateId = object.aggregateId ?? "";
        message.events = object.events?.map((e) => event_js_1.Event.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCreateDebugEventsResponse() {
    return { details: undefined };
}
exports.CreateDebugEventsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_2.Details.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateDebugEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_2.Details.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_2.Details.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_2.Details.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.CreateDebugEventsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateDebugEventsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_2.Details.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDebugEventsStateByIdRequest() {
    return { id: "", triggerBulk: false };
}
exports.GetDebugEventsStateByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.triggerBulk !== false) {
            writer.uint32(16).bool(message.triggerBulk);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDebugEventsStateByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.triggerBulk = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            triggerBulk: isSet(object.triggerBulk) ? globalThis.Boolean(object.triggerBulk) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.triggerBulk !== false) {
            obj.triggerBulk = message.triggerBulk;
        }
        return obj;
    },
    create(base) {
        return exports.GetDebugEventsStateByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDebugEventsStateByIdRequest();
        message.id = object.id ?? "";
        message.triggerBulk = object.triggerBulk ?? false;
        return message;
    },
};
function createBaseGetDebugEventsStateByIdResponse() {
    return { state: undefined };
}
exports.GetDebugEventsStateByIdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.state !== undefined) {
            state_js_1.State.encode(message.state, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDebugEventsStateByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.state = state_js_1.State.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { state: isSet(object.state) ? state_js_1.State.fromJSON(object.state) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== undefined) {
            obj.state = state_js_1.State.toJSON(message.state);
        }
        return obj;
    },
    create(base) {
        return exports.GetDebugEventsStateByIdResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDebugEventsStateByIdResponse();
        message.state = (object.state !== undefined && object.state !== null) ? state_js_1.State.fromPartial(object.state) : undefined;
        return message;
    },
};
function createBaseListDebugEventsStatesRequest() {
    return { triggerBulk: false };
}
exports.ListDebugEventsStatesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.triggerBulk !== false) {
            writer.uint32(8).bool(message.triggerBulk);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListDebugEventsStatesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.triggerBulk = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { triggerBulk: isSet(object.triggerBulk) ? globalThis.Boolean(object.triggerBulk) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.triggerBulk !== false) {
            obj.triggerBulk = message.triggerBulk;
        }
        return obj;
    },
    create(base) {
        return exports.ListDebugEventsStatesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListDebugEventsStatesRequest();
        message.triggerBulk = object.triggerBulk ?? false;
        return message;
    },
};
function createBaseListDebugEventsStatesResponse() {
    return { states: [] };
}
exports.ListDebugEventsStatesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.states) {
            state_js_1.State.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListDebugEventsStatesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.states.push(state_js_1.State.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { states: globalThis.Array.isArray(object?.states) ? object.states.map((e) => state_js_1.State.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.states?.length) {
            obj.states = message.states.map((e) => state_js_1.State.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListDebugEventsStatesResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListDebugEventsStatesResponse();
        message.states = object.states?.map((e) => state_js_1.State.fromPartial(e)) || [];
        return message;
    },
};
exports.ZITADELDebugEventsDefinition = {
    name: "ZITADELDebugEvents",
    fullName: "zitadel.resources.debug_events.v3alpha.ZITADELDebugEvents",
    methods: {
        createDebugEvents: {
            name: "CreateDebugEvents",
            requestType: exports.CreateDebugEventsRequest,
            requestStream: false,
            responseType: exports.CreateDebugEventsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            144,
                            1,
                            18,
                            29,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            32,
                            97,
                            32,
                            115,
                            101,
                            116,
                            32,
                            111,
                            102,
                            32,
                            100,
                            101,
                            98,
                            117,
                            103,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            46,
                            26,
                            98,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            32,
                            97,
                            32,
                            115,
                            101,
                            116,
                            32,
                            111,
                            102,
                            32,
                            100,
                            101,
                            98,
                            117,
                            103,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            112,
                            117,
                            115,
                            104,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            116,
                            111,
                            114,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            100,
                            117,
                            99,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            11,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            4,
                            10,
                            2,
                            79,
                            75,
                        ]),
                    ],
                    400010: [
                        Buffer.from([
                            24,
                            10,
                            17,
                            10,
                            15,
                            105,
                            97,
                            109,
                            46,
                            100,
                            101,
                            98,
                            117,
                            103,
                            46,
                            119,
                            114,
                            105,
                            116,
                            101,
                            18,
                            3,
                            8,
                            201,
                            1,
                        ]),
                    ],
                    578365826: [Buffer.from([11, 58, 6, 101, 118, 101, 110, 116, 115, 34, 1, 47])],
                },
            },
        },
        getDebugEventsStateById: {
            name: "GetDebugEventsStateById",
            requestType: exports.GetDebugEventsStateByIdRequest,
            requestStream: false,
            responseType: exports.GetDebugEventsStateByIdResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            52,
                            74,
                            50,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            43,
                            10,
                            41,
                            68,
                            101,
                            98,
                            117,
                            103,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            115,
                            116,
                            97,
                            116,
                            101,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                            32,
                            114,
                            101,
                            116,
                            114,
                            105,
                            101,
                            118,
                            101,
                            100,
                        ]),
                    ],
                    400010: [Buffer.from([18, 10, 16, 10, 14, 105, 97, 109, 46, 100, 101, 98, 117, 103, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            28,
                            18,
                            26,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            100,
                            101,
                            98,
                            117,
                            103,
                            95,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        listDebugEventsStates: {
            name: "ListDebugEventsStates",
            requestType: exports.ListDebugEventsStatesRequest,
            requestStream: false,
            responseType: exports.ListDebugEventsStatesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            53,
                            74,
                            51,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            44,
                            10,
                            42,
                            68,
                            101,
                            98,
                            117,
                            103,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            115,
                            116,
                            97,
                            116,
                            101,
                            115,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                            32,
                            114,
                            101,
                            116,
                            114,
                            105,
                            101,
                            118,
                            101,
                            100,
                        ]),
                    ],
                    400010: [Buffer.from([18, 10, 16, 10, 14, 105, 97, 109, 46, 100, 101, 98, 117, 103, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            23,
                            18,
                            21,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            100,
                            101,
                            98,
                            117,
                            103,
                            95,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                        ]),
                    ],
                },
            },
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
