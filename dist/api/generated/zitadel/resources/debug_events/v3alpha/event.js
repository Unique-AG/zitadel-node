// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: zitadel/resources/debug_events/v3alpha/event.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../google/protobuf/duration.js";
export const protobufPackage = "zitadel.resources.debug_events.v3alpha";
function createBaseEvent() {
    return { add: undefined, change: undefined, remove: undefined };
}
export const Event = {
    encode(message, writer = new BinaryWriter()) {
        if (message.add !== undefined) {
            AddedEvent.encode(message.add, writer.uint32(10).fork()).join();
        }
        if (message.change !== undefined) {
            ChangedEvent.encode(message.change, writer.uint32(18).fork()).join();
        }
        if (message.remove !== undefined) {
            RemovedEvent.encode(message.remove, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.add = AddedEvent.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.change = ChangedEvent.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.remove = RemovedEvent.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            add: isSet(object.add) ? AddedEvent.fromJSON(object.add) : undefined,
            change: isSet(object.change) ? ChangedEvent.fromJSON(object.change) : undefined,
            remove: isSet(object.remove) ? RemovedEvent.fromJSON(object.remove) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.add !== undefined) {
            obj.add = AddedEvent.toJSON(message.add);
        }
        if (message.change !== undefined) {
            obj.change = ChangedEvent.toJSON(message.change);
        }
        if (message.remove !== undefined) {
            obj.remove = RemovedEvent.toJSON(message.remove);
        }
        return obj;
    },
    create(base) {
        return Event.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEvent();
        message.add = (object.add !== undefined && object.add !== null) ? AddedEvent.fromPartial(object.add) : undefined;
        message.change = (object.change !== undefined && object.change !== null)
            ? ChangedEvent.fromPartial(object.change)
            : undefined;
        message.remove = (object.remove !== undefined && object.remove !== null)
            ? RemovedEvent.fromPartial(object.remove)
            : undefined;
        return message;
    },
};
function createBaseAddedEvent() {
    return { projectionSleep: undefined, blob: undefined };
}
export const AddedEvent = {
    encode(message, writer = new BinaryWriter()) {
        if (message.projectionSleep !== undefined) {
            Duration.encode(message.projectionSleep, writer.uint32(10).fork()).join();
        }
        if (message.blob !== undefined) {
            writer.uint32(18).string(message.blob);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.projectionSleep = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.blob = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            projectionSleep: isSet(object.projectionSleep) ? Duration.fromJSON(object.projectionSleep) : undefined,
            blob: isSet(object.blob) ? globalThis.String(object.blob) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.projectionSleep !== undefined) {
            obj.projectionSleep = Duration.toJSON(message.projectionSleep);
        }
        if (message.blob !== undefined) {
            obj.blob = message.blob;
        }
        return obj;
    },
    create(base) {
        return AddedEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddedEvent();
        message.projectionSleep = (object.projectionSleep !== undefined && object.projectionSleep !== null)
            ? Duration.fromPartial(object.projectionSleep)
            : undefined;
        message.blob = object.blob ?? undefined;
        return message;
    },
};
function createBaseChangedEvent() {
    return { projectionSleep: undefined, blob: undefined };
}
export const ChangedEvent = {
    encode(message, writer = new BinaryWriter()) {
        if (message.projectionSleep !== undefined) {
            Duration.encode(message.projectionSleep, writer.uint32(10).fork()).join();
        }
        if (message.blob !== undefined) {
            writer.uint32(18).string(message.blob);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChangedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.projectionSleep = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.blob = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            projectionSleep: isSet(object.projectionSleep) ? Duration.fromJSON(object.projectionSleep) : undefined,
            blob: isSet(object.blob) ? globalThis.String(object.blob) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.projectionSleep !== undefined) {
            obj.projectionSleep = Duration.toJSON(message.projectionSleep);
        }
        if (message.blob !== undefined) {
            obj.blob = message.blob;
        }
        return obj;
    },
    create(base) {
        return ChangedEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseChangedEvent();
        message.projectionSleep = (object.projectionSleep !== undefined && object.projectionSleep !== null)
            ? Duration.fromPartial(object.projectionSleep)
            : undefined;
        message.blob = object.blob ?? undefined;
        return message;
    },
};
function createBaseRemovedEvent() {
    return { projectionSleep: undefined };
}
export const RemovedEvent = {
    encode(message, writer = new BinaryWriter()) {
        if (message.projectionSleep !== undefined) {
            Duration.encode(message.projectionSleep, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemovedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.projectionSleep = Duration.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { projectionSleep: isSet(object.projectionSleep) ? Duration.fromJSON(object.projectionSleep) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.projectionSleep !== undefined) {
            obj.projectionSleep = Duration.toJSON(message.projectionSleep);
        }
        return obj;
    },
    create(base) {
        return RemovedEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemovedEvent();
        message.projectionSleep = (object.projectionSleep !== undefined && object.projectionSleep !== null)
            ? Duration.fromPartial(object.projectionSleep)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
