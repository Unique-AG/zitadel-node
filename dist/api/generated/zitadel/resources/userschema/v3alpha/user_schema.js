// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: zitadel/resources/userschema/v3alpha/user_schema.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../../../google/protobuf/struct.js";
import { Details, textFilterMethodFromJSON, textFilterMethodToJSON, } from "../../object/v3alpha/object.js";
export const protobufPackage = "zitadel.resources.userschema.v3alpha";
export var FieldName;
(function (FieldName) {
    FieldName[FieldName["FIELD_NAME_UNSPECIFIED"] = 0] = "FIELD_NAME_UNSPECIFIED";
    FieldName[FieldName["FIELD_NAME_TYPE"] = 1] = "FIELD_NAME_TYPE";
    FieldName[FieldName["FIELD_NAME_STATE"] = 2] = "FIELD_NAME_STATE";
    FieldName[FieldName["FIELD_NAME_REVISION"] = 3] = "FIELD_NAME_REVISION";
    FieldName[FieldName["FIELD_NAME_CHANGE_DATE"] = 4] = "FIELD_NAME_CHANGE_DATE";
    FieldName[FieldName["FIELD_NAME_CREATION_DATE"] = 5] = "FIELD_NAME_CREATION_DATE";
    FieldName[FieldName["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FieldName || (FieldName = {}));
export function fieldNameFromJSON(object) {
    switch (object) {
        case 0:
        case "FIELD_NAME_UNSPECIFIED":
            return FieldName.FIELD_NAME_UNSPECIFIED;
        case 1:
        case "FIELD_NAME_TYPE":
            return FieldName.FIELD_NAME_TYPE;
        case 2:
        case "FIELD_NAME_STATE":
            return FieldName.FIELD_NAME_STATE;
        case 3:
        case "FIELD_NAME_REVISION":
            return FieldName.FIELD_NAME_REVISION;
        case 4:
        case "FIELD_NAME_CHANGE_DATE":
            return FieldName.FIELD_NAME_CHANGE_DATE;
        case 5:
        case "FIELD_NAME_CREATION_DATE":
            return FieldName.FIELD_NAME_CREATION_DATE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return FieldName.UNRECOGNIZED;
    }
}
export function fieldNameToJSON(object) {
    switch (object) {
        case FieldName.FIELD_NAME_UNSPECIFIED:
            return "FIELD_NAME_UNSPECIFIED";
        case FieldName.FIELD_NAME_TYPE:
            return "FIELD_NAME_TYPE";
        case FieldName.FIELD_NAME_STATE:
            return "FIELD_NAME_STATE";
        case FieldName.FIELD_NAME_REVISION:
            return "FIELD_NAME_REVISION";
        case FieldName.FIELD_NAME_CHANGE_DATE:
            return "FIELD_NAME_CHANGE_DATE";
        case FieldName.FIELD_NAME_CREATION_DATE:
            return "FIELD_NAME_CREATION_DATE";
        case FieldName.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
export var State;
(function (State) {
    State[State["STATE_UNSPECIFIED"] = 0] = "STATE_UNSPECIFIED";
    State[State["STATE_ACTIVE"] = 1] = "STATE_ACTIVE";
    State[State["STATE_INACTIVE"] = 2] = "STATE_INACTIVE";
    State[State["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(State || (State = {}));
export function stateFromJSON(object) {
    switch (object) {
        case 0:
        case "STATE_UNSPECIFIED":
            return State.STATE_UNSPECIFIED;
        case 1:
        case "STATE_ACTIVE":
            return State.STATE_ACTIVE;
        case 2:
        case "STATE_INACTIVE":
            return State.STATE_INACTIVE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return State.UNRECOGNIZED;
    }
}
export function stateToJSON(object) {
    switch (object) {
        case State.STATE_UNSPECIFIED:
            return "STATE_UNSPECIFIED";
        case State.STATE_ACTIVE:
            return "STATE_ACTIVE";
        case State.STATE_INACTIVE:
            return "STATE_INACTIVE";
        case State.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
export var AuthenticatorType;
(function (AuthenticatorType) {
    AuthenticatorType[AuthenticatorType["AUTHENTICATOR_TYPE_UNSPECIFIED"] = 0] = "AUTHENTICATOR_TYPE_UNSPECIFIED";
    AuthenticatorType[AuthenticatorType["AUTHENTICATOR_TYPE_USERNAME"] = 1] = "AUTHENTICATOR_TYPE_USERNAME";
    AuthenticatorType[AuthenticatorType["AUTHENTICATOR_TYPE_PASSWORD"] = 2] = "AUTHENTICATOR_TYPE_PASSWORD";
    AuthenticatorType[AuthenticatorType["AUTHENTICATOR_TYPE_WEBAUTHN"] = 3] = "AUTHENTICATOR_TYPE_WEBAUTHN";
    AuthenticatorType[AuthenticatorType["AUTHENTICATOR_TYPE_TOTP"] = 4] = "AUTHENTICATOR_TYPE_TOTP";
    AuthenticatorType[AuthenticatorType["AUTHENTICATOR_TYPE_OTP_EMAIL"] = 5] = "AUTHENTICATOR_TYPE_OTP_EMAIL";
    AuthenticatorType[AuthenticatorType["AUTHENTICATOR_TYPE_OTP_SMS"] = 6] = "AUTHENTICATOR_TYPE_OTP_SMS";
    AuthenticatorType[AuthenticatorType["AUTHENTICATOR_TYPE_AUTHENTICATION_KEY"] = 7] = "AUTHENTICATOR_TYPE_AUTHENTICATION_KEY";
    AuthenticatorType[AuthenticatorType["AUTHENTICATOR_TYPE_IDENTITY_PROVIDER"] = 8] = "AUTHENTICATOR_TYPE_IDENTITY_PROVIDER";
    AuthenticatorType[AuthenticatorType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AuthenticatorType || (AuthenticatorType = {}));
export function authenticatorTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "AUTHENTICATOR_TYPE_UNSPECIFIED":
            return AuthenticatorType.AUTHENTICATOR_TYPE_UNSPECIFIED;
        case 1:
        case "AUTHENTICATOR_TYPE_USERNAME":
            return AuthenticatorType.AUTHENTICATOR_TYPE_USERNAME;
        case 2:
        case "AUTHENTICATOR_TYPE_PASSWORD":
            return AuthenticatorType.AUTHENTICATOR_TYPE_PASSWORD;
        case 3:
        case "AUTHENTICATOR_TYPE_WEBAUTHN":
            return AuthenticatorType.AUTHENTICATOR_TYPE_WEBAUTHN;
        case 4:
        case "AUTHENTICATOR_TYPE_TOTP":
            return AuthenticatorType.AUTHENTICATOR_TYPE_TOTP;
        case 5:
        case "AUTHENTICATOR_TYPE_OTP_EMAIL":
            return AuthenticatorType.AUTHENTICATOR_TYPE_OTP_EMAIL;
        case 6:
        case "AUTHENTICATOR_TYPE_OTP_SMS":
            return AuthenticatorType.AUTHENTICATOR_TYPE_OTP_SMS;
        case 7:
        case "AUTHENTICATOR_TYPE_AUTHENTICATION_KEY":
            return AuthenticatorType.AUTHENTICATOR_TYPE_AUTHENTICATION_KEY;
        case 8:
        case "AUTHENTICATOR_TYPE_IDENTITY_PROVIDER":
            return AuthenticatorType.AUTHENTICATOR_TYPE_IDENTITY_PROVIDER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AuthenticatorType.UNRECOGNIZED;
    }
}
export function authenticatorTypeToJSON(object) {
    switch (object) {
        case AuthenticatorType.AUTHENTICATOR_TYPE_UNSPECIFIED:
            return "AUTHENTICATOR_TYPE_UNSPECIFIED";
        case AuthenticatorType.AUTHENTICATOR_TYPE_USERNAME:
            return "AUTHENTICATOR_TYPE_USERNAME";
        case AuthenticatorType.AUTHENTICATOR_TYPE_PASSWORD:
            return "AUTHENTICATOR_TYPE_PASSWORD";
        case AuthenticatorType.AUTHENTICATOR_TYPE_WEBAUTHN:
            return "AUTHENTICATOR_TYPE_WEBAUTHN";
        case AuthenticatorType.AUTHENTICATOR_TYPE_TOTP:
            return "AUTHENTICATOR_TYPE_TOTP";
        case AuthenticatorType.AUTHENTICATOR_TYPE_OTP_EMAIL:
            return "AUTHENTICATOR_TYPE_OTP_EMAIL";
        case AuthenticatorType.AUTHENTICATOR_TYPE_OTP_SMS:
            return "AUTHENTICATOR_TYPE_OTP_SMS";
        case AuthenticatorType.AUTHENTICATOR_TYPE_AUTHENTICATION_KEY:
            return "AUTHENTICATOR_TYPE_AUTHENTICATION_KEY";
        case AuthenticatorType.AUTHENTICATOR_TYPE_IDENTITY_PROVIDER:
            return "AUTHENTICATOR_TYPE_IDENTITY_PROVIDER";
        case AuthenticatorType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseGetUserSchema() {
    return { details: undefined, config: undefined, state: 0, revision: 0 };
}
export const GetUserSchema = {
    encode(message, writer = new BinaryWriter()) {
        if (message.details !== undefined) {
            Details.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.config !== undefined) {
            UserSchema.encode(message.config, writer.uint32(18).fork()).join();
        }
        if (message.state !== 0) {
            writer.uint32(24).int32(message.state);
        }
        if (message.revision !== 0) {
            writer.uint32(32).uint32(message.revision);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserSchema();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = Details.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.config = UserSchema.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.revision = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? Details.fromJSON(object.details) : undefined,
            config: isSet(object.config) ? UserSchema.fromJSON(object.config) : undefined,
            state: isSet(object.state) ? stateFromJSON(object.state) : 0,
            revision: isSet(object.revision) ? globalThis.Number(object.revision) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = Details.toJSON(message.details);
        }
        if (message.config !== undefined) {
            obj.config = UserSchema.toJSON(message.config);
        }
        if (message.state !== 0) {
            obj.state = stateToJSON(message.state);
        }
        if (message.revision !== 0) {
            obj.revision = Math.round(message.revision);
        }
        return obj;
    },
    create(base) {
        return GetUserSchema.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserSchema();
        message.details = (object.details !== undefined && object.details !== null)
            ? Details.fromPartial(object.details)
            : undefined;
        message.config = (object.config !== undefined && object.config !== null)
            ? UserSchema.fromPartial(object.config)
            : undefined;
        message.state = object.state ?? 0;
        message.revision = object.revision ?? 0;
        return message;
    },
};
function createBaseUserSchema() {
    return { type: "", schema: undefined, possibleAuthenticators: [] };
}
export const UserSchema = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.schema !== undefined) {
            Struct.encode(Struct.wrap(message.schema), writer.uint32(18).fork()).join();
        }
        writer.uint32(26).fork();
        for (const v of message.possibleAuthenticators) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserSchema();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.schema = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag === 24) {
                        message.possibleAuthenticators.push(reader.int32());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.possibleAuthenticators.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            schema: isObject(object.schema) ? object.schema : undefined,
            possibleAuthenticators: globalThis.Array.isArray(object?.possibleAuthenticators)
                ? object.possibleAuthenticators.map((e) => authenticatorTypeFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.schema !== undefined) {
            obj.schema = message.schema;
        }
        if (message.possibleAuthenticators?.length) {
            obj.possibleAuthenticators = message.possibleAuthenticators.map((e) => authenticatorTypeToJSON(e));
        }
        return obj;
    },
    create(base) {
        return UserSchema.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserSchema();
        message.type = object.type ?? "";
        message.schema = object.schema ?? undefined;
        message.possibleAuthenticators = object.possibleAuthenticators?.map((e) => e) || [];
        return message;
    },
};
function createBasePatchUserSchema() {
    return { type: undefined, schema: undefined, possibleAuthenticators: [] };
}
export const PatchUserSchema = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== undefined) {
            writer.uint32(18).string(message.type);
        }
        if (message.schema !== undefined) {
            Struct.encode(Struct.wrap(message.schema), writer.uint32(26).fork()).join();
        }
        writer.uint32(34).fork();
        for (const v of message.possibleAuthenticators) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePatchUserSchema();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.schema = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag === 32) {
                        message.possibleAuthenticators.push(reader.int32());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.possibleAuthenticators.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : undefined,
            schema: isObject(object.schema) ? object.schema : undefined,
            possibleAuthenticators: globalThis.Array.isArray(object?.possibleAuthenticators)
                ? object.possibleAuthenticators.map((e) => authenticatorTypeFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== undefined) {
            obj.type = message.type;
        }
        if (message.schema !== undefined) {
            obj.schema = message.schema;
        }
        if (message.possibleAuthenticators?.length) {
            obj.possibleAuthenticators = message.possibleAuthenticators.map((e) => authenticatorTypeToJSON(e));
        }
        return obj;
    },
    create(base) {
        return PatchUserSchema.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePatchUserSchema();
        message.type = object.type ?? undefined;
        message.schema = object.schema ?? undefined;
        message.possibleAuthenticators = object.possibleAuthenticators?.map((e) => e) || [];
        return message;
    },
};
function createBaseSearchFilter() {
    return {
        orFilter: undefined,
        andFilter: undefined,
        notFilter: undefined,
        typeFilter: undefined,
        stateFilter: undefined,
        idFilter: undefined,
    };
}
export const SearchFilter = {
    encode(message, writer = new BinaryWriter()) {
        if (message.orFilter !== undefined) {
            OrFilter.encode(message.orFilter, writer.uint32(10).fork()).join();
        }
        if (message.andFilter !== undefined) {
            AndFilter.encode(message.andFilter, writer.uint32(18).fork()).join();
        }
        if (message.notFilter !== undefined) {
            NotFilter.encode(message.notFilter, writer.uint32(26).fork()).join();
        }
        if (message.typeFilter !== undefined) {
            TypeFilter.encode(message.typeFilter, writer.uint32(42).fork()).join();
        }
        if (message.stateFilter !== undefined) {
            StateFilter.encode(message.stateFilter, writer.uint32(50).fork()).join();
        }
        if (message.idFilter !== undefined) {
            IDFilter.encode(message.idFilter, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.orFilter = OrFilter.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.andFilter = AndFilter.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.notFilter = NotFilter.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.typeFilter = TypeFilter.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.stateFilter = StateFilter.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.idFilter = IDFilter.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orFilter: isSet(object.orFilter) ? OrFilter.fromJSON(object.orFilter) : undefined,
            andFilter: isSet(object.andFilter) ? AndFilter.fromJSON(object.andFilter) : undefined,
            notFilter: isSet(object.notFilter) ? NotFilter.fromJSON(object.notFilter) : undefined,
            typeFilter: isSet(object.typeFilter) ? TypeFilter.fromJSON(object.typeFilter) : undefined,
            stateFilter: isSet(object.stateFilter) ? StateFilter.fromJSON(object.stateFilter) : undefined,
            idFilter: isSet(object.idFilter) ? IDFilter.fromJSON(object.idFilter) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orFilter !== undefined) {
            obj.orFilter = OrFilter.toJSON(message.orFilter);
        }
        if (message.andFilter !== undefined) {
            obj.andFilter = AndFilter.toJSON(message.andFilter);
        }
        if (message.notFilter !== undefined) {
            obj.notFilter = NotFilter.toJSON(message.notFilter);
        }
        if (message.typeFilter !== undefined) {
            obj.typeFilter = TypeFilter.toJSON(message.typeFilter);
        }
        if (message.stateFilter !== undefined) {
            obj.stateFilter = StateFilter.toJSON(message.stateFilter);
        }
        if (message.idFilter !== undefined) {
            obj.idFilter = IDFilter.toJSON(message.idFilter);
        }
        return obj;
    },
    create(base) {
        return SearchFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSearchFilter();
        message.orFilter = (object.orFilter !== undefined && object.orFilter !== null)
            ? OrFilter.fromPartial(object.orFilter)
            : undefined;
        message.andFilter = (object.andFilter !== undefined && object.andFilter !== null)
            ? AndFilter.fromPartial(object.andFilter)
            : undefined;
        message.notFilter = (object.notFilter !== undefined && object.notFilter !== null)
            ? NotFilter.fromPartial(object.notFilter)
            : undefined;
        message.typeFilter = (object.typeFilter !== undefined && object.typeFilter !== null)
            ? TypeFilter.fromPartial(object.typeFilter)
            : undefined;
        message.stateFilter = (object.stateFilter !== undefined && object.stateFilter !== null)
            ? StateFilter.fromPartial(object.stateFilter)
            : undefined;
        message.idFilter = (object.idFilter !== undefined && object.idFilter !== null)
            ? IDFilter.fromPartial(object.idFilter)
            : undefined;
        return message;
    },
};
function createBaseOrFilter() {
    return { queries: [] };
}
export const OrFilter = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.queries) {
            SearchFilter.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.queries.push(SearchFilter.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            queries: globalThis.Array.isArray(object?.queries)
                ? object.queries.map((e) => SearchFilter.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => SearchFilter.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return OrFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOrFilter();
        message.queries = object.queries?.map((e) => SearchFilter.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAndFilter() {
    return { queries: [] };
}
export const AndFilter = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.queries) {
            SearchFilter.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAndFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.queries.push(SearchFilter.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            queries: globalThis.Array.isArray(object?.queries)
                ? object.queries.map((e) => SearchFilter.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => SearchFilter.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return AndFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAndFilter();
        message.queries = object.queries?.map((e) => SearchFilter.fromPartial(e)) || [];
        return message;
    },
};
function createBaseNotFilter() {
    return { filter: undefined };
}
export const NotFilter = {
    encode(message, writer = new BinaryWriter()) {
        if (message.filter !== undefined) {
            SearchFilter.encode(message.filter, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.filter = SearchFilter.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { filter: isSet(object.filter) ? SearchFilter.fromJSON(object.filter) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.filter !== undefined) {
            obj.filter = SearchFilter.toJSON(message.filter);
        }
        return obj;
    },
    create(base) {
        return NotFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNotFilter();
        message.filter = (object.filter !== undefined && object.filter !== null)
            ? SearchFilter.fromPartial(object.filter)
            : undefined;
        return message;
    },
};
function createBaseIDFilter() {
    return { id: "", method: 0 };
}
export const IDFilter = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.method !== 0) {
            writer.uint32(16).int32(message.method);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIDFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.method = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            method: isSet(object.method) ? textFilterMethodFromJSON(object.method) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.method !== 0) {
            obj.method = textFilterMethodToJSON(message.method);
        }
        return obj;
    },
    create(base) {
        return IDFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIDFilter();
        message.id = object.id ?? "";
        message.method = object.method ?? 0;
        return message;
    },
};
function createBaseTypeFilter() {
    return { type: "", method: 0 };
}
export const TypeFilter = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.method !== 0) {
            writer.uint32(16).int32(message.method);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTypeFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.method = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            method: isSet(object.method) ? textFilterMethodFromJSON(object.method) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.method !== 0) {
            obj.method = textFilterMethodToJSON(message.method);
        }
        return obj;
    },
    create(base) {
        return TypeFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTypeFilter();
        message.type = object.type ?? "";
        message.method = object.method ?? 0;
        return message;
    },
};
function createBaseStateFilter() {
    return { state: 0 };
}
export const StateFilter = {
    encode(message, writer = new BinaryWriter()) {
        if (message.state !== 0) {
            writer.uint32(8).int32(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStateFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { state: isSet(object.state) ? stateFromJSON(object.state) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== 0) {
            obj.state = stateToJSON(message.state);
        }
        return obj;
    },
    create(base) {
        return StateFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStateFilter();
        message.state = object.state ?? 0;
        return message;
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
