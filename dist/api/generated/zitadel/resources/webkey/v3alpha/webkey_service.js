"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: zitadel/resources/webkey/v3alpha/webkey_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZITADELWebKeysDefinition = exports.ListWebKeysResponse = exports.ListWebKeysRequest = exports.DeleteWebKeyResponse = exports.DeleteWebKeyRequest = exports.ActivateWebKeyResponse = exports.ActivateWebKeyRequest = exports.CreateWebKeyResponse = exports.CreateWebKeyRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const object_js_1 = require("../../../object/v3alpha/object.js");
const object_js_2 = require("../../object/v3alpha/object.js");
const key_js_1 = require("./key.js");
exports.protobufPackage = "zitadel.resources.webkey.v3alpha";
function createBaseCreateWebKeyRequest() {
    return { instance: undefined, key: undefined };
}
exports.CreateWebKeyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.instance !== undefined) {
            object_js_1.Instance.encode(message.instance, writer.uint32(10).fork()).join();
        }
        if (message.key !== undefined) {
            key_js_1.WebKey.encode(message.key, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateWebKeyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = object_js_1.Instance.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.key = key_js_1.WebKey.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance) ? object_js_1.Instance.fromJSON(object.instance) : undefined,
            key: isSet(object.key) ? key_js_1.WebKey.fromJSON(object.key) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = object_js_1.Instance.toJSON(message.instance);
        }
        if (message.key !== undefined) {
            obj.key = key_js_1.WebKey.toJSON(message.key);
        }
        return obj;
    },
    create(base) {
        return exports.CreateWebKeyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateWebKeyRequest();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? object_js_1.Instance.fromPartial(object.instance)
            : undefined;
        message.key = (object.key !== undefined && object.key !== null) ? key_js_1.WebKey.fromPartial(object.key) : undefined;
        return message;
    },
};
function createBaseCreateWebKeyResponse() {
    return { details: undefined };
}
exports.CreateWebKeyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_2.Details.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateWebKeyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_2.Details.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_2.Details.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_2.Details.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.CreateWebKeyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateWebKeyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_2.Details.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseActivateWebKeyRequest() {
    return { instance: undefined, id: "" };
}
exports.ActivateWebKeyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.instance !== undefined) {
            object_js_1.Instance.encode(message.instance, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateWebKeyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = object_js_1.Instance.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance) ? object_js_1.Instance.fromJSON(object.instance) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = object_js_1.Instance.toJSON(message.instance);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.ActivateWebKeyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseActivateWebKeyRequest();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? object_js_1.Instance.fromPartial(object.instance)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseActivateWebKeyResponse() {
    return { details: undefined };
}
exports.ActivateWebKeyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_2.Details.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateWebKeyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_2.Details.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_2.Details.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_2.Details.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ActivateWebKeyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseActivateWebKeyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_2.Details.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseDeleteWebKeyRequest() {
    return { instance: undefined, id: "" };
}
exports.DeleteWebKeyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.instance !== undefined) {
            object_js_1.Instance.encode(message.instance, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteWebKeyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = object_js_1.Instance.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance) ? object_js_1.Instance.fromJSON(object.instance) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = object_js_1.Instance.toJSON(message.instance);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteWebKeyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteWebKeyRequest();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? object_js_1.Instance.fromPartial(object.instance)
            : undefined;
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseDeleteWebKeyResponse() {
    return { details: undefined };
}
exports.DeleteWebKeyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_2.Details.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteWebKeyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_2.Details.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_2.Details.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_2.Details.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.DeleteWebKeyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteWebKeyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_2.Details.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListWebKeysRequest() {
    return { instance: undefined };
}
exports.ListWebKeysRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.instance !== undefined) {
            object_js_1.Instance.encode(message.instance, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListWebKeysRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = object_js_1.Instance.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { instance: isSet(object.instance) ? object_js_1.Instance.fromJSON(object.instance) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = object_js_1.Instance.toJSON(message.instance);
        }
        return obj;
    },
    create(base) {
        return exports.ListWebKeysRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListWebKeysRequest();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? object_js_1.Instance.fromPartial(object.instance)
            : undefined;
        return message;
    },
};
function createBaseListWebKeysResponse() {
    return { webKeys: [] };
}
exports.ListWebKeysResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.webKeys) {
            key_js_1.GetWebKey.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListWebKeysResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.webKeys.push(key_js_1.GetWebKey.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            webKeys: globalThis.Array.isArray(object?.webKeys) ? object.webKeys.map((e) => key_js_1.GetWebKey.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.webKeys?.length) {
            obj.webKeys = message.webKeys.map((e) => key_js_1.GetWebKey.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListWebKeysResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListWebKeysResponse();
        message.webKeys = object.webKeys?.map((e) => key_js_1.GetWebKey.fromPartial(e)) || [];
        return message;
    },
};
exports.ZITADELWebKeysDefinition = {
    name: "ZITADELWebKeys",
    fullName: "zitadel.resources.webkey.v3alpha.ZITADELWebKeys",
    methods: {
        createWebKey: {
            name: "CreateWebKey",
            requestType: exports.CreateWebKeyRequest,
            requestStream: false,
            responseType: exports.CreateWebKeyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            213,
                            1,
                            18,
                            40,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            101,
                            32,
                            97,
                            32,
                            119,
                            101,
                            98,
                            32,
                            107,
                            101,
                            121,
                            32,
                            112,
                            97,
                            105,
                            114,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            26,
                            155,
                            1,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            101,
                            32,
                            97,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            112,
                            117,
                            98,
                            108,
                            105,
                            99,
                            32,
                            107,
                            101,
                            121,
                            32,
                            112,
                            97,
                            105,
                            114,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            107,
                            101,
                            121,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            115,
                            105,
                            103,
                            110,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            112,
                            117,
                            98,
                            108,
                            105,
                            99,
                            32,
                            107,
                            101,
                            121,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            118,
                            97,
                            108,
                            105,
                            116,
                            101,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            46,
                            74,
                            11,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            4,
                            10,
                            2,
                            79,
                            75,
                        ]),
                    ],
                    400010: [
                        Buffer.from([
                            26,
                            10,
                            19,
                            10,
                            17,
                            105,
                            97,
                            109,
                            46,
                            119,
                            101,
                            98,
                            95,
                            107,
                            101,
                            121,
                            46,
                            119,
                            114,
                            105,
                            116,
                            101,
                            18,
                            3,
                            8,
                            201,
                            1,
                        ]),
                    ],
                    578365826: [
                        Buffer.from([
                            34,
                            58,
                            3,
                            107,
                            101,
                            121,
                            34,
                            27,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            119,
                            101,
                            98,
                            95,
                            107,
                            101,
                            121,
                            115,
                        ]),
                    ],
                },
            },
        },
        activateWebKey: {
            name: "ActivateWebKey",
            requestType: exports.ActivateWebKeyRequest,
            requestStream: false,
            responseType: exports.ActivateWebKeyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            132,
                            3,
                            18,
                            39,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            97,
                            32,
                            115,
                            105,
                            103,
                            110,
                            105,
                            110,
                            103,
                            32,
                            107,
                            101,
                            121,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            26,
                            203,
                            2,
                            83,
                            119,
                            105,
                            116,
                            99,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            32,
                            115,
                            105,
                            103,
                            110,
                            105,
                            110,
                            103,
                            32,
                            119,
                            101,
                            98,
                            32,
                            107,
                            101,
                            121,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            111,
                            117,
                            115,
                            108,
                            121,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            32,
                            107,
                            101,
                            121,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            46,
                            32,
                            78,
                            111,
                            116,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            74,
                            87,
                            75,
                            115,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            101,
                            110,
                            100,
                            112,
                            111,
                            105,
                            110,
                            116,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            99,
                            97,
                            99,
                            104,
                            101,
                            97,
                            98,
                            108,
                            101,
                            32,
                            114,
                            101,
                            115,
                            112,
                            111,
                            110,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            114,
                            101,
                            102,
                            111,
                            114,
                            101,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            97,
                            100,
                            118,
                            105,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            97,
                            32,
                            107,
                            101,
                            121,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            104,
                            97,
                            115,
                            32,
                            98,
                            101,
                            101,
                            110,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            32,
                            119,
                            105,
                            116,
                            104,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            97,
                            99,
                            104,
                            101,
                            32,
                            100,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            40,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            105,
                            115,
                            32,
                            53,
                            109,
                            105,
                            110,
                            41,
                            44,
                            32,
                            97,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            117,
                            98,
                            108,
                            105,
                            99,
                            32,
                            107,
                            101,
                            121,
                            32,
                            109,
                            97,
                            121,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            98,
                            101,
                            101,
                            110,
                            32,
                            112,
                            114,
                            111,
                            112,
                            97,
                            103,
                            97,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            99,
                            97,
                            99,
                            104,
                            101,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            99,
                            108,
                            105,
                            101,
                            110,
                            116,
                            115,
                            32,
                            121,
                            101,
                            116,
                            46,
                            74,
                            11,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            4,
                            10,
                            2,
                            79,
                            75,
                        ]),
                    ],
                    400010: [
                        Buffer.from([
                            26,
                            10,
                            19,
                            10,
                            17,
                            105,
                            97,
                            109,
                            46,
                            119,
                            101,
                            98,
                            95,
                            107,
                            101,
                            121,
                            46,
                            119,
                            114,
                            105,
                            116,
                            101,
                            18,
                            3,
                            8,
                            200,
                            1,
                        ]),
                    ],
                    578365826: [
                        Buffer.from([
                            44,
                            34,
                            42,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            119,
                            101,
                            98,
                            95,
                            107,
                            101,
                            121,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        deleteWebKey: {
            name: "DeleteWebKey",
            requestType: exports.DeleteWebKeyRequest,
            requestStream: false,
            responseType: exports.DeleteWebKeyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            182,
                            1,
                            18,
                            38,
                            68,
                            101,
                            108,
                            101,
                            116,
                            101,
                            32,
                            97,
                            32,
                            119,
                            101,
                            98,
                            32,
                            107,
                            101,
                            121,
                            32,
                            112,
                            97,
                            105,
                            114,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            26,
                            127,
                            68,
                            101,
                            108,
                            101,
                            116,
                            101,
                            32,
                            97,
                            32,
                            119,
                            101,
                            98,
                            32,
                            107,
                            101,
                            121,
                            32,
                            112,
                            97,
                            105,
                            114,
                            46,
                            32,
                            79,
                            110,
                            108,
                            121,
                            32,
                            105,
                            110,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            32,
                            107,
                            101,
                            121,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            100,
                            101,
                            108,
                            101,
                            116,
                            101,
                            100,
                            46,
                            32,
                            79,
                            110,
                            99,
                            101,
                            32,
                            97,
                            32,
                            107,
                            101,
                            121,
                            32,
                            105,
                            115,
                            32,
                            100,
                            101,
                            108,
                            101,
                            116,
                            101,
                            100,
                            44,
                            32,
                            97,
                            110,
                            121,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            32,
                            115,
                            105,
                            103,
                            110,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            107,
                            101,
                            121,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            46,
                            74,
                            11,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            4,
                            10,
                            2,
                            79,
                            75,
                        ]),
                    ],
                    400010: [
                        Buffer.from([
                            27,
                            10,
                            20,
                            10,
                            18,
                            105,
                            97,
                            109,
                            46,
                            119,
                            101,
                            98,
                            95,
                            107,
                            101,
                            121,
                            46,
                            100,
                            101,
                            108,
                            101,
                            116,
                            101,
                            18,
                            3,
                            8,
                            200,
                            1,
                        ]),
                    ],
                    578365826: [
                        Buffer.from([
                            34,
                            42,
                            32,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            119,
                            101,
                            98,
                            95,
                            107,
                            101,
                            121,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        listWebKeys: {
            name: "ListWebKeys",
            requestType: exports.ListWebKeysRequest,
            requestStream: false,
            responseType: exports.ListWebKeysResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            91,
                            18,
                            37,
                            76,
                            105,
                            115,
                            116,
                            32,
                            119,
                            101,
                            98,
                            32,
                            107,
                            101,
                            121,
                            32,
                            100,
                            101,
                            116,
                            97,
                            105,
                            108,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            26,
                            37,
                            76,
                            105,
                            115,
                            116,
                            32,
                            119,
                            101,
                            98,
                            32,
                            107,
                            101,
                            121,
                            32,
                            100,
                            101,
                            116,
                            97,
                            105,
                            108,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            74,
                            11,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            4,
                            10,
                            2,
                            79,
                            75,
                        ]),
                    ],
                    400010: [
                        Buffer.from([
                            25,
                            10,
                            18,
                            10,
                            16,
                            105,
                            97,
                            109,
                            46,
                            119,
                            101,
                            98,
                            95,
                            107,
                            101,
                            121,
                            46,
                            114,
                            101,
                            97,
                            100,
                            18,
                            3,
                            8,
                            200,
                            1,
                        ]),
                    ],
                    578365826: [
                        Buffer.from([
                            29,
                            18,
                            27,
                            47,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            47,
                            118,
                            51,
                            97,
                            108,
                            112,
                            104,
                            97,
                            47,
                            119,
                            101,
                            98,
                            95,
                            107,
                            101,
                            121,
                            115,
                        ]),
                    ],
                },
            },
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
