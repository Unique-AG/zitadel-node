// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: zitadel/session/v2beta/challenge.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../../google/protobuf/struct.js";
export const protobufPackage = "zitadel.session.v2beta";
export var UserVerificationRequirement;
(function (UserVerificationRequirement) {
    UserVerificationRequirement[UserVerificationRequirement["USER_VERIFICATION_REQUIREMENT_UNSPECIFIED"] = 0] = "USER_VERIFICATION_REQUIREMENT_UNSPECIFIED";
    UserVerificationRequirement[UserVerificationRequirement["USER_VERIFICATION_REQUIREMENT_REQUIRED"] = 1] = "USER_VERIFICATION_REQUIREMENT_REQUIRED";
    UserVerificationRequirement[UserVerificationRequirement["USER_VERIFICATION_REQUIREMENT_PREFERRED"] = 2] = "USER_VERIFICATION_REQUIREMENT_PREFERRED";
    UserVerificationRequirement[UserVerificationRequirement["USER_VERIFICATION_REQUIREMENT_DISCOURAGED"] = 3] = "USER_VERIFICATION_REQUIREMENT_DISCOURAGED";
    UserVerificationRequirement[UserVerificationRequirement["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(UserVerificationRequirement || (UserVerificationRequirement = {}));
export function userVerificationRequirementFromJSON(object) {
    switch (object) {
        case 0:
        case "USER_VERIFICATION_REQUIREMENT_UNSPECIFIED":
            return UserVerificationRequirement.USER_VERIFICATION_REQUIREMENT_UNSPECIFIED;
        case 1:
        case "USER_VERIFICATION_REQUIREMENT_REQUIRED":
            return UserVerificationRequirement.USER_VERIFICATION_REQUIREMENT_REQUIRED;
        case 2:
        case "USER_VERIFICATION_REQUIREMENT_PREFERRED":
            return UserVerificationRequirement.USER_VERIFICATION_REQUIREMENT_PREFERRED;
        case 3:
        case "USER_VERIFICATION_REQUIREMENT_DISCOURAGED":
            return UserVerificationRequirement.USER_VERIFICATION_REQUIREMENT_DISCOURAGED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return UserVerificationRequirement.UNRECOGNIZED;
    }
}
export function userVerificationRequirementToJSON(object) {
    switch (object) {
        case UserVerificationRequirement.USER_VERIFICATION_REQUIREMENT_UNSPECIFIED:
            return "USER_VERIFICATION_REQUIREMENT_UNSPECIFIED";
        case UserVerificationRequirement.USER_VERIFICATION_REQUIREMENT_REQUIRED:
            return "USER_VERIFICATION_REQUIREMENT_REQUIRED";
        case UserVerificationRequirement.USER_VERIFICATION_REQUIREMENT_PREFERRED:
            return "USER_VERIFICATION_REQUIREMENT_PREFERRED";
        case UserVerificationRequirement.USER_VERIFICATION_REQUIREMENT_DISCOURAGED:
            return "USER_VERIFICATION_REQUIREMENT_DISCOURAGED";
        case UserVerificationRequirement.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseRequestChallenges() {
    return { webAuthN: undefined, otpSms: undefined, otpEmail: undefined };
}
export const RequestChallenges = {
    encode(message, writer = new BinaryWriter()) {
        if (message.webAuthN !== undefined) {
            RequestChallenges_WebAuthN.encode(message.webAuthN, writer.uint32(10).fork()).join();
        }
        if (message.otpSms !== undefined) {
            RequestChallenges_OTPSMS.encode(message.otpSms, writer.uint32(18).fork()).join();
        }
        if (message.otpEmail !== undefined) {
            RequestChallenges_OTPEmail.encode(message.otpEmail, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestChallenges();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.webAuthN = RequestChallenges_WebAuthN.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.otpSms = RequestChallenges_OTPSMS.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.otpEmail = RequestChallenges_OTPEmail.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            webAuthN: isSet(object.webAuthN) ? RequestChallenges_WebAuthN.fromJSON(object.webAuthN) : undefined,
            otpSms: isSet(object.otpSms) ? RequestChallenges_OTPSMS.fromJSON(object.otpSms) : undefined,
            otpEmail: isSet(object.otpEmail) ? RequestChallenges_OTPEmail.fromJSON(object.otpEmail) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.webAuthN !== undefined) {
            obj.webAuthN = RequestChallenges_WebAuthN.toJSON(message.webAuthN);
        }
        if (message.otpSms !== undefined) {
            obj.otpSms = RequestChallenges_OTPSMS.toJSON(message.otpSms);
        }
        if (message.otpEmail !== undefined) {
            obj.otpEmail = RequestChallenges_OTPEmail.toJSON(message.otpEmail);
        }
        return obj;
    },
    create(base) {
        return RequestChallenges.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequestChallenges();
        message.webAuthN = (object.webAuthN !== undefined && object.webAuthN !== null)
            ? RequestChallenges_WebAuthN.fromPartial(object.webAuthN)
            : undefined;
        message.otpSms = (object.otpSms !== undefined && object.otpSms !== null)
            ? RequestChallenges_OTPSMS.fromPartial(object.otpSms)
            : undefined;
        message.otpEmail = (object.otpEmail !== undefined && object.otpEmail !== null)
            ? RequestChallenges_OTPEmail.fromPartial(object.otpEmail)
            : undefined;
        return message;
    },
};
function createBaseRequestChallenges_WebAuthN() {
    return { domain: "", userVerificationRequirement: 0 };
}
export const RequestChallenges_WebAuthN = {
    encode(message, writer = new BinaryWriter()) {
        if (message.domain !== "") {
            writer.uint32(10).string(message.domain);
        }
        if (message.userVerificationRequirement !== 0) {
            writer.uint32(16).int32(message.userVerificationRequirement);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestChallenges_WebAuthN();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.userVerificationRequirement = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
            userVerificationRequirement: isSet(object.userVerificationRequirement)
                ? userVerificationRequirementFromJSON(object.userVerificationRequirement)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        if (message.userVerificationRequirement !== 0) {
            obj.userVerificationRequirement = userVerificationRequirementToJSON(message.userVerificationRequirement);
        }
        return obj;
    },
    create(base) {
        return RequestChallenges_WebAuthN.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequestChallenges_WebAuthN();
        message.domain = object.domain ?? "";
        message.userVerificationRequirement = object.userVerificationRequirement ?? 0;
        return message;
    },
};
function createBaseRequestChallenges_OTPSMS() {
    return { returnCode: false };
}
export const RequestChallenges_OTPSMS = {
    encode(message, writer = new BinaryWriter()) {
        if (message.returnCode !== false) {
            writer.uint32(8).bool(message.returnCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestChallenges_OTPSMS();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.returnCode = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { returnCode: isSet(object.returnCode) ? globalThis.Boolean(object.returnCode) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.returnCode !== false) {
            obj.returnCode = message.returnCode;
        }
        return obj;
    },
    create(base) {
        return RequestChallenges_OTPSMS.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequestChallenges_OTPSMS();
        message.returnCode = object.returnCode ?? false;
        return message;
    },
};
function createBaseRequestChallenges_OTPEmail() {
    return { sendCode: undefined, returnCode: undefined };
}
export const RequestChallenges_OTPEmail = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sendCode !== undefined) {
            RequestChallenges_OTPEmail_SendCode.encode(message.sendCode, writer.uint32(18).fork()).join();
        }
        if (message.returnCode !== undefined) {
            RequestChallenges_OTPEmail_ReturnCode.encode(message.returnCode, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestChallenges_OTPEmail();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.sendCode = RequestChallenges_OTPEmail_SendCode.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.returnCode = RequestChallenges_OTPEmail_ReturnCode.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sendCode: isSet(object.sendCode) ? RequestChallenges_OTPEmail_SendCode.fromJSON(object.sendCode) : undefined,
            returnCode: isSet(object.returnCode)
                ? RequestChallenges_OTPEmail_ReturnCode.fromJSON(object.returnCode)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sendCode !== undefined) {
            obj.sendCode = RequestChallenges_OTPEmail_SendCode.toJSON(message.sendCode);
        }
        if (message.returnCode !== undefined) {
            obj.returnCode = RequestChallenges_OTPEmail_ReturnCode.toJSON(message.returnCode);
        }
        return obj;
    },
    create(base) {
        return RequestChallenges_OTPEmail.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequestChallenges_OTPEmail();
        message.sendCode = (object.sendCode !== undefined && object.sendCode !== null)
            ? RequestChallenges_OTPEmail_SendCode.fromPartial(object.sendCode)
            : undefined;
        message.returnCode = (object.returnCode !== undefined && object.returnCode !== null)
            ? RequestChallenges_OTPEmail_ReturnCode.fromPartial(object.returnCode)
            : undefined;
        return message;
    },
};
function createBaseRequestChallenges_OTPEmail_SendCode() {
    return { urlTemplate: undefined };
}
export const RequestChallenges_OTPEmail_SendCode = {
    encode(message, writer = new BinaryWriter()) {
        if (message.urlTemplate !== undefined) {
            writer.uint32(10).string(message.urlTemplate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestChallenges_OTPEmail_SendCode();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.urlTemplate = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { urlTemplate: isSet(object.urlTemplate) ? globalThis.String(object.urlTemplate) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.urlTemplate !== undefined) {
            obj.urlTemplate = message.urlTemplate;
        }
        return obj;
    },
    create(base) {
        return RequestChallenges_OTPEmail_SendCode.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequestChallenges_OTPEmail_SendCode();
        message.urlTemplate = object.urlTemplate ?? undefined;
        return message;
    },
};
function createBaseRequestChallenges_OTPEmail_ReturnCode() {
    return {};
}
export const RequestChallenges_OTPEmail_ReturnCode = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequestChallenges_OTPEmail_ReturnCode();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RequestChallenges_OTPEmail_ReturnCode.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRequestChallenges_OTPEmail_ReturnCode();
        return message;
    },
};
function createBaseChallenges() {
    return { webAuthN: undefined, otpSms: undefined, otpEmail: undefined };
}
export const Challenges = {
    encode(message, writer = new BinaryWriter()) {
        if (message.webAuthN !== undefined) {
            Challenges_WebAuthN.encode(message.webAuthN, writer.uint32(10).fork()).join();
        }
        if (message.otpSms !== undefined) {
            writer.uint32(18).string(message.otpSms);
        }
        if (message.otpEmail !== undefined) {
            writer.uint32(26).string(message.otpEmail);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChallenges();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.webAuthN = Challenges_WebAuthN.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.otpSms = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.otpEmail = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            webAuthN: isSet(object.webAuthN) ? Challenges_WebAuthN.fromJSON(object.webAuthN) : undefined,
            otpSms: isSet(object.otpSms) ? globalThis.String(object.otpSms) : undefined,
            otpEmail: isSet(object.otpEmail) ? globalThis.String(object.otpEmail) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.webAuthN !== undefined) {
            obj.webAuthN = Challenges_WebAuthN.toJSON(message.webAuthN);
        }
        if (message.otpSms !== undefined) {
            obj.otpSms = message.otpSms;
        }
        if (message.otpEmail !== undefined) {
            obj.otpEmail = message.otpEmail;
        }
        return obj;
    },
    create(base) {
        return Challenges.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseChallenges();
        message.webAuthN = (object.webAuthN !== undefined && object.webAuthN !== null)
            ? Challenges_WebAuthN.fromPartial(object.webAuthN)
            : undefined;
        message.otpSms = object.otpSms ?? undefined;
        message.otpEmail = object.otpEmail ?? undefined;
        return message;
    },
};
function createBaseChallenges_WebAuthN() {
    return { publicKeyCredentialRequestOptions: undefined };
}
export const Challenges_WebAuthN = {
    encode(message, writer = new BinaryWriter()) {
        if (message.publicKeyCredentialRequestOptions !== undefined) {
            Struct.encode(Struct.wrap(message.publicKeyCredentialRequestOptions), writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChallenges_WebAuthN();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.publicKeyCredentialRequestOptions = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            publicKeyCredentialRequestOptions: isObject(object.publicKeyCredentialRequestOptions)
                ? object.publicKeyCredentialRequestOptions
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.publicKeyCredentialRequestOptions !== undefined) {
            obj.publicKeyCredentialRequestOptions = message.publicKeyCredentialRequestOptions;
        }
        return obj;
    },
    create(base) {
        return Challenges_WebAuthN.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseChallenges_WebAuthN();
        message.publicKeyCredentialRequestOptions = object.publicKeyCredentialRequestOptions ?? undefined;
        return message;
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
