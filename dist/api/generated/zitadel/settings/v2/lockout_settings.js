"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: zitadel/settings/v2/lockout_settings.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LockoutSettings = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const long_1 = __importDefault(require("long"));
const settings_js_1 = require("./settings.js");
exports.protobufPackage = "zitadel.settings.v2";
function createBaseLockoutSettings() {
    return { maxPasswordAttempts: long_1.default.UZERO, resourceOwnerType: 0, maxOtpAttempts: long_1.default.UZERO };
}
exports.LockoutSettings = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (!message.maxPasswordAttempts.equals(long_1.default.UZERO)) {
            writer.uint32(8).uint64(message.maxPasswordAttempts.toString());
        }
        if (message.resourceOwnerType !== 0) {
            writer.uint32(16).int32(message.resourceOwnerType);
        }
        if (!message.maxOtpAttempts.equals(long_1.default.UZERO)) {
            writer.uint32(24).uint64(message.maxOtpAttempts.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLockoutSettings();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.maxPasswordAttempts = long_1.default.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.resourceOwnerType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.maxOtpAttempts = long_1.default.fromString(reader.uint64().toString(), true);
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            maxPasswordAttempts: isSet(object.maxPasswordAttempts) ? long_1.default.fromValue(object.maxPasswordAttempts) : long_1.default.UZERO,
            resourceOwnerType: isSet(object.resourceOwnerType) ? (0, settings_js_1.resourceOwnerTypeFromJSON)(object.resourceOwnerType) : 0,
            maxOtpAttempts: isSet(object.maxOtpAttempts) ? long_1.default.fromValue(object.maxOtpAttempts) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.maxPasswordAttempts.equals(long_1.default.UZERO)) {
            obj.maxPasswordAttempts = (message.maxPasswordAttempts || long_1.default.UZERO).toString();
        }
        if (message.resourceOwnerType !== 0) {
            obj.resourceOwnerType = (0, settings_js_1.resourceOwnerTypeToJSON)(message.resourceOwnerType);
        }
        if (!message.maxOtpAttempts.equals(long_1.default.UZERO)) {
            obj.maxOtpAttempts = (message.maxOtpAttempts || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.LockoutSettings.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLockoutSettings();
        message.maxPasswordAttempts = (object.maxPasswordAttempts !== undefined && object.maxPasswordAttempts !== null)
            ? long_1.default.fromValue(object.maxPasswordAttempts)
            : long_1.default.UZERO;
        message.resourceOwnerType = object.resourceOwnerType ?? 0;
        message.maxOtpAttempts = (object.maxOtpAttempts !== undefined && object.maxOtpAttempts !== null)
            ? long_1.default.fromValue(object.maxOtpAttempts)
            : long_1.default.UZERO;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
