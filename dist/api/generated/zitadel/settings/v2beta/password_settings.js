// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: zitadel/settings/v2beta/password_settings.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { resourceOwnerTypeFromJSON, resourceOwnerTypeToJSON } from "./settings.js";
export const protobufPackage = "zitadel.settings.v2beta";
function createBasePasswordComplexitySettings() {
    return {
        minLength: Long.UZERO,
        requiresUppercase: false,
        requiresLowercase: false,
        requiresNumber: false,
        requiresSymbol: false,
        resourceOwnerType: 0,
    };
}
export const PasswordComplexitySettings = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.minLength.equals(Long.UZERO)) {
            writer.uint32(8).uint64(message.minLength.toString());
        }
        if (message.requiresUppercase !== false) {
            writer.uint32(16).bool(message.requiresUppercase);
        }
        if (message.requiresLowercase !== false) {
            writer.uint32(24).bool(message.requiresLowercase);
        }
        if (message.requiresNumber !== false) {
            writer.uint32(32).bool(message.requiresNumber);
        }
        if (message.requiresSymbol !== false) {
            writer.uint32(40).bool(message.requiresSymbol);
        }
        if (message.resourceOwnerType !== 0) {
            writer.uint32(48).int32(message.resourceOwnerType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePasswordComplexitySettings();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.minLength = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.requiresUppercase = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.requiresLowercase = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.requiresNumber = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.requiresSymbol = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.resourceOwnerType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            minLength: isSet(object.minLength) ? Long.fromValue(object.minLength) : Long.UZERO,
            requiresUppercase: isSet(object.requiresUppercase) ? globalThis.Boolean(object.requiresUppercase) : false,
            requiresLowercase: isSet(object.requiresLowercase) ? globalThis.Boolean(object.requiresLowercase) : false,
            requiresNumber: isSet(object.requiresNumber) ? globalThis.Boolean(object.requiresNumber) : false,
            requiresSymbol: isSet(object.requiresSymbol) ? globalThis.Boolean(object.requiresSymbol) : false,
            resourceOwnerType: isSet(object.resourceOwnerType) ? resourceOwnerTypeFromJSON(object.resourceOwnerType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.minLength.equals(Long.UZERO)) {
            obj.minLength = (message.minLength || Long.UZERO).toString();
        }
        if (message.requiresUppercase !== false) {
            obj.requiresUppercase = message.requiresUppercase;
        }
        if (message.requiresLowercase !== false) {
            obj.requiresLowercase = message.requiresLowercase;
        }
        if (message.requiresNumber !== false) {
            obj.requiresNumber = message.requiresNumber;
        }
        if (message.requiresSymbol !== false) {
            obj.requiresSymbol = message.requiresSymbol;
        }
        if (message.resourceOwnerType !== 0) {
            obj.resourceOwnerType = resourceOwnerTypeToJSON(message.resourceOwnerType);
        }
        return obj;
    },
    create(base) {
        return PasswordComplexitySettings.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePasswordComplexitySettings();
        message.minLength = (object.minLength !== undefined && object.minLength !== null)
            ? Long.fromValue(object.minLength)
            : Long.UZERO;
        message.requiresUppercase = object.requiresUppercase ?? false;
        message.requiresLowercase = object.requiresLowercase ?? false;
        message.requiresNumber = object.requiresNumber ?? false;
        message.requiresSymbol = object.requiresSymbol ?? false;
        message.resourceOwnerType = object.resourceOwnerType ?? 0;
        return message;
    },
};
function createBasePasswordExpirySettings() {
    return { maxAgeDays: Long.UZERO, expireWarnDays: Long.UZERO, resourceOwnerType: 0 };
}
export const PasswordExpirySettings = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.maxAgeDays.equals(Long.UZERO)) {
            writer.uint32(8).uint64(message.maxAgeDays.toString());
        }
        if (!message.expireWarnDays.equals(Long.UZERO)) {
            writer.uint32(16).uint64(message.expireWarnDays.toString());
        }
        if (message.resourceOwnerType !== 0) {
            writer.uint32(24).int32(message.resourceOwnerType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePasswordExpirySettings();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.maxAgeDays = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.expireWarnDays = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.resourceOwnerType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            maxAgeDays: isSet(object.maxAgeDays) ? Long.fromValue(object.maxAgeDays) : Long.UZERO,
            expireWarnDays: isSet(object.expireWarnDays) ? Long.fromValue(object.expireWarnDays) : Long.UZERO,
            resourceOwnerType: isSet(object.resourceOwnerType) ? resourceOwnerTypeFromJSON(object.resourceOwnerType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.maxAgeDays.equals(Long.UZERO)) {
            obj.maxAgeDays = (message.maxAgeDays || Long.UZERO).toString();
        }
        if (!message.expireWarnDays.equals(Long.UZERO)) {
            obj.expireWarnDays = (message.expireWarnDays || Long.UZERO).toString();
        }
        if (message.resourceOwnerType !== 0) {
            obj.resourceOwnerType = resourceOwnerTypeToJSON(message.resourceOwnerType);
        }
        return obj;
    },
    create(base) {
        return PasswordExpirySettings.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePasswordExpirySettings();
        message.maxAgeDays = (object.maxAgeDays !== undefined && object.maxAgeDays !== null)
            ? Long.fromValue(object.maxAgeDays)
            : Long.UZERO;
        message.expireWarnDays = (object.expireWarnDays !== undefined && object.expireWarnDays !== null)
            ? Long.fromValue(object.expireWarnDays)
            : Long.UZERO;
        message.resourceOwnerType = object.resourceOwnerType ?? 0;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
