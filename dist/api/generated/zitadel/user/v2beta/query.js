// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: zitadel/user/v2beta/query.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { textQueryMethodFromJSON, textQueryMethodToJSON } from "../../object/v2beta/object.js";
import { userStateFromJSON, userStateToJSON } from "./user.js";
export const protobufPackage = "zitadel.user.v2beta";
export var Type;
(function (Type) {
    Type[Type["TYPE_UNSPECIFIED"] = 0] = "TYPE_UNSPECIFIED";
    Type[Type["TYPE_HUMAN"] = 1] = "TYPE_HUMAN";
    Type[Type["TYPE_MACHINE"] = 2] = "TYPE_MACHINE";
    Type[Type["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Type || (Type = {}));
export function typeFromJSON(object) {
    switch (object) {
        case 0:
        case "TYPE_UNSPECIFIED":
            return Type.TYPE_UNSPECIFIED;
        case 1:
        case "TYPE_HUMAN":
            return Type.TYPE_HUMAN;
        case 2:
        case "TYPE_MACHINE":
            return Type.TYPE_MACHINE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Type.UNRECOGNIZED;
    }
}
export function typeToJSON(object) {
    switch (object) {
        case Type.TYPE_UNSPECIFIED:
            return "TYPE_UNSPECIFIED";
        case Type.TYPE_HUMAN:
            return "TYPE_HUMAN";
        case Type.TYPE_MACHINE:
            return "TYPE_MACHINE";
        case Type.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
export var UserFieldName;
(function (UserFieldName) {
    UserFieldName[UserFieldName["USER_FIELD_NAME_UNSPECIFIED"] = 0] = "USER_FIELD_NAME_UNSPECIFIED";
    UserFieldName[UserFieldName["USER_FIELD_NAME_USER_NAME"] = 1] = "USER_FIELD_NAME_USER_NAME";
    UserFieldName[UserFieldName["USER_FIELD_NAME_FIRST_NAME"] = 2] = "USER_FIELD_NAME_FIRST_NAME";
    UserFieldName[UserFieldName["USER_FIELD_NAME_LAST_NAME"] = 3] = "USER_FIELD_NAME_LAST_NAME";
    UserFieldName[UserFieldName["USER_FIELD_NAME_NICK_NAME"] = 4] = "USER_FIELD_NAME_NICK_NAME";
    UserFieldName[UserFieldName["USER_FIELD_NAME_DISPLAY_NAME"] = 5] = "USER_FIELD_NAME_DISPLAY_NAME";
    UserFieldName[UserFieldName["USER_FIELD_NAME_EMAIL"] = 6] = "USER_FIELD_NAME_EMAIL";
    UserFieldName[UserFieldName["USER_FIELD_NAME_STATE"] = 7] = "USER_FIELD_NAME_STATE";
    UserFieldName[UserFieldName["USER_FIELD_NAME_TYPE"] = 8] = "USER_FIELD_NAME_TYPE";
    UserFieldName[UserFieldName["USER_FIELD_NAME_CREATION_DATE"] = 9] = "USER_FIELD_NAME_CREATION_DATE";
    UserFieldName[UserFieldName["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(UserFieldName || (UserFieldName = {}));
export function userFieldNameFromJSON(object) {
    switch (object) {
        case 0:
        case "USER_FIELD_NAME_UNSPECIFIED":
            return UserFieldName.USER_FIELD_NAME_UNSPECIFIED;
        case 1:
        case "USER_FIELD_NAME_USER_NAME":
            return UserFieldName.USER_FIELD_NAME_USER_NAME;
        case 2:
        case "USER_FIELD_NAME_FIRST_NAME":
            return UserFieldName.USER_FIELD_NAME_FIRST_NAME;
        case 3:
        case "USER_FIELD_NAME_LAST_NAME":
            return UserFieldName.USER_FIELD_NAME_LAST_NAME;
        case 4:
        case "USER_FIELD_NAME_NICK_NAME":
            return UserFieldName.USER_FIELD_NAME_NICK_NAME;
        case 5:
        case "USER_FIELD_NAME_DISPLAY_NAME":
            return UserFieldName.USER_FIELD_NAME_DISPLAY_NAME;
        case 6:
        case "USER_FIELD_NAME_EMAIL":
            return UserFieldName.USER_FIELD_NAME_EMAIL;
        case 7:
        case "USER_FIELD_NAME_STATE":
            return UserFieldName.USER_FIELD_NAME_STATE;
        case 8:
        case "USER_FIELD_NAME_TYPE":
            return UserFieldName.USER_FIELD_NAME_TYPE;
        case 9:
        case "USER_FIELD_NAME_CREATION_DATE":
            return UserFieldName.USER_FIELD_NAME_CREATION_DATE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return UserFieldName.UNRECOGNIZED;
    }
}
export function userFieldNameToJSON(object) {
    switch (object) {
        case UserFieldName.USER_FIELD_NAME_UNSPECIFIED:
            return "USER_FIELD_NAME_UNSPECIFIED";
        case UserFieldName.USER_FIELD_NAME_USER_NAME:
            return "USER_FIELD_NAME_USER_NAME";
        case UserFieldName.USER_FIELD_NAME_FIRST_NAME:
            return "USER_FIELD_NAME_FIRST_NAME";
        case UserFieldName.USER_FIELD_NAME_LAST_NAME:
            return "USER_FIELD_NAME_LAST_NAME";
        case UserFieldName.USER_FIELD_NAME_NICK_NAME:
            return "USER_FIELD_NAME_NICK_NAME";
        case UserFieldName.USER_FIELD_NAME_DISPLAY_NAME:
            return "USER_FIELD_NAME_DISPLAY_NAME";
        case UserFieldName.USER_FIELD_NAME_EMAIL:
            return "USER_FIELD_NAME_EMAIL";
        case UserFieldName.USER_FIELD_NAME_STATE:
            return "USER_FIELD_NAME_STATE";
        case UserFieldName.USER_FIELD_NAME_TYPE:
            return "USER_FIELD_NAME_TYPE";
        case UserFieldName.USER_FIELD_NAME_CREATION_DATE:
            return "USER_FIELD_NAME_CREATION_DATE";
        case UserFieldName.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseSearchQuery() {
    return {
        userNameQuery: undefined,
        firstNameQuery: undefined,
        lastNameQuery: undefined,
        nickNameQuery: undefined,
        displayNameQuery: undefined,
        emailQuery: undefined,
        stateQuery: undefined,
        typeQuery: undefined,
        loginNameQuery: undefined,
        inUserIdsQuery: undefined,
        orQuery: undefined,
        andQuery: undefined,
        notQuery: undefined,
        inUserEmailsQuery: undefined,
        organizationIdQuery: undefined,
    };
}
export const SearchQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userNameQuery !== undefined) {
            UserNameQuery.encode(message.userNameQuery, writer.uint32(10).fork()).join();
        }
        if (message.firstNameQuery !== undefined) {
            FirstNameQuery.encode(message.firstNameQuery, writer.uint32(18).fork()).join();
        }
        if (message.lastNameQuery !== undefined) {
            LastNameQuery.encode(message.lastNameQuery, writer.uint32(26).fork()).join();
        }
        if (message.nickNameQuery !== undefined) {
            NickNameQuery.encode(message.nickNameQuery, writer.uint32(34).fork()).join();
        }
        if (message.displayNameQuery !== undefined) {
            DisplayNameQuery.encode(message.displayNameQuery, writer.uint32(42).fork()).join();
        }
        if (message.emailQuery !== undefined) {
            EmailQuery.encode(message.emailQuery, writer.uint32(50).fork()).join();
        }
        if (message.stateQuery !== undefined) {
            StateQuery.encode(message.stateQuery, writer.uint32(58).fork()).join();
        }
        if (message.typeQuery !== undefined) {
            TypeQuery.encode(message.typeQuery, writer.uint32(66).fork()).join();
        }
        if (message.loginNameQuery !== undefined) {
            LoginNameQuery.encode(message.loginNameQuery, writer.uint32(74).fork()).join();
        }
        if (message.inUserIdsQuery !== undefined) {
            InUserIDQuery.encode(message.inUserIdsQuery, writer.uint32(82).fork()).join();
        }
        if (message.orQuery !== undefined) {
            OrQuery.encode(message.orQuery, writer.uint32(90).fork()).join();
        }
        if (message.andQuery !== undefined) {
            AndQuery.encode(message.andQuery, writer.uint32(98).fork()).join();
        }
        if (message.notQuery !== undefined) {
            NotQuery.encode(message.notQuery, writer.uint32(106).fork()).join();
        }
        if (message.inUserEmailsQuery !== undefined) {
            InUserEmailsQuery.encode(message.inUserEmailsQuery, writer.uint32(114).fork()).join();
        }
        if (message.organizationIdQuery !== undefined) {
            OrganizationIdQuery.encode(message.organizationIdQuery, writer.uint32(122).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userNameQuery = UserNameQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.firstNameQuery = FirstNameQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.lastNameQuery = LastNameQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.nickNameQuery = NickNameQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.displayNameQuery = DisplayNameQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.emailQuery = EmailQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.stateQuery = StateQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.typeQuery = TypeQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.loginNameQuery = LoginNameQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.inUserIdsQuery = InUserIDQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.orQuery = OrQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.andQuery = AndQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.notQuery = NotQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.inUserEmailsQuery = InUserEmailsQuery.decode(reader, reader.uint32());
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.organizationIdQuery = OrganizationIdQuery.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userNameQuery: isSet(object.userNameQuery) ? UserNameQuery.fromJSON(object.userNameQuery) : undefined,
            firstNameQuery: isSet(object.firstNameQuery) ? FirstNameQuery.fromJSON(object.firstNameQuery) : undefined,
            lastNameQuery: isSet(object.lastNameQuery) ? LastNameQuery.fromJSON(object.lastNameQuery) : undefined,
            nickNameQuery: isSet(object.nickNameQuery) ? NickNameQuery.fromJSON(object.nickNameQuery) : undefined,
            displayNameQuery: isSet(object.displayNameQuery) ? DisplayNameQuery.fromJSON(object.displayNameQuery) : undefined,
            emailQuery: isSet(object.emailQuery) ? EmailQuery.fromJSON(object.emailQuery) : undefined,
            stateQuery: isSet(object.stateQuery) ? StateQuery.fromJSON(object.stateQuery) : undefined,
            typeQuery: isSet(object.typeQuery) ? TypeQuery.fromJSON(object.typeQuery) : undefined,
            loginNameQuery: isSet(object.loginNameQuery) ? LoginNameQuery.fromJSON(object.loginNameQuery) : undefined,
            inUserIdsQuery: isSet(object.inUserIdsQuery) ? InUserIDQuery.fromJSON(object.inUserIdsQuery) : undefined,
            orQuery: isSet(object.orQuery) ? OrQuery.fromJSON(object.orQuery) : undefined,
            andQuery: isSet(object.andQuery) ? AndQuery.fromJSON(object.andQuery) : undefined,
            notQuery: isSet(object.notQuery) ? NotQuery.fromJSON(object.notQuery) : undefined,
            inUserEmailsQuery: isSet(object.inUserEmailsQuery)
                ? InUserEmailsQuery.fromJSON(object.inUserEmailsQuery)
                : undefined,
            organizationIdQuery: isSet(object.organizationIdQuery)
                ? OrganizationIdQuery.fromJSON(object.organizationIdQuery)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userNameQuery !== undefined) {
            obj.userNameQuery = UserNameQuery.toJSON(message.userNameQuery);
        }
        if (message.firstNameQuery !== undefined) {
            obj.firstNameQuery = FirstNameQuery.toJSON(message.firstNameQuery);
        }
        if (message.lastNameQuery !== undefined) {
            obj.lastNameQuery = LastNameQuery.toJSON(message.lastNameQuery);
        }
        if (message.nickNameQuery !== undefined) {
            obj.nickNameQuery = NickNameQuery.toJSON(message.nickNameQuery);
        }
        if (message.displayNameQuery !== undefined) {
            obj.displayNameQuery = DisplayNameQuery.toJSON(message.displayNameQuery);
        }
        if (message.emailQuery !== undefined) {
            obj.emailQuery = EmailQuery.toJSON(message.emailQuery);
        }
        if (message.stateQuery !== undefined) {
            obj.stateQuery = StateQuery.toJSON(message.stateQuery);
        }
        if (message.typeQuery !== undefined) {
            obj.typeQuery = TypeQuery.toJSON(message.typeQuery);
        }
        if (message.loginNameQuery !== undefined) {
            obj.loginNameQuery = LoginNameQuery.toJSON(message.loginNameQuery);
        }
        if (message.inUserIdsQuery !== undefined) {
            obj.inUserIdsQuery = InUserIDQuery.toJSON(message.inUserIdsQuery);
        }
        if (message.orQuery !== undefined) {
            obj.orQuery = OrQuery.toJSON(message.orQuery);
        }
        if (message.andQuery !== undefined) {
            obj.andQuery = AndQuery.toJSON(message.andQuery);
        }
        if (message.notQuery !== undefined) {
            obj.notQuery = NotQuery.toJSON(message.notQuery);
        }
        if (message.inUserEmailsQuery !== undefined) {
            obj.inUserEmailsQuery = InUserEmailsQuery.toJSON(message.inUserEmailsQuery);
        }
        if (message.organizationIdQuery !== undefined) {
            obj.organizationIdQuery = OrganizationIdQuery.toJSON(message.organizationIdQuery);
        }
        return obj;
    },
    create(base) {
        return SearchQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSearchQuery();
        message.userNameQuery = (object.userNameQuery !== undefined && object.userNameQuery !== null)
            ? UserNameQuery.fromPartial(object.userNameQuery)
            : undefined;
        message.firstNameQuery = (object.firstNameQuery !== undefined && object.firstNameQuery !== null)
            ? FirstNameQuery.fromPartial(object.firstNameQuery)
            : undefined;
        message.lastNameQuery = (object.lastNameQuery !== undefined && object.lastNameQuery !== null)
            ? LastNameQuery.fromPartial(object.lastNameQuery)
            : undefined;
        message.nickNameQuery = (object.nickNameQuery !== undefined && object.nickNameQuery !== null)
            ? NickNameQuery.fromPartial(object.nickNameQuery)
            : undefined;
        message.displayNameQuery = (object.displayNameQuery !== undefined && object.displayNameQuery !== null)
            ? DisplayNameQuery.fromPartial(object.displayNameQuery)
            : undefined;
        message.emailQuery = (object.emailQuery !== undefined && object.emailQuery !== null)
            ? EmailQuery.fromPartial(object.emailQuery)
            : undefined;
        message.stateQuery = (object.stateQuery !== undefined && object.stateQuery !== null)
            ? StateQuery.fromPartial(object.stateQuery)
            : undefined;
        message.typeQuery = (object.typeQuery !== undefined && object.typeQuery !== null)
            ? TypeQuery.fromPartial(object.typeQuery)
            : undefined;
        message.loginNameQuery = (object.loginNameQuery !== undefined && object.loginNameQuery !== null)
            ? LoginNameQuery.fromPartial(object.loginNameQuery)
            : undefined;
        message.inUserIdsQuery = (object.inUserIdsQuery !== undefined && object.inUserIdsQuery !== null)
            ? InUserIDQuery.fromPartial(object.inUserIdsQuery)
            : undefined;
        message.orQuery = (object.orQuery !== undefined && object.orQuery !== null)
            ? OrQuery.fromPartial(object.orQuery)
            : undefined;
        message.andQuery = (object.andQuery !== undefined && object.andQuery !== null)
            ? AndQuery.fromPartial(object.andQuery)
            : undefined;
        message.notQuery = (object.notQuery !== undefined && object.notQuery !== null)
            ? NotQuery.fromPartial(object.notQuery)
            : undefined;
        message.inUserEmailsQuery = (object.inUserEmailsQuery !== undefined && object.inUserEmailsQuery !== null)
            ? InUserEmailsQuery.fromPartial(object.inUserEmailsQuery)
            : undefined;
        message.organizationIdQuery = (object.organizationIdQuery !== undefined && object.organizationIdQuery !== null)
            ? OrganizationIdQuery.fromPartial(object.organizationIdQuery)
            : undefined;
        return message;
    },
};
function createBaseOrQuery() {
    return { queries: [] };
}
export const OrQuery = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.queries) {
            SearchQuery.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.queries.push(SearchQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            queries: globalThis.Array.isArray(object?.queries) ? object.queries.map((e) => SearchQuery.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => SearchQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return OrQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOrQuery();
        message.queries = object.queries?.map((e) => SearchQuery.fromPartial(e)) || [];
        return message;
    },
};
function createBaseAndQuery() {
    return { queries: [] };
}
export const AndQuery = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.queries) {
            SearchQuery.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAndQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.queries.push(SearchQuery.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            queries: globalThis.Array.isArray(object?.queries) ? object.queries.map((e) => SearchQuery.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.queries?.length) {
            obj.queries = message.queries.map((e) => SearchQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return AndQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAndQuery();
        message.queries = object.queries?.map((e) => SearchQuery.fromPartial(e)) || [];
        return message;
    },
};
function createBaseNotQuery() {
    return { query: undefined };
}
export const NotQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.query !== undefined) {
            SearchQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.query = SearchQuery.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { query: isSet(object.query) ? SearchQuery.fromJSON(object.query) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = SearchQuery.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return NotQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNotQuery();
        message.query = (object.query !== undefined && object.query !== null)
            ? SearchQuery.fromPartial(object.query)
            : undefined;
        return message;
    },
};
function createBaseInUserIDQuery() {
    return { userIds: [] };
}
export const InUserIDQuery = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.userIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInUserIDQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userIds.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userIds: globalThis.Array.isArray(object?.userIds) ? object.userIds.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userIds?.length) {
            obj.userIds = message.userIds;
        }
        return obj;
    },
    create(base) {
        return InUserIDQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInUserIDQuery();
        message.userIds = object.userIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseUserNameQuery() {
    return { userName: "", method: 0 };
}
export const UserNameQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.userName !== "") {
            writer.uint32(10).string(message.userName);
        }
        if (message.method !== 0) {
            writer.uint32(16).int32(message.method);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserNameQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.method = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
            method: isSet(object.method) ? textQueryMethodFromJSON(object.method) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userName !== "") {
            obj.userName = message.userName;
        }
        if (message.method !== 0) {
            obj.method = textQueryMethodToJSON(message.method);
        }
        return obj;
    },
    create(base) {
        return UserNameQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserNameQuery();
        message.userName = object.userName ?? "";
        message.method = object.method ?? 0;
        return message;
    },
};
function createBaseFirstNameQuery() {
    return { firstName: "", method: 0 };
}
export const FirstNameQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.firstName !== "") {
            writer.uint32(10).string(message.firstName);
        }
        if (message.method !== 0) {
            writer.uint32(16).int32(message.method);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirstNameQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.firstName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.method = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
            method: isSet(object.method) ? textQueryMethodFromJSON(object.method) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.firstName !== "") {
            obj.firstName = message.firstName;
        }
        if (message.method !== 0) {
            obj.method = textQueryMethodToJSON(message.method);
        }
        return obj;
    },
    create(base) {
        return FirstNameQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFirstNameQuery();
        message.firstName = object.firstName ?? "";
        message.method = object.method ?? 0;
        return message;
    },
};
function createBaseLastNameQuery() {
    return { lastName: "", method: 0 };
}
export const LastNameQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.lastName !== "") {
            writer.uint32(10).string(message.lastName);
        }
        if (message.method !== 0) {
            writer.uint32(16).int32(message.method);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLastNameQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lastName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.method = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
            method: isSet(object.method) ? textQueryMethodFromJSON(object.method) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.lastName !== "") {
            obj.lastName = message.lastName;
        }
        if (message.method !== 0) {
            obj.method = textQueryMethodToJSON(message.method);
        }
        return obj;
    },
    create(base) {
        return LastNameQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLastNameQuery();
        message.lastName = object.lastName ?? "";
        message.method = object.method ?? 0;
        return message;
    },
};
function createBaseNickNameQuery() {
    return { nickName: "", method: 0 };
}
export const NickNameQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.nickName !== "") {
            writer.uint32(10).string(message.nickName);
        }
        if (message.method !== 0) {
            writer.uint32(16).int32(message.method);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNickNameQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.nickName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.method = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
            method: isSet(object.method) ? textQueryMethodFromJSON(object.method) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.nickName !== "") {
            obj.nickName = message.nickName;
        }
        if (message.method !== 0) {
            obj.method = textQueryMethodToJSON(message.method);
        }
        return obj;
    },
    create(base) {
        return NickNameQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNickNameQuery();
        message.nickName = object.nickName ?? "";
        message.method = object.method ?? 0;
        return message;
    },
};
function createBaseDisplayNameQuery() {
    return { displayName: "", method: 0 };
}
export const DisplayNameQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.displayName !== "") {
            writer.uint32(10).string(message.displayName);
        }
        if (message.method !== 0) {
            writer.uint32(16).int32(message.method);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDisplayNameQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.method = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
            method: isSet(object.method) ? textQueryMethodFromJSON(object.method) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.displayName !== "") {
            obj.displayName = message.displayName;
        }
        if (message.method !== 0) {
            obj.method = textQueryMethodToJSON(message.method);
        }
        return obj;
    },
    create(base) {
        return DisplayNameQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDisplayNameQuery();
        message.displayName = object.displayName ?? "";
        message.method = object.method ?? 0;
        return message;
    },
};
function createBaseEmailQuery() {
    return { emailAddress: "", method: 0 };
}
export const EmailQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.emailAddress !== "") {
            writer.uint32(10).string(message.emailAddress);
        }
        if (message.method !== 0) {
            writer.uint32(16).int32(message.method);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmailQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.emailAddress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.method = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            emailAddress: isSet(object.emailAddress) ? globalThis.String(object.emailAddress) : "",
            method: isSet(object.method) ? textQueryMethodFromJSON(object.method) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.emailAddress !== "") {
            obj.emailAddress = message.emailAddress;
        }
        if (message.method !== 0) {
            obj.method = textQueryMethodToJSON(message.method);
        }
        return obj;
    },
    create(base) {
        return EmailQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEmailQuery();
        message.emailAddress = object.emailAddress ?? "";
        message.method = object.method ?? 0;
        return message;
    },
};
function createBaseLoginNameQuery() {
    return { loginName: "", method: 0 };
}
export const LoginNameQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.loginName !== "") {
            writer.uint32(10).string(message.loginName);
        }
        if (message.method !== 0) {
            writer.uint32(16).int32(message.method);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLoginNameQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.loginName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.method = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            loginName: isSet(object.loginName) ? globalThis.String(object.loginName) : "",
            method: isSet(object.method) ? textQueryMethodFromJSON(object.method) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.loginName !== "") {
            obj.loginName = message.loginName;
        }
        if (message.method !== 0) {
            obj.method = textQueryMethodToJSON(message.method);
        }
        return obj;
    },
    create(base) {
        return LoginNameQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLoginNameQuery();
        message.loginName = object.loginName ?? "";
        message.method = object.method ?? 0;
        return message;
    },
};
function createBaseStateQuery() {
    return { state: 0 };
}
export const StateQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.state !== 0) {
            writer.uint32(8).int32(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStateQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { state: isSet(object.state) ? userStateFromJSON(object.state) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== 0) {
            obj.state = userStateToJSON(message.state);
        }
        return obj;
    },
    create(base) {
        return StateQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseStateQuery();
        message.state = object.state ?? 0;
        return message;
    },
};
function createBaseTypeQuery() {
    return { type: 0 };
}
export const TypeQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTypeQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { type: isSet(object.type) ? typeFromJSON(object.type) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = typeToJSON(message.type);
        }
        return obj;
    },
    create(base) {
        return TypeQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTypeQuery();
        message.type = object.type ?? 0;
        return message;
    },
};
function createBaseInUserEmailsQuery() {
    return { userEmails: [] };
}
export const InUserEmailsQuery = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.userEmails) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInUserEmailsQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userEmails.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userEmails: globalThis.Array.isArray(object?.userEmails)
                ? object.userEmails.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userEmails?.length) {
            obj.userEmails = message.userEmails;
        }
        return obj;
    },
    create(base) {
        return InUserEmailsQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInUserEmailsQuery();
        message.userEmails = object.userEmails?.map((e) => e) || [];
        return message;
    },
};
function createBaseOrganizationIdQuery() {
    return { organizationId: "" };
}
export const OrganizationIdQuery = {
    encode(message, writer = new BinaryWriter()) {
        if (message.organizationId !== "") {
            writer.uint32(10).string(message.organizationId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrganizationIdQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.organizationId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { organizationId: isSet(object.organizationId) ? globalThis.String(object.organizationId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizationId !== "") {
            obj.organizationId = message.organizationId;
        }
        return obj;
    },
    create(base) {
        return OrganizationIdQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOrganizationIdQuery();
        message.organizationId = object.organizationId ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
